=encoding euc-jp

=head1 NAME

=begin original

perl584delta - what is new for perl v5.8.4

=end original

perl584delta - perl v5.8.4 での変更点

=head1 DESCRIPTION

=begin original

This document describes differences between the 5.8.3 release and
the 5.8.4 release.

=end original

このドキュメントは 5.8.3 リリースと 5.8.4 リリースの変更点を記述しています。

=head1 Incompatible Changes

(互換性のない変更)

=begin original

Many minor bugs have been fixed. Scripts which happen to rely on previously
erroneous behaviour will consider these fixes as incompatible changes :-)
You are advised to perform sufficient acceptance testing on this release
to satisfy yourself that this does not affect you, before putting this
release into production.

=end original

多くの細かいバグが修正されました。以前の間違った振る舞いに偶然にも
依存していたスクリプトはこれら修正が互換性のない変更と
考えるかもしれません:-)。このリリースを製品に組み入れる前に、
バグ修正が影響を与えないことを確認するために十分な受け入れテストを
することをお勧めします。

=begin original

The diagnostic output of Carp has been changed slightly, to add a space after
the comma between arguments. This makes it much easier for tools such as
web browsers to wrap it, but might confuse any automatic tools which perform
detailed parsing of Carp output.

=end original

Carp の診断出力がわずかに変更され、引数の間のカンマの後にスペースが
追加されました。これにより web ブラウザのようなツールが自動折り返しを
行うのがとても容易になりましたが、Carp の出力を詳細にパースする自動ツールを
混乱させるかもしれません。

=begin original

The internal dump output has been improved, so that non-printable characters
such as newline and backspace are output in C<\x> notation, rather than
octal. This might just confuse non-robust tools which parse the output of
modules such as Devel::Peek.

=end original

内部ダンプ出力は改良され、改行やバックスペースと言った表示できない文字は
8 進数表記ではなく C<\x> 表記になりました。
これは Devel::Peek といったモジュールの出力をパースする堅牢でない
ツールを混乱させるかもしれません。

=head1 Core Enhancements

(Core の拡張)

=head2 Malloc wrapping

=begin original

Perl can now be built to detect attempts to assign pathologically large chunks
of memory.  Previously such assignments would suffer from integer wrap-around
during size calculations causing a misallocation, which would crash perl, and
could theoretically be used for "stack smashing" attacks.  The wrapping
defaults to enabled on platforms where we know it works (most AIX
configurations, BSDi, Darwin, DEC OSF/1, FreeBSD, HP/UX, GNU Linux, OpenBSD,
Solaris, VMS and most Win32 compilers) and defaults to disabled on other
platforms.

=end original

異常に大きなメモリブロックを確保しようとするのを検出するように
ビルドできるようになりました。以前はこのような確保はサイズ計算時に
整数が桁あふれして間違った割り当てを引き起こしました。
これは perl をクラッシュさせ、理論的には「スタック破壊」攻撃に利用できました。
ラッピングのデフォルトは、これが動作すると知っているプラットフォーム
(AIX のほとんどの設定, BSDi, Darwin, DEC OSF/1, FreeBSD, HP/UX, GNU Linux, 
OpenBSD, Solaris, VMS, ほとんどの Win32 コンパイラ)では有効、
それ以外のプラットフォームではデフォルトでは無効になっています。

=head2 Unicode Character Database 4.0.1

=begin original

The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.0.1 from 4.0.0.

=end original

Perl 5.8 に含まれている Unicode Character Database は 4.0.0 から 4.0.1 に
更新されました。

=head2 suidperl less insecure

=begin original

Paul Szabo has analysed and patched C<suidperl> to remove existing known
insecurities. Currently there are no known holes in C<suidperl>, but previous
experience shows that we cannot be confident that these were the last. You may
no longer invoke the set uid perl directly, so to preserve backwards
compatibility with scripts that invoke #!/usr/bin/suidperl the only set uid
binary is now C<sperl5.8.>I<n> (C<sperl5.8.4> for this release). C<suidperl>
is installed as a hard link to C<perl>; both C<suidperl> and C<perl> will
invoke C<sperl5.8.4> automatically the set uid binary, so this change should
be completely transparent.

=end original

Paul Szabo は C<suidperl> を解析し、知られている脆弱性を取り除くための
パッチを当てました。現在のところ C<suidperl> に知られている脆弱性は
ありませんが、過去の経験から言うと、これがずっと続く自信はありません。
もはや set uid された perl を直接起動することはなく、
#!/usr/bin/suidperl を起動するスクリプトの過去互換性を維持するための
唯一の set uid されたバイナリは C<sperl5.8.>I<n> です
このリリースでは(C<sperl5.8.4>)。
C<suidperl> は C<perl> のハードリンクとしてインストールされます;
C<suidperl> と C<perl> は両方とも set uid されたバイナリである
C<sperl5.8.4>を起動します。従ってこの変更は完全に透過のはずです。

=begin original

For new projects the core perl team would strongly recommend that you use
dedicated, single purpose security tools such as C<sudo> in preference to
C<suidperl>.

=end original

新しいプロジェクトのためには、C<suidperl> よりむしろ、C<sudo>のような専用で
単一目的のセキュリティツールを使うことをコア perl チームは強く勧めます。

=head2 format

=begin original

In addition to bug fixes, C<format>'s features have been enhanced. See
L<perlform>

=end original

バグ修正に加えて、C<format> の機能が拡張されました。
L<perlform> を参照して下さい。

=head1 Modules and Pragmata

(モジュールとプラグマ)

=begin original

The (mis)use of C</tmp> in core modules and documentation has been tidied up.
Some modules available both within the perl core and independently from CPAN
("dual-life modules") have not yet had these changes applied; the changes
will be integrated into future stable perl releases as the modules are
updated on CPAN.

=end original

コアモジュールとドキュメントでの C</tmp> の(誤)使用は整理されました。
Perl コア内と独立した CPAN と両方に存在するモジュール
("dual-life modules")ではまだこれらの変更は適用されていません。
変更は CPAN のモジュールが更新された時点で将来の安定版リリースの perl に
統合されます。

=head2 Updated modules

(更新されたモジュール)

=over 4

=item Attribute::Handlers

=item B

=item Benchmark

=item CGI

=item Carp

=item Cwd

=item Exporter

=item File::Find

=item IO

=item IPC::Open3

=item Local::Maketext

=item Math::BigFloat

=item Math::BigInt

=item Math::BigRat

=item MIME::Base64

=item ODBM_File

=item POSIX

=item Shell

=item Socket

=begin original

There is experimental support for Linux abstract Unix domain sockets.

=end original

Linux 抽象 Unix ドメインソケットに実験的に対応しました。

=item Storable

=item Switch

=begin original

Synced with its CPAN version 2.10

=end original

CPAN バージョン 2.10 と同期しました。

=item Sys::Syslog

=begin original

C<syslog()> can now use numeric constants for facility names and priorities,
in addition to strings.

=end original

C<syslog()> はファシリティ名と優先度の指定に、文字列に加えて数値定数も
使用可能になりました。

=item Term::ANSIColor

=item Time::HiRes

=item Unicode::UCD

=item Win32

=begin original

Win32.pm/Win32.xs has moved from the libwin32 module to core Perl

=end original

Win32.pm/Win32.xs は libwin32 モジュールからコア Perl に移動しました。

=item base

=item open

=item threads

=begin original

Detached threads are now also supported on Windows.

=end original

detach されたスレッドが Windows でも対応されました。

=item utf8

=back

=head1 Performance Enhancements

(性能の向上)

=over 4

=item *

=begin original

Accelerated Unicode case mappings (C</i>, C<lc>, C<uc>, etc).

=end original

Unicode 大文字/小文字マッピング(C</i>, C<lc>, C<uc>など)が
高速化されました。

=item *

=begin original

In place sort optimised (eg C<@a = sort @a>)

=end original

その場でのソート (C<@a = sort @a>)が最適化されました。

=item *

=begin original

Unnecessary assignment optimised away in

=end original

以下のような不要な割り当てが最適化(除去)されるようになりました。

  my $s = undef;
  my @a = ();
  my %h = ();

=item *

=begin original

Optimised C<map> in scalar context

=end original

スカラコンテキストでの C<map> が最適化されました。

=back

=head1 Utility Changes

(ツールの変更)

=begin original

The Perl debugger (F<lib/perl5db.pl>) can now save all debugger commands for
sourcing later, and can display the parent inheritance tree of a given class.

=end original

Perl デバッガ (F<lib/perl5db.pl>) は後で利用するために全てのデバッガコマンドを
保存できるようになり、また与えられたクラスの親継承木を表示できるように
なりました。

=head1 Installation and Configuration Improvements

(インストールと設定の改良)

=begin original

The build process on both VMS and Windows has had several minor improvements
made. On Windows Borland's C compiler can now compile perl with PerlIO and/or
USE_LARGE_FILES enabled.

=end original

VMS と Windows でのビルドプロセスはいくつか細かい改良が行われました。
Windows Borland C コンパイラで、PerlIO と USE_LARGE_FILES を有効にして
コンパイルできるようになりました。

=begin original

C<perl.exe> on Windows now has a "Camel" logo icon. The use of a camel with
the topic of Perl is a trademark of O'Reilly and Associates Inc., and is used
with their permission (ie distribution of the source, compiling a Windows
executable from it, and using that executable locally). Use of the supplied
camel for anything other than a perl executable's icon is specifically not
covered, and anyone wishing to redistribute perl binaries I<with> the icon
should check directly with O'Reilly beforehand.

=end original

Windows の C<perl.exe> は「ラクダ」ロゴアイコンを持つようになりました。
Perl に関してラクダを使うことは O'Reilly and Associates Inc. の商標であり、
その許可の基に使用(ソースの配布、そこからの Windows 実行ファイルの
コンパイル、その実行ファイルのローカルでの使用)しています。
perl の実行ファイルのアイコンとして以外のこのラクダの使用については
含まれていないので、このアイコンと I<共に> perl バイナリを再配布したい人は
予め O'Reilly に直接確認するべきです。

=begin original

Perl should build cleanly on Stratus VOS once more.

=end original

Perl は Stratus VOS でもう一度クリーンにビルドできるべきです。

=head1 Selected Bug Fixes

(バグ修正の抜粋)

=begin original

More utf8 bugs fixed, notably in how C<chomp>, C<chop>, C<send>, and
C<syswrite> and interact with utf8 data. Concatenation now works correctly
when C<use bytes;> is in scope.

=end original

より多くの utf8 バグが修正されました。特に 
C<chomp>, C<chop>, C<send>, C<syswrite> と utf8 データとの相互作用が
修正されました。C<use bytes;>スコープ内での文字連結が正しく
働くようになりました。

=begin original

Pragmata are now correctly propagated into (?{...}) constructions in regexps.
Code such as

=end original

プラグマが正規表現の (?{...}) 構造の中に正しく伝播するようになりました。

   my $x = qr{ ... (??{ $x }) ... };

=begin original

will now (correctly) fail under use strict. (As the inner C<$x> is and
has always referred to C<$::x>)

=end original

のようなコードは use strict の環境では(正しく)失敗します
(内部の C<$x> は常に C<$::x> として扱われるからです)。

=begin original

The "const in void context" warning has been suppressed for a constant in an
optimised-away boolean expression such as C<5 || print;>

=end original

「無効コンテキストでの定数」警告は C<5 || print;> のような、
最適化によって除去される真偽値表現での定数に関しては
抑制されるようになりました。

=begin original

C<perl -i> could C<fchmod(stdin)> by mistake. This is serious if stdin is
attached to a terminal, and perl is running as root. Now fixed.

=end original

ミスにより、C<perl -i> が C<fchmod(stdin)> できるようになっていました。
これは標準入力が端末に接続され、perl が root で実行されているときに
重大な問題でした。この問題は修正されました。

=head1 New or Changed Diagnostics

(新しい、または変更された診断メッセージ)

=begin original

C<Carp> and the internal diagnostic routines used by C<Devel::Peek> have been
made clearer, as described in L</Incompatible Changes>

=end original

C<Carp> と C<Devel::Peek> で用いられている内部診断ルーチンは
L</Incompatible Changes> で記述されているようにより明確になりました。

=head1 Changed Internals

(内部の変更)

=begin original

Some bugs have been fixed in the hash internals. Restricted hashes and
their place holders are now allocated and deleted at slightly different times,
but this should not be visible to user code.

=end original

ハッシュの内部表現に関するいくつかのバグが修正されました。
制限ハッシュとそのプレースホルダは少し異なるタイミングで割り当て及び
削除されますが、これはユーザーコードからは見えないはずです。

=head1 Future Directions

(将来の方向性)

=begin original

Code freeze for the next maintenance release (5.8.5) will be on 30th June
2004, with release by mid July.

=end original

次のメンテナンスリリース(5.8.5)は 2004 年 6 月 30 日にコードフリーズされ、
7 月中旬までにリリースされる予定です。

=head1 Platform Specific Problems

(プラットフォーム固有の問題)

=begin original

This release is known not to build on Windows 95.

=end original

このリリースは Windows 95 ではビルドできないことがわかっています。

=head1 Reporting Bugs

=begin original

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.

=end original

もしバグと思われるものが見つかったら、 comp.lang.perl.misc ニュースグループに
最近投稿された記事や http://bugs.perl.org にある perl バグデータベースを
確認してください。
Perl ホームページ、http://www.perl.org にも情報があります。

=begin original

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/

=end original

もしまだ報告されていないバグだと確信したら、そのリリースに含まれている
perlbug プログラムをを実行してください。
バグの再現スクリプトを十分小さく、しかし有効なコードに切りつめることを
意識してください。バグレポートは perl -V の出力と一緒に
perlbug@perl.org に送られ Perl porting チームによって解析されます。
Perl 5 のバグについては http://bugs.perl.org/ で閲覧及び
検索することができます。

=head1 SEE ALSO

=begin original

The F<Changes> file for exhaustive details on what changed.

=end original

F<Changes> ファイルに変更点の完全な詳細があります。

=begin original

The F<INSTALL> file for how to build Perl.

=end original

F<INSTALL> ファイルに Perl のビルド方法があります。

=begin original

The F<README> file for general stuff.

=end original

F<README> ファイルに一般的なことがあります。

=begin original

The F<Artistic> and F<Copying> files for copyright information.

=end original

F<Artistic> 及び F<Copying> ファイルに著作権情報があります。

=begin meta

Translate: Kentaro Shirakata <argrath@ub32.org>
License: Same as Perl

=end meta

=cut

