
=encoding euc-jp

=head1 NAME

=begin original

perl58delta - what is new for perl v5.8.0

=end original

perl58delta - perl v5.8.0での変更点

=head1 DESCRIPTION

=begin original

This document describes differences between the 5.6.0 release and
the 5.8.0 release.

=end original

このドキュメントは 5.6.0 リリースと 5.8.0 リリースの変更点を記述しています。

=begin original

Many of the bug fixes in 5.8.0 were already seen in the 5.6.1
maintenance release since the two releases were kept closely
coordinated (while 5.8.0 was still called 5.7.something).

=end original

5.8.0 に含まれるバグフィックスの多くは、5.6.1 というメンテナンスリリースにも
既に含まれていました。これら2つのリリースは、（5.8.0 がまだ 5.7.何番と
呼ばれていた頃には）密接に協調していたためです。

=begin original

Changes that were integrated into the 5.6.1 release are marked C<[561]>.
Many of these changes have been further developed since 5.6.1 was released,
those are marked C<[561+]>.

=end original

5.6.1 に統合された変更点には、C<[561]> という印を付けてあります。これらの
変更点の中には 5.6.1 のリリース後にさらに開発が進んだものも多いのですが、
そういった変更点には C<[561+]> という印を付けておきました。

=begin original

You can see the list of changes in the 5.6.1 release (both from the
5.005_03 release and the 5.6.0 release) by reading L<perl561delta>.

=end original

5.6.1 に含まれる変更点一覧については、(5.005_03 からの変更も、5.6.0 からの
変更も含めて) L<perl561delta> に書いてあります。

=head1 Highlights In 5.8.0

(5.8.0 における注目点)

=over 4

=item *

=begin original

Better Unicode support

=end original

Unicodeサポートの強化

=item *

=begin original

New IO Implementation

=end original

新しい IO の実装

=item *

=begin original

New Thread Implementation

=end original

新しいスレッドの実装

=item *

=begin original

Better Numeric Accuracy

=end original

数値精度の向上

=item *

=begin original

Safe Signals

=end original

安全なシグナル

=item *

=begin original

Many New Modules

=end original

多くの新しいモジュール

=item *

=begin original

More Extensive Regression Testing

=end original

さらに広範囲な回帰テスト

=back

=head1 Incompatible Changes

(互換性のない変更)

=head2 Binary Incompatibility

(バイナリ非互換)

=begin original

B<Perl 5.8 is not binary compatible with earlier releases of Perl.>

=end original

B<Perl 5.8 と以前リリースされた Perl のバイナリには互換性がありません。>

=begin original

B<You have to recompile your XS modules.>

=end original

B<XS モジュールは再コンパイルしなければいけません。>

=begin original

(Pure Perl modules should continue to work.)

=end original

(ピュア Perl のモジュールは動作するでしょう。)

=begin original

The major reason for the discontinuity is the new IO architecture
called PerlIO.  PerlIO is the default configuration because without
it many new features of Perl 5.8 cannot be used.  In other words:
you just have to recompile your modules containing XS code, sorry
about that.

=end original

互換性がなくなった主な理由は PerlIO と呼ぶ新しい IO アーキテクチャのためです。
Perl 5.8 の新しい機能の多くが PerlIO を使用しているので、PerlIO はデフォルトで
組み込まれます。言い換えれば、残念ですが XS のコードを含んでいるモジュールは
再コンパイルしなければなりません。

=begin original

In future releases of Perl, non-PerlIO aware XS modules may become
completely unsupported.  This shouldn't be too difficult for module
authors, however: PerlIO has been designed as a drop-in replacement
(at the source code level) for the stdio interface.

=end original

PerlIO を意識しない XS モジュールは、将来リリースされる Perl で完全にサポート
されなくなる可能性があります。しかし PerlIO は stdio インターフェイスを
(ソースコードレベルで)差し替えるように設計されているので、モジュール作者へ
過度に負担がかかることはないでしょう。

=begin original

Depending on your platform, there are also other reasons why
we decided to break binary compatibility, please read on.

=end original

プラットフォームによってはバイナリの互換性を無くした他の理由があるので
読み進めてください。

=head2 64-bit platforms and malloc

(64 ビットプラットフォームと malloc)

=begin original

If your pointers are 64 bits wide, the Perl malloc is no longer being
used because it does not work well with 8-byte pointers.  Also,
usually the system mallocs on such platforms are much better optimized
for such large memory models than the Perl malloc.  Some memory-hungry
Perl applications like the PDL don't work well with Perl's malloc.
Finally, other applications than Perl (such as mod_perl) tend to prefer
the system malloc.  Such platforms include Alpha and 64-bit HPPA,
MIPS, PPC, and Sparc.

=end original

もしポインタが 64 ビット幅であれば、Perl の malloc が使われることは
もうないでしょう。なぜならそれは 8 バイトのポインタでは上手く動かないからです。
また、通常そのようなプラットフォームでは、システムの malloc はそのような
大きなメモリモデルにおいて Perl の malloc よりもっと良い最適化がなされています。
PDL のようなメモリハングリーな Perl アプリケーションの中には Perl の malloc では
上手く動かないものもあります。最後に、Perl 以外のアプリケーション
(例えば mod_perl)はシステムの malloc を好む傾向があります。
そのようなプラットフォームには Alpha, 64-bit HPPA, MIPS, PPC, Sparc などが
あります。

=head2 AIX Dynaloading

(AIXのダイナミックローディング)

=begin original

The AIX dynaloading now uses in AIX releases 4.3 and newer the native
dlopen interface of AIX instead of the old emulated interface.  This
change will probably break backward compatibility with compiled
modules.  The change was made to make Perl more compliant with other
applications like mod_perl which are using the AIX native interface.

=end original

AIX リリース 4.3 またはそれ以降において AIX のダイナミックローディングは
以前のエミュレートされたインターフェースではなく AIX のネイティブ dlopen
インターフェースを使うようになりました。この変更はおそらくコンパイルされた
モジュールの後方互換性を破壊するでしょう。この変更は、AIX のネイティブ
インターフェースを使っている mod_perl のような他のアプリケーションに、
Perl をより従わせるためになされました。

=head2 Attributes for C<my> variables now handled at run-time

(実行時にハンドリングする C<my> 変数の属性)

=begin original

The C<my EXPR : ATTRS> syntax now applies variable attributes at
run-time.  (Subroutine and C<our> variables still get attributes applied
at compile-time.)  See L<attributes> for additional details.  In particular,
however, this allows variable attributes to be useful for C<tie> interfaces,
which was a deficiency of earlier releases.  Note that the new semantics
doesn't work with the Attribute::Handlers module (as of version 0.76).

=end original

C<my EXPR : ATTRS> 構文は実行時に変数の属性を適用するようになりました。
(サブルーチンおよび C<our> 変数はいまだコンパイル時に属性を適用させます)
より詳しくは L<attributes> を参照してください。しかし、これは特にC<tie>
インターフェースにとって変数の属性を役立たせます。それは初期のリリースでは
不足していたことです。新しいセマンティクスは Attribute::Handlers モジュール
(のバージョン 0.76)では動かないことに注意してください。

=head2 Socket Extension Dynamic in VMS

(VMS での動的 Socket 拡張)

=begin original

The Socket extension is now dynamically loaded instead of being
statically built in.  This may or may not be a problem with ancient
TCP/IP stacks of VMS: we do not know since we weren't able to test
Perl in such configurations.

=end original

Socket 拡張は静的に組み込まれているのではなく動的にロードされるように
なりました。これは古い VMS の TCP/IP スタックでは問題になるかもしれませんし
ならないかもしれません。
Perl をそのような環境でテストすることができなかったので分からないのです。

=head2 IEEE-format Floating Point Default on OpenVMS Alpha

(OpenVMS Alpha での IEEE フォーマットの浮動小数点)

=begin original

Perl now uses IEEE format (T_FLOAT) as the default internal floating
point format on OpenVMS Alpha, potentially breaking binary compatibility
with external libraries or existing data.  G_FLOAT is still available as
a configuration option.  The default on VAX (D_FLOAT) has not changed.

=end original

Perl は IEEE フォーマット(T_FLOAT)を OpenVMS Alpha でのデフォルトの内部の
浮動小数点フォーマットとして使うようになりました。これは潜在的に外部
ライブラリや既存データのバイナリ互換性を破壊します。G_FLOAT はいまだ設定の
オプションとして利用可能です。VAX (D_FLOAT)でのデフォルトは
変更されていません。

=head2 New Unicode Semantics (no more C<use utf8>, almost)

(新しい Unicode 機能 (もはやほとんどの場合 C<use utf8> は不要))

=begin original

Previously in Perl 5.6 to use Unicode one would say "use utf8" and
then the operations (like string concatenation) were Unicode-aware
in that lexical scope.

=end original

以前の Perl 5.6 では Unicode を使うために "use utf8" とすると、
(文字列連結のような)操作はそのレキシカルスコープ内では
Unicode 対応となりました。

=begin original

This was found to be an inconvenient interface, and in Perl 5.8 the
Unicode model has completely changed: now the "Unicodeness" is bound
to the data itself, and for most of the time "use utf8" is not needed
at all.  The only remaining use of "use utf8" is when the Perl script
itself has been written in the UTF-8 encoding of Unicode.  (UTF-8 has
not been made the default since there are many Perl scripts out there
that are using various national eight-bit character sets, which would
be illegal in UTF-8.)

=end original

これは不便なインターフェースであることがわかりましたので、
Perl 5.8 では Unicode モデルは完全に変更されました:
"Unicodeness" はデータ自体に結び付けられ、"use utf8" はほとんどの場合に
全く不要になりました。
残った唯一の"use utf8"の使い道は、Perl スクリプト自身が Unicode の
UTF-8 エンコーディングで書かれているときです。
(すでに多くの Perl スクリプトがさまざまな 8 ビット文字セットを使って
書かれており、これらは UTF-8 では不正となるので、UTF-8 はデフォルトには
なっていません。)

=begin original

See L<perluniintro> for the explanation of the current model,
and L<utf8> for the current use of the utf8 pragma.

=end original

現在のモデルについては L<perluniintro> を、
現在の utf8 プラグマの使い方については L<utf8> を参照してください。

=head2 New Unicode Properties

(新しいUnicodeプロパティ)

=begin original

Unicode I<scripts> are now supported. Scripts are similar to (and superior
to) Unicode I<blocks>. The difference between scripts and blocks is that
scripts are the glyphs used by a language or a group of languages, while
the blocks are more artificial groupings of (mostly) 256 characters based
on the Unicode numbering.

=end original

Unicode I<スクリプト> が新たにサポートされました。スクリプトというのは、
Unicode I<ブロック> のようなものですが、それより上位のものです。
スクリプトとブロックの違いは、スクリプトが単一の言語または一群の言語により
使用されるグリフであるのに対して、ブロックというのは Unicode の番号付けに
基づく(高々)256 文字の人工的なグルーピングでしかないということです。

=begin original

In general, scripts are more inclusive, but not universally so. For
example, while the script C<Latin> includes all the Latin characters and
their various diacritic-adorned versions, it does not include the various
punctuation or digits (since they are not solely C<Latin>).

=end original

一般的にはスクリプトのほうがより多くの文字を含みますが、あらゆる場合に
そうである訳ではありません。例えば、C<Latin>スクリプトは全ての Latin
文字といろいろな発音記号付きの文字を含みますが、いろいろな句読点や数字は
含みません(それらはC<Latin>だけに属するわけではないので)。

=begin original

A number of other properties are now supported, including C<\p{L&}>,
C<\p{Any}> C<\p{Assigned}>, C<\p{Unassigned}>, C<\p{Blank}> [561] and
C<\p{SpacePerl}> [561] (along with their C<\P{...}> versions, of course).
See L<perlunicode> for details, and more additions.

=end original

他にもいくつかのプロパティが、新たにサポートされました。C<\p{L&}>,
C<\p{Any}> C<\p{Assigned}>, C<\p{Unassigned}>, C<\p{Blank}> [561],
C<\p{SpacePerl}> [561] などです (もちろん C<\P{...}> も)。
詳しくは、L<perlunicode> を参照してください。

=begin original

The C<In> or C<Is> prefix to names used with the C<\p{...}> and C<\P{...}>
are now almost always optional. The only exception is that a C<In> prefix
is required to signify a Unicode block when a block name conflicts with a
script name. For example, C<\p{Tibetan}> refers to the script, while
C<\p{InTibetan}> refers to the block. When there is no name conflict, you
can omit the C<In> from the block name (e.g. C<\p{BraillePatterns}>), but
to be safe, it's probably best to always use the C<In>).

=end original

C<\p{...}> や C<\P{...}> と共に使われる名前に付けるプレフィックス
C<In> と C<Is> は、ほとんどの場合省略できることになりました。唯一の例外は、
ブロック名がスクリプト名と競合する場合です。その場合には、
Unicode ブロック名にプレフィックス C<In> を付けて区別しなければなりません。
例えば、C<\p{Tibetan}>はスクリプトを参照しますが、
C<\p{InTibetan}>はブロックを参照します。名前の競合がない場合には、
ブロック名のC<In>は省略できます(例：C<\p{BraillePatterns}>)が、安全のためには、
いつもC<In>を使うのがたぶん良いでしょう。

=head2 REF(...) Instead Of SCALAR(...)

(SCALAR(...)のかわりにREF(...))

=begin original

A reference to a reference now stringifies as "REF(0x81485ec)" instead
of "SCALAR(0x81485ec)" in order to be more consistent with the return
value of ref().

=end original

リファレンスへのリファレンスは、ref() の返り値をより一貫したものにするために、
"SCALAR(0x81485ec)"のかわりに"REF(0x81485ec)"のように文字列化
されるようになりました。

=head2 pack/unpack D/F recycled

(pack/unpack の D/F を再利用)

=begin original

The undocumented pack/unpack template letters D/F have been recycled
for better use: now they stand for long double (if supported by the
platform) and NV (Perl internal floating point type).  (They used
to be aliases for d/f, but you never knew that.)

=end original

文書化されていなかった pack/unpack のテンプレートの文字 D/F はよりよい用途の
ために再利用されました。現在これらはlong double(もしプラットフォームによって
サポートされていれば)と NV (Perl の内部浮動小数点型)を意味します。
(これらは以前は d/f の別名でしたが、皆さんは知らなかったでしょう。)

=head2 glob() now returns filenames in alphabetical order

=begin original

The list of filenames from glob() (or <...>) is now by default sorted
alphabetically to be csh-compliant (which is what happened before
in most UNIX platforms).  (bsd_glob() does still sort platform
natively, ASCII or EBCDIC, unless GLOB_ALPHASORT is specified.) [561]

=end original

glob() (あるいは<...>)から得られるファイル名のリストは、csh に従って
デフォルトでアルファベット順にソートされるようになりました(これは大部分の
UNIX プラットフォームで以前に起こったことです)。(bsd_glob() は、
GLOB_ALPHASORT が指定されなければ、いまだプラットフォーム依存で ASCII 順
または EBCDIC 順でソートします。) [561]

=head2 Deprecations

(非推奨事項)

=over 4

=item *

=begin original

The semantics of bless(REF, REF) were unclear and until someone proves
it to make some sense, it is forbidden.

=end original

bless(REF, REF) の意味は不明瞭なので、誰かがなんらかの意味をなすことを
証明するまでは禁止とします。

=item *

=begin original

The obsolete chat2 library that should never have been allowed
to escape the laboratory has been decommissioned.

=end original

実験室から逃れることが決して許されなかったはずの廃れた chat2 ライブラリが
任務を解かれました。

=item *

=begin original

Using chdir("") or chdir(undef) instead of explicit chdir() is
doubtful.  A failure (think chdir(some_function()) can lead into
unintended chdir() to the home directory, therefore this behaviour
is deprecated.

=end original

明示的な chdir() の代わりに chdir("") や chdir(undef) を使うことには
疑問があります。失敗(chdir(some_function()) を考えてみてください)した
場合に chdir() が図らずもホームディレクトリに
移動してしまうかもしれませんので、この振る舞いは非推奨となりました。

=item *

=begin original

The builtin dump() function has probably outlived most of its
usefulness.  The core-dumping functionality will remain in future
available as an explicit call to C<CORE::dump()>, but in future
releases the behaviour of an unqualified C<dump()> call may change.

=end original

組み込み関数 dump() は時代の流れにしたがって大半の有用性が失われて
来ました。コアダンプの関数は明示的に C<CORE::dump()> を呼び出すことが
可能になっても残ることでしょうが、将来のリリースでは無条件に C<dump()> を
呼び出した際、そのふるまいが変更されるかも知れません。

=item *

=begin original

The very dusty examples in the eg/ directory have been removed.
Suggestions for new shiny examples welcome but the main issue is that
the examples need to be documented, tested and (most importantly)
maintained.

=end original

eg/ ディレクトリに入っているつまらない例は削除されました。おもしろい例を
提案することは歓迎しますが、主となる問題は例はドキュメントが書かれること、
及びテストされることと(一番大切なことですが)保守が必要だと言うことです。

=item *

=begin original

The (bogus) escape sequences \8 and \9 now give an optional warning
("Unrecognized escape passed through").  There is no need to \-escape
any C<\w> character.

=end original

(偽の)エスケープシーケンス \8 と \9 はオプショナルの警告("Unrecognized
escape passed through") を与えるようになりました。どの C<\w> 文字も
\-escape する必要はありません。

=item *

=begin original

The *glob{FILEHANDLE} is deprecated, use *glob{IO} instead.

=end original

*glob{FILEHANDLE} は非推奨となりました。
代わりに *glob{IO} を使ってください。

=item *

=begin original

The C<package;> syntax (C<package> without an argument) has been
deprecated.  Its semantics were never that clear and its
implementation even less so.  If you have used that feature to
disallow all but fully qualified variables, C<use strict;> instead.

=end original

C<package;> 構文(引数のない C<package>)は非推奨になりました。
そのセマンティクスは明瞭でなく、その実装はさらに明瞭ではありませんでした。
もしこの特徴を完全修飾変数名でないものを全て許さないために
使っているのであれば、かわりに C<use strict;> を使ってください。

=item *

=begin original

The unimplemented POSIX regex features [[.cc.]] and [[=c=]] are still
recognised but now cause fatal errors.  The previous behaviour of
ignoring them by default and warning if requested was unacceptable
since it, in a way, falsely promised that the features could be used.

=end original

実装されていない POSIX 正規表現の機能[[.cc.]]と[[=c=]]は、いまだ
認識されますが致命的エラーを出すようになりました。デフォルトで無視し
要求があれば警告を出すという以前の動作は、ある意味ではその機能が
使えていたと誤って思わせていたため、歓迎しがたいものでした。

=item *

=begin original

In future releases, non-PerlIO aware XS modules may become completely
unsupported.  Since PerlIO is a drop-in replacement for stdio at the
source code level, this shouldn't be that drastic a change.

=end original

PerlIO を意識しない XS モジュールは、将来リリースされる Perl で完全にサポート
されなくなる可能性があります。PerlIO はソースコードレベルでは stdio の
ちょっとした置き換えでしかないので、これはそれほど大変な変更には
ならないはずです。

=item *

=begin original

Previous versions of perl and some readings of some sections of Camel
III implied that the C<:raw> "discipline" was the inverse of C<:crlf>.
Turning off "clrfness" is no longer enough to make a stream truly
binary. So the PerlIO C<:raw> layer (or "discipline", to use the Camel
book's older terminology) is now formally defined as being equivalent
to binmode(FH) - which is in turn defined as doing whatever is
necessary to pass each byte as-is without any translation.  In
particular binmode(FH) - and hence C<:raw> - will now turn off both
CRLF and UTF-8 translation and remove other layers (e.g. :encoding())
which would modify byte stream.

=end original

以前のバージョンの perl や、ラクダ本 III では
C<:raw> "discipline" は C<:crlf> の逆であることを暗示しています。
もはや完全にバイナリにするには "crlf 化" をオフにするだけでは不十分です。
PerlIO C<:raw> 層 (あるいはラクダ本の古い用語では "discipline") が
公式に binmode(FH) と等価となりました - これは全てのバイトを
一切の変換なしにそのまま通過させるために必要なことをするものとして
定義されました。
特に、binmode(FH) - そして C<:raw> も - はバイトストリームを
変更する CRLF と UTF-8 変換やその他の層 (つまり :encoding()) を
オフにします。

=item *

=begin original

The current user-visible implementation of pseudo-hashes (the weird
use of the first array element) is deprecated starting from Perl 5.8.0
and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather
ugly, but the current implementation slows down normal array and hash
use quite noticeably. The C<fields> pragma interface will remain
available.  The I<restricted hashes> interface is expected to
be the replacement interface (see L<Hash::Util>).  If your existing
programs depends on the underlying implementation, consider using
L<Class::PseudoHash> from CPAN.

=end original

現在の pseudo-hashes のユーザに見える実装(配列の先頭要素のおかしな使い方)は、
Perl 5.8.0 から非推奨になり、Perl 5.10.0 で取り除かれ、その機能は違った
形で実装されるでしょう。現在のインターフェースはかなり醜いだけでなく、
現在の実装では通常の配列やハッシュの使用がかなり目立って遅くなって
しまいます。C<fields> プラグマのインターフェースは利用可能なまま残る
でしょう。I<restricted hashes> のインターフェースは代用のインターフェース
(L<Hash::Util> を参照してください)になると考えられています。もし既存の
プログラムが根底にある実装に依存しているのであれば、CPAN の
L<Class::PseudoHash> を使うことを考慮してください。

=item *

=begin original

The syntaxes C<< @a->[...] >> and  C<< %h->{...} >> have now been deprecated.

=end original

構文 C<< @a->[...] >> と C<< %h->{...} >> は非推奨になりました。

=item *

=begin original

After years of trying, suidperl is considered to be too complex to
ever be considered truly secure.  The suidperl functionality is likely
to be removed in a future release.

=end original

数年の試みの後、suidperl は本当に安全であると見なすには複雑になりすぎて
いると考えられています。
おそらく suidperl の機能は将来のリリースで取り除かれるでしょう。

=item *

=begin original

The 5.005 threads model (module C<Thread>) is deprecated and expected
to be removed in Perl 5.10.  Multithreaded code should be migrated to
the new ithreads model (see L<threads>, L<threads::shared> and
L<perlthrtut>).

=end original

5.005 のスレッドモデル(モジュール C<Thread>)は非推奨となり、Perl 5.10 で
取り除かれる予定です。マルチスレッド化されたコードは新しいiスレッドモデルに
移るべきです(L<threads>, L<threads::shared>, L<perlthrtut> を参照してください)。

=item *

=begin original

The long deprecated uppercase aliases for the string comparison
operators (EQ, NE, LT, LE, GE, GT) have now been removed.

=end original

長い間非推奨であった文字列比較演算子の大文字の別名(EQ, NE, LT, LE, GE,
GT)が取り除かれました。

=item *

=begin original

The tr///C and tr///U features have been removed and will not return;
the interface was a mistake.  Sorry about that.  For similar
functionality, see pack('U0', ...) and pack('C0', ...). [561]

=end original

tr///C と tr///U の機能が取り除かれました。もう二度と使えるようには
ならないでしょう。インターフェースが間違っていました。
これについては申し訳ありません。
同じような機能としては、pack('U0', ...)と pack('C0', ...) を
参照してください。[561]

=item *

=begin original

Earlier Perls treated "sub foo (@bar)" as equivalent to "sub foo (@)".
The prototypes are now checked better at compile-time for invalid
syntax.  An optional warning is generated ("Illegal character in
prototype...")  but this may be upgraded to a fatal error in a future
release.

=end original

以前の Perl は"sub foo (@bar)"を"sub foo (@)"と同等に扱っていました。
プロトタイプは不正な構文についてコンパイル時によりよくチェックするように
なりました。オプショナルの警告("Illegal character in prototype...")が
出されますが、将来のリリースでは致命的エラーに上がるかもしれません。

=item *

=begin original

The C<exec LIST> and C<system LIST> operations now produce warnings on
tainted data and in some future release they will produce fatal errors.

=end original

C<exec LIST> と C<system LIST> の操作は、将来のリリースでは汚染された
データに対して致命的エラーを出すようになるでしょう。

=item *

=begin original

The existing behaviour when localising tied arrays and hashes is wrong,
and will be changed in a future release, so do not rely on the existing
behaviour. See L<"Localising Tied Arrays and Hashes Is Broken">.

=end original

tie された配列やハッシュを local 化するときの現在の動作は間違っており、
将来のリリースにおいて変更されるでしょう。従って現在の動作を
頼らないでください。
L<"Localising Tied Arrays and Hashes Is Broken"> を参照してください。

=back

=head1 Core Enhancements

(コアの拡張)

=head2 Unicode Overhaul

(Unicode のオーバーホール)

=begin original

Unicode in general should be now much more usable than in Perl 5.6.0
(or even in 5.6.1).  Unicode can be used in hash keys, Unicode in
regular expressions should work now, Unicode in tr/// should work now,
Unicode in I/O should work now.  See L<perluniintro> for introduction
and L<perlunicode> for details.

=end original

Unicode は全体的に Perl 5.6.0(あるいは 5.6.1 さえ)よりもさらに使えるように
なったはずです。Unicode はハッシュキー中に使われることが可能で、正規表現での
Unicode、tr/// での Unicode、I/O での Unicode は動作するようになったはずです。
入門については L<perluniintro> を、詳細については L<perluniintro> を
参照してください。

=over 4

=item *

=begin original

The Unicode Character Database coming with Perl has been upgraded
to Unicode 3.2.0.  For more information, see http://www.unicode.org/ .
[561+] (5.6.1 has UCD 3.0.1.)

=end original

Perl に付属する Unicode Character Database は Unicode 3.2.0 に
アップグレードされました。
さらなる情報が欲しい場合は http://www.unicode.org/ を参照してください。
[561+] (5.6.1 では UCD 3.0.1 でした。)

=item *

=begin original

For developers interested in enhancing Perl's Unicode capabilities:
almost all the UCD files are included with the Perl distribution in
the F<lib/unicore> subdirectory.  The most notable omission, for space
considerations, is the Unihan database.

=end original

Unicode の可用性を拡張することに興味がある開発者のために:
全ての UCD ファイルの大部分が Perl のディストリビューションのサブディレクトリ
F<lib/unicore> に含まれています。スペースの事情で省略してしまったものの中で
もっとも特筆すべきは Unihan database です。

=item *

=begin original

The properties \p{Blank} and \p{SpacePerl} have been added. "Blank" is like
C isblank(), that is, it contains only "horizontal whitespace" (the space
character is, the newline isn't), and the "SpacePerl" is the Unicode
equivalent of C<\s> (\p{Space} isn't, since that includes the vertical
tabulator character, whereas C<\s> doesn't.)

=end original

プロパティー \p{Blank} と \p{SpacePerl} が追加されています。
"Blank"は C の isblank() に似ていますが、"horizontal whitespace"
(スペース文字であって、改行ではない)で、"SpacePerl" は C<\s> に相当する
Unicode です(垂直タブ文字が含まれているので \p{Space} ではありません、
一方 C<\s> では垂直タブが含まれていないのです。)

=begin original

See "New Unicode Properties" earlier in this document for additional
information on changes with Unicode properties.

=end original

先にこのドキュメントの Unicode プロパティーに関する変更点の追加情報にある
"新しい Unicode プロパティー"を参照してください。

=back

=head2 PerlIO is Now The Default

(PerlIOが標準に)

=over 4

=item *

=begin original

IO is now by default done via PerlIO rather than system's "stdio".
PerlIO allows "layers" to be "pushed" onto a file handle to alter the
handle's behaviour.  Layers can be specified at open time via 3-arg
form of open:

=end original

システムの"stdio"ではなく PerlIO が IO のデフォルトになりました。
PerlIO は"層"によってファイルハンドルの振る舞いを
"強制"することを可能にしました。
層は 3 つの引数の形式で open する時に指定できます:

   open($fh,'>:crlf :utf8', $path) || ...

=begin original

or on already opened handles via extended C<binmode>:

=end original

もしくは拡張された C<binmode> を使い、
既に開かれているハンドルに層を指定できます。

   binmode($fh,':encoding(iso-8859-7)');

=begin original

The built-in layers are: unix (low level read/write), stdio (as in
previous Perls), perlio (re-implementation of stdio buffering in a
portable manner), crlf (does CRLF <=> "\n" translation as on Win32,
but available on any platform).  A mmap layer may be available if
platform supports it (mostly UNIXes).

=end original

内蔵してる層は、unix(低レベルでの read/write)、
stdio (以前の Perl と同じ)、perlio (移植性のある形でにバッファ付き stdio を
再実装したもの)、crlf (Win32 での CRLF <=> "\n" 変換。
他のプラットフォームでも利用できる)があります。
(大部分の UNIX など)プラットフォームがサポートしていれば
mmap 層が使用できます。

=begin original

Layers to be applied by default may be specified via the 'open' pragma.

=end original

デフォルトで適用される層は 'open'プラグマで指定できます。

=begin original

See L</"Installation and Configuration Improvements"> for the effects
of PerlIO on your architecture name.

=end original

アーキテクチャごとの PerlIO に関する影響について
L</"Installation and Configuration Improvements"> を参照してください。

=item *

=begin original

If your platform supports fork(), you can use the list form of C<open>
for pipes.  For example:

=end original

もしプラットフォームが fork() をサポートしていれば、パイプに対してリスト
形式の C<open> を使うことができます。例えば:

    open KID_PS, "-|", "ps", "aux" or die $!;

=begin original

forks the ps(1) command (without spawning a shell, as there are more
than three arguments to open()), and reads its standard output via the
C<KID_PS> filehandle.  See L<perlipc>.

=end original

これは ps(1) コマンドを(open() に対して引数が 3 つよりも多いので、シェルを
起動することなしに)fork し、その標準出力を C<KID_PS> ファイルハンドルを
通して読み出します。L<perlipc> を参照してください。

=item *

=begin original

File handles can be marked as accepting Perl's internal encoding of Unicode
(UTF-8 or UTF-EBCDIC depending on platform) by a pseudo layer ":utf8" :

=end original

擬似層 ":utf8" を使うことで、 Unicode の Perl の 内部エンコーディング
(プラットフォームによって UTF-8 か UTF-EBCDIC) を
受け入れること示す印をファイルハンドルにつけることができます:

   open($fh,">:utf8","Uni.txt");

=begin original

Note for EBCDIC users: the pseudo layer ":utf8" is erroneously named
for you since it's not UTF-8 what you will be getting but instead
UTF-EBCDIC.  See L<perlunicode>, L<utf8>, and
http://www.unicode.org/unicode/reports/tr16/ for more information.
In future releases this naming may change.  See L<perluniintro>
for more information about UTF-8.

=end original

EBCDIC ユーザーへの注意: あなたが受け取るのは UTF-8 ではなく
UTF-EBCDIC なので、擬似層の名前 ":utf8" というのは間違った命名です。
さらなる情報については L<perlunicode>, L<utf8>,
http://www.unicode.org/unicode/reports/tr16/ を参照してください。
将来のリリースではこの名前は変わるかもしれません。
UTF-8 に関するさらなる情報については L<perluniintro> を参照してください。

=item *

=begin original

If your environment variables (LC_ALL, LC_CTYPE, LANG) look like you
want to use UTF-8 (any of the the variables match C</utf-?8/i>), your
STDIN, STDOUT, STDERR handles and the default open layer (see L<open>)
are marked as UTF-8.  (This feature, like other new features that
combine Unicode and I/O, work only if you are using PerlIO, but that's
the default.)

=end original

もし環境変数(LC_ALL, LC_CTYPE, LANG)が UTF-8 を使いたがっているように
見える(それらの変数のいずれかが C</utf-?8/i> にマッチする)ならば、
ハンドル STDIN, STDOUT, STDERR およびデフォルトの open 層(L<open> を
参照してください)は UTF-8 にマークされます。(この機能は、Unicode と I/O を
結びつける他の新機能と同じように、PerlIO を使っている場合にのみ働きますが、
しかしそれがデフォルトです。)

=begin original

Note that after this Perl really does assume that everything is UTF-8:
for example if some input handle is not, Perl will probably very soon
complain about the input data like this "Malformed UTF-8 ..." since
any old eight-bit data is not legal UTF-8.

=end original

この Perl 以降は本当に全てを UTF-8 だと仮定することに注意してください。
例えば、もしそうでない入力ハンドルがあれば、Perl はおそらくすぐに
入力データについて"Malformed UTF-8 ..."というように不平を言い出します。
なぜなら以前の 8 ビットのデータは全て UTF-8 を満たしていないからです。

=begin original

Note for code authors: if you want to enable your users to use UTF-8
as their default encoding  but in your code still have eight-bit I/O streams
(such as images or zip files), you need to explicitly open() or binmode()
with C<:bytes> (see L<perlfunc/open> and L<perlfunc/binmode>), or you
can just use C<binmode(FH)> (nice for pre-5.8.0 backward compatibility).

=end original

コード作者に対する注意:　ユーザが UTF-8 をデフォルトのエンコーディングと
して使えるようにしたいが、コードにはいまだ(例えば画像や zip ファイルのような)
8 ビットの I/O ストリームがある場合、open() や binmode() に対して明示的に
C<:bytes> (L<perlfunc/open> と L<perlfunc/binmode> を参照してください)を
つけるか、あるいは単に C<binmode(FH)> を使うことができます (5.8.0 以前の
後方互換性にとって良いでしょう)。

=item *

=begin original

File handles can translate character encodings from/to Perl's internal
Unicode form on read/write via the ":encoding()" layer.

=end original

ファイルハンドルは読み書きの際":encoding()"層経由で Perl の内部的な
Unicode 形式に、あるいは内部的な Unicode 形式から変換することが可能です。

=item *

=begin original

File handles can be opened to "in memory" files held in Perl scalars via:

=end original

ファイルハンドルを Perl のスカラーに保持されている"メモリ内"ファイルに
対して開くことができます。

   open($fh,'>', \$variable) || ...

=item *

=begin original

Anonymous temporary files are available without need to
'use FileHandle' or other module via

=end original

無名テンポラリファイルが 'use FileHandle' や他のモジュールを使う必要なしに
利用可能です。

   open($fh,"+>", undef) || ...

=begin original

That is a literal undef, not an undefined value.

=end original

これは正確に undef で、未定義の値ではありません。

=back

=head2 ithreads

(iスレッド)

=begin original

The new interpreter threads ("ithreads" for short) implementation of
multithreading, by Arthur Bergman, replaces the old "5.005 threads"
implementation.  In the ithreads model any data sharing between
threads must be explicit, as opposed to the model where data sharing
was implicit.  See L<threads> and L<threads::shared>, and
L<perlthrtut>.

=end original

Arthur Bergman による、マルチスレッドのための
新しいインタプリタスレッド(略して "iスレッド") 実装が
古い "5.005 スレッド" から置き換えられました。
iスレッドモデルではスレッド間で共有する全てのデータは明示的です。
L<threads>, L<threads::shared>, L<perlthrtut> を参照してください。

=begin original

As a part of the ithreads implementation Perl will also use
any necessary and detectable reentrant libc interfaces.

=end original

iスレッド実装の一部として、Perl は必要で検出可能な
再入可能 libc インターフェースも使用します。

=head2 Restricted Hashes

(制限ハッシュ)

=begin original

A restricted hash is restricted to a certain set of keys, no keys
outside the set can be added.  Also individual keys can be restricted
so that the key cannot be deleted and the value cannot be changed.
No new syntax is involved: the Hash::Util module is the interface.

=end original

制限ハッシュは使用するキーをある集合に制限し、
集合に含まれないキーを追加をすることを防ぎます。
さらにそれぞれのキーに対して削除や値の変更を制限することができます。
Hash::Util モジュールがそのインターフェイスになり、
新しい構文は複雑にはなりません。

=head2 Safe Signals

(安全なシグナル)

=begin original

Perl used to be fragile in that signals arriving at inopportune moments
could corrupt Perl's internal state.  Now Perl postpones handling of
signals until it's safe (between opcodes).

=end original

シグナルが都合の悪い時にやって来ると Perl の内部状態が改変されてしまうと
いう点で以前の Perl は壊れやすいものでした。しかし現在の Perl は安全になるまで
(between opcodes)シグナルの扱いを引き延ばすようになりました。

=begin original

This change may have surprising side effects because signals no longer
interrupt Perl instantly.  Perl will now first finish whatever it was
doing, like finishing an internal operation (like sort()) or an
external operation (like an I/O operation), and only then look at any
arrived signals (and before starting the next operation).  No more corrupt
internal state since the current operation is always finished first,
but the signal may take more time to get heard.  Note that breaking
out from potentially blocking operations should still work, though.

=end original

この変更は、シグナルが Perl をただちに中断させなくなったため、驚くべき
副作用を持っているかもしれません。現在の Perl は、最初に例えば(sort() のような)
内部操作や(I/O 操作のような)外部操作を 1 つ完了することによって今行っている
ことを終わらせ、その後にのみ(そして次の操作を開始する前に)受け取った
シグナルを調べます。現在の操作が必ず初めに終わらせられるので内部状態の
改変は無くなりましたが、シグナルが効果を発揮するためにはより多くの時間が
かかるかもしれません。しかし potentially blocking operations からの脱出は
今でも働くはずです。

=head2 Understanding of Numbers

(数字の解釈)

=begin original

In general a lot of fixing has happened in the area of Perl's
understanding of numbers, both integer and floating point.  Since in
many systems the standard number parsing functions like C<strtoul()>
and C<atof()> seem to have bugs, Perl tries to work around their
deficiencies.  This results hopefully in more accurate numbers.

=end original

Perl の数字(整数及び浮動小数点の両方)の解釈の方面に関して全体的に多くの
修正がなされました。多くのシステムにおいて C<strtoul()> や C<atof()> のような
数字をパースする標準の関数がバグを抱えているように見えるので、Perl は
それらの欠陥に対処するように努めます。
上手くいけば数字がより正確になるでしょう。

=begin original

Perl now tries internally to use integer values in numeric conversions
and basic arithmetics (+ - * /) if the arguments are integers, and
tries also to keep the results stored internally as integers.
This change leads to often slightly faster and always less lossy
arithmetics. (Previously Perl always preferred floating point numbers
in its math.)

=end original

Perl は、数の変換や基本計算(+ - * /)において、もし引数が整数ならば内部的に
整数値を使うように努め、さらに、内部的に整数として記憶された結果を
保持するように努めるようになりました。この変更により、わずかに速くなる
ことがよく起こり、常により桁落ちの少ない計算方法になります。
(Perl は以前は常に計算時には浮動小数点数を優先していました。)

=head2 Arrays now always interpolate into double-quoted strings [561]

(配列は二重引用符で囲まれた文字列において常に展開されるように [561])

=begin original

In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was

=end original

二重引用符で囲まれた文字列において、どんなことが起こるとしても、配列は
展開されるようになりました。Perl 5 の初期のバージョンでは、文字列が
コンパイルされる以前にその配列が現れていればその文字列にその配列を展開し、
もし現れていなければ致命的なコンパイル時エラーを発生させるという動作を
していました。バージョン 5.000 から 5.003 では、そのエラーは

        Literal @example now requires backslash

=begin original

In versions 5.004_01 through 5.6.0, the error was

=end original

(リテラル @example はバックスラッシュが必要になりました) でした。
バージョン 5.004_01 から 5.6.0 では、そのエラーは

        In string, @example now must be written as \@example

=begin original

The idea here was to get people into the habit of writing
C<"fred\@example.com"> when they wanted a literal C<@> sign, just as
they have always written C<"Give me back my \$5"> when they wanted a
literal C<$> sign.

=end original

(文字列内では、@example は \@example と書かなければならなくなりました) で
した。これは、リテラルの記号 C<$> が欲しければ C<"Give me back my \$5"> と
必ず書いているように、リテラルの記号 C<@> が欲しければ
C<"fred\@example.com"> と書く癖を人々に身に付けさせるためのものでした。

=begin original

Starting with 5.6.1, when Perl now sees an C<@> sign in a
double-quoted string, it I<always> attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:

=end original

5.6.1 からは、C<@> 記号が二重引用符で囲まれた文字列内にあると、その配列が
すでに使われているか宣言されているかどうかに関係なく、その配列を
展開することを I<必ず> 試みます。致命的エラーはオプショナルの警告に
格下げされました:

        Possible unintended interpolation of @example in string

=begin original

This warns you that C<"fred@example.com"> is going to turn into
C<fred.com> if you don't backslash the C<@>.
See http://www.plover.com/~mjd/perl/at-error.html for more details
about the history here.

=end original

(意図しない可能性のある文字列内での @example の展開)
これは、もし C<@> にバックスラッシュを付けなければ C<"fred@example.com"> は
C<fred.com> に変わるだろうという警告です。この経緯についての詳細は
http://www.plover.com/~mjd/perl/at-error.html を参照してください。

=head2 Miscellaneous Changes

(その他の変更点)

=over 4

=item *

=begin original

AUTOLOAD is now lvaluable, meaning that you can add the :lvalue attribute
to AUTOLOAD subroutines and you can assign to the AUTOLOAD return value.

=end original

AUTOLOAD は左辺値になれるようになりました。
つまり AUTOLOAD サブルーチンに :lvalue 属性を追加したり、
AUTOLOAD 返り値を割り当てたり出来るようになりました。

=item *

=begin original

The $Config{byteorder} (and corresponding BYTEORDER in config.h) was
previously wrong in platforms if sizeof(long) was 4, but sizeof(IV)
was 8.  The byteorder was only sizeof(long) bytes long (1234 or 4321),
but now it is correctly sizeof(IV) bytes long, (12345678 or 87654321).
(This problem didn't affect Windows platforms.)

=end original

$Config{byteorder}(と config.h における対応する BYTEORDER)は
sizeof(long) が 4 で sizeof(IV) が 8 のプラットフォームでは
間違っていました。バイトオーダーは sizeof(long) バイト長だけでした
(1234 か 4321)が、正しく sizeof(IV) バイト長になりました
(112345678 か 87654321)。
(これは Windows プラットフォームには影響を与えません。)

=begin original

Also, $Config{byteorder} is now computed dynamically--this is more
robust with "fat binaries" where an executable image contains binaries
for more than one binary platform, and when cross-compiling.

=end original

また、$Config{byteorder} は動的に算出されるようになりました--
これにより、複数のバイナリプラットフォームを含む実行イメージである
"fat binaries"やクロスコンパイル時により頑強になりました。

=item *

=begin original 

C<perl -d:Module=arg,arg,arg> now works (previously one couldn't pass
in multiple arguments.)

=end original

C<perl -d:Module=arg,arg,arg> が使用可能になりました。
(以前は複数の引数を渡すことができませんでした。)

=item *

=begin original

C<do> followed by a bareword now ensures that this bareword isn't
a keyword (to avoid a bug where C<do q(foo.pl)> tried to call a
subroutine called C<q>).  This means that for example instead of
C<do format()> you must write C<do &format()>.

=end original

C<do> の後に裸の単語が続く場合、この単語はキーワードではないことが
保証されるようになりました(これは C<do q(foo.pl)> が C<q> という
名前のサブルーチンを呼び出そうとするバグを防ぐためです)。
つまり、C<do format()> ではなく C<do &format()> と書かなければならない
ことを意味します。

=item *

=begin original

The builtin dump() now gives an optional warning
C<dump() better written as CORE::dump()>,
meaning that by default C<dump(...)> is resolved as the builtin
dump() which dumps core and aborts, not as (possibly) user-defined
C<sub dump>.  To call the latter, qualify the call as C<&dump(...)>.
(The whole dump() feature is to considered deprecated, and possibly
removed/changed in future releases.)

=end original

組み込みの dump() は現在オプショナルな警告である
C<dump() better written as　CORE::dump()>を出すようになりました。
それはデフォルトのC<dump(...)>によるものはユーザーによって
定義された(可能性のある) C<sub dump> としてではなく
core を出して中断する組み込みの dump() として解決されると言う意味です。
前者を呼び出すためには C<&dump(...)> として下さい。
(dump() という形式全体が非推奨とされていますので、将来のリリースに備えて
可能な限り消去・変更するようにして下さい。)

=item *

=begin original

chomp() and chop() are now overridable.  Note, however, that their
prototype (as given by C<prototype("CORE::chomp")> is undefined,
because it cannot be expressed and therefore one cannot really write
replacements to override these builtins.

=end original

chomp() 及び chop() はオーバーライド可能になりました。しかしながら、
プロトタイプ(C<prototype("CORE::chomp")> によって与えられるもの)が
未定義で、理由はそれを表現することは不可能で、組み込まれているものを
オーバーライドする以外の方法が本当に無いからだと言うことに注意して下さい。

=item *

=begin original

END blocks are now run even if you exit/die in a BEGIN block.
Internally, the execution of END blocks is now controlled by
PL_exit_flags & PERL_EXIT_DESTRUCT_END. This enables the new
behaviour for Perl embedders. This will default in 5.10. See
L<perlembed>.

=end original

END ブロックは BEGIN ブロックで exit/die しても実行されるようになりました。
内部では、END ブロックの実行は PL_exit_flags & PERL_EXIT_DESTRUCT_END で
制御されるようになりました。これによって組み込み Perl での
新しい振る舞いが有効になります。これは 5.10 ではデフォルトになる予定です。
L<perlembed> を参照してください。

=item *

=begin original

Formats now support zero-padded decimal fields.

=end original

フォーマットはゼロ埋めされた数値フィールドに対応しました。

=item *

=begin original

Although "you shouldn't do that", it was possible to write code that
depends on Perl's hashed key order (Data::Dumper does this).  The new
algorithm "One-at-a-Time" produces a different hashed key order.
More details are in L</"Performance Enhancements">.

=end original

"すべきではない"のですが、Perl のハッシュキーの順序に依存したコードを
書くことが可能でした(Data::Dumper が行っています)。
新しい"一期一会"アルゴリズムでは違ったハッシュキーの順序になります。
より詳しくは L</"Performance Enhancements"> にあります。

=item *

=begin original

lstat(FILEHANDLE) now gives a warning because the operation makes no sense.
In future releases this may become a fatal error.

=end original

lstat(FILEHANDLE) という操作は意味を成さないので警告を出すようになりました。
将来のリリースでは致命的エラーになるかもしれません。

=item *

=begin original

Spurious syntax errors generated in certain situations, when glob()
caused File::Glob to be loaded for the first time, have been fixed. [561]

=end original

glob() が最初に File::Glob をロードさせる要因となるという状況で、
誤った構文エラーが生成されることが修正されました。[561]

=item *

=begin original

Lvalue subroutines can now return C<undef> in list context.  However,
the lvalue subroutine feature still remains experimental.  [561+]

=end original

左辺値のサブルーチンがリストコンテキストで C<undef> を返すことが
出来るようになりました。しかし、左辺値サブルーチン機能は
未だ実験的です。[561+}

=item *

=begin original

A lost warning "Can't declare ... dereference in my" has been
restored (Perl had it earlier but it became lost in later releases.)

=end original

失われた警告"Can't declare ... dereference in my"が復活しています。
(初期の Perl はその警告を出しますが、その後のリリースでは失われていました。)

=item *

=begin original

A new special regular expression variable has been introduced:
C<$^N>, which contains the most-recently closed group (submatch).

=end original

新しい特別な正規表現変数が導入されました:
C<$^N> にはもっとも最近の閉じたグループ(部分マッチ)の内容が入ります。

=item *

=begin original

C<no Module;> does not produce an error even if Module does not have an
unimport() method.  This parallels the behavior of C<use> vis-a-vis
C<import>. [561]

=end original

C<no Module;> はモジュールが unimport() メソッドを持っていない際でもエラーを
発生させません。これは C<use> の振る舞いが C<import> と比較して
類似しているからです。[561]

=item *

=begin original

The numerical comparison operators return C<undef> if either operand
is a NaN.  Previously the behaviour was unspecified.

=end original

数を比較する演算子でどちらかのオペランドが NaN の場合 C<undef> を返すように
なりました。以前はその振る舞いが不定でした。

=item *

=begin original

C<our> can now have an experimental optional attribute C<unique> that
affects how global variables are shared among multiple interpreters,
see L<perlfunc/our>.

=end original

C<our> は複数のインタプリタ間でどのようにグローバル変数が共有されるかに
影響を及ぼす実験的でオプショナルな属性 C<unique> を設定可能になりました。
L<perlfunc/our> を参照してください。

=item *

=begin original

The following builtin functions are now overridable: each(), keys(),
pop(), push(), shift(), splice(), unshift(). [561]

=end original

次に挙げる組み込み関数はオーバーライド可能になりました: each(), keys(),
pop(), push(), shift(), splice(), unshift() [561]

=item *

=begin original

C<pack() / unpack()> can now group template letters with C<()> and then
apply repetition/count modifiers on the groups.

=end original

C<pack() / unpack()> はテンプレート文字を C<()> でまとめて、
グループに対して繰り返し/カウント修飾子を適用できるようになりました。

=item *

=begin original

C<pack() / unpack()> can now process the Perl internal numeric types:
IVs, UVs, NVs-- and also long doubles, if supported by the platform.
The template letters are C<j>, C<J>, C<F>, and C<D>.

=end original

C<pack() / unpack()> は Perl 内部数値タイプである IV, UV, NV を
処理できるようになりました。プラットフォームがサポートしていれば
long double も処理できます。
テンプレート文字はそれぞれ C<j>, C<J>, C<F>, C<D> です。

=item *

=begin original

C<pack('U0a*', ...)> can now be used to force a string to UTF-8.

=end original

C<pack('U0a*', ...)> は文字列を UTF-8 に強制するために使えるように
なりました。

=item *

=begin original

my __PACKAGE__ $obj now works. [561]

=end original

my __PACKAGE__ $obj が動作するようになりました。[561]

=item *

=begin original

POSIX::sleep() now returns the number of I<unslept> seconds
(as the POSIX standard says), as opposed to CORE::sleep() which
returns the number of slept seconds.

=end original

sleep した秒数を返す CORE::sleep() とは逆に、POSIX::sleep() は
(POSIX が標準でそうするように)I<sleep しなかった>秒数を返すようになりました。

=item *

=begin original

printf() and sprintf() now support parameter reordering using the
C<%\d+\$> and C<*\d+\$> syntaxes.  For example

=end original

printf() と sprintf() は C<%\d+\$> と C<*\d+\$> と言う構文を用いることによって
パラメータの並べ替えができるようになりました。例えば、

    printf "%2\$s %1\$s\n", "foo", "bar";

=begin original

will print "bar foo\n".  This feature helps in writing
internationalised software, and in general when the order
of the parameters can vary.

=end original

は"bar foo\n"を表示します。この形式は国際化されたソフトウェアを書く際の
助けとなり、一般的にはパラメータの並びを変化させることができます。

=item *

=begin original

The (\&) prototype now works properly. [561]

=end original

プロトタイプ(\&)が適切に働くようになりました。

=item *

=begin original

prototype(\[$@%&]) is now available to implicitly create references
(useful for example if you want to emulate the tie() interface).

=end original

プロトタイプ(\[$@%&])は暗黙にリファレンスを作成することが可能になりました
(tie() のインターフェースをエミュレートしたい場合に便利です)。

=item *

=begin original

A new command-line option, C<-t> is available.  It is the
little brother of C<-T>: instead of dying on taint violations,
lexical warnings are given.  B<This is only meant as a temporary
debugging aid while securing the code of old legacy applications.
This is not a substitute for -T.>

=end original

新しいコマンドラインオプションである C<-t> が使用可能になりました。
これは C<-T>の ちょっとした弟分で、汚染違反の嵐で強制終了
させる代わりにレキシカル警告を発生させます。
B<これは古いレガシーなアプリケーションのコードを安全にする間
一時的なデバッグするのを助けるものであることを意味するだけです。
-T の代わりにはなりません。>

=item *

=begin original

In other taint news, the C<exec LIST> and C<system LIST> have now been
considered too risky (think C<exec @ARGV>: it can start any program
with any arguments), and now the said forms cause a warning under
lexical warnings.  You should carefully launder the arguments to
guarantee their validity.  In future releases of Perl the forms will
become fatal errors so consider starting laundering now.

=end original

汚染に関するその他のニュースとしては、
C<exec LIST> と C<system LIST> は危険すぎると考えることに
なりました(C<exec @ARGV> を考えてみてください: あらゆるプログラムを
あらゆる引数で起動できます)。そしてレキシカル警告化では
このような形は警告を発生させます。
正当性を保証するために引数を注意深く洗浄するべきです。
将来のリリースでは Perl はこのような形式は致命的エラーとなるので、
今のうちに洗浄を検討してください。

=item *

=begin original

Tied hash interfaces are now required to have the EXISTS and DELETE
methods (either own or inherited).

=end original

tie されたハッシュのインターフェースは EXISTS と DELETE メソッドを
持っていることが要求されるようになりました(それ自身か継承される対象の
どちらかがです)。

=item *

=begin original

If tr/// is just counting characters, it doesn't attempt to
modify its target.

=end original

tr/// が単に文字を数えるだけの場合、ターゲットを変更しません。

=item *

=begin original

untie() will now call an UNTIE() hook if it exists.  See L<perltie>
for details. [561]

=end original

untie() は UNTIE() フックが存在すれば、それを呼び出すようになりました。
詳細は L<perltie> を参照してください。

=item *

=begin original

L<utime> now supports C<utime undef, undef, @files> to change the
file timestamps to the current time.

=end original

L<utime> はファイルのタイムスタンプを現在の時刻に変更するために
C<utime undef, undef, @files> をサポートするようになりました。

=item *

=begin original

The rules for allowing underscores (underbars) in numeric constants
have been relaxed and simplified: now you can have an underscore
simply B<between digits>.

=end original

定数のアンダースコア(アンダーバー)に関するのルールは緩和され
シンプルになりました: 単純に B<数字の間> であれば
アンダースコアを含んでも構いません。

=item *

=begin original

Rather than relying on C's argv[0] (which may not contain a full pathname)
where possible $^X is now set by asking the operating system.
(eg by reading F</proc/self/exe> on Linux, F</proc/curproc/file> on FreeBSD)

=end original

$^X は、C の argv[0](フルパス名が含まれていないかもしれません)に
依存するのではなく、オペレーティングシステムに問い合わせることで
設定するようになりました。
(Linux では F</proc/self/exe>、FreeBSD では F</proc/curproc/file> を
読み込みます。)

=item *

=begin original

A new variable, C<${^TAINT}>, indicates whether taint mode is enabled.

=end original

新しい変数, C<${^TAINT}>は汚染チェックモードが有効かどうかを示します。

=item *

=begin original

You can now override the readline() builtin, and this overrides also
the <FILEHANDLE> angle bracket operator.

=end original

ビルトインの readline() がオーバーライド可能になり、<FILEHANDLE>といった
角括弧の演算子も同時にオーバーライドします。

=item *

=begin original

The command-line options -s and -F are now recognized on the shebang
(#!) line.

=end original

コマンドラインオプションである -s と -F は shebang(#!) 行を認識する
ようになりました。

=item *

=begin original

Use of the C</c> match modifier without an accompanying C</g> modifier
elicits a new warning: C<Use of /c modifier is meaningless without /g>.

=end original

C</c> マッチ修飾子を C</g> を使わずに使った場合、警告を発生させます:
C<Use of /c modifier is meaningless without /g>。

=begin original

Use of C</c> in substitutions, even with C</g>, elicits
C<Use of /c modifier is meaningless in s///>.

=end original

C</c> を置換で用いた場合、C</g> と共に使っても
C<Use of /c modifier is meaningless in s///> を発生させます。

=begin original

Use of C</g> with C<split> elicits C<Use of /g modifier is meaningless
in split>.

=end original

C</g> を C<split> で使用すると
C<Use of /g modifier is meaningless in split> を発生させます。

=item *

=begin original

Support for the C<CLONE> special subroutine had been added.
With ithreads, when a new thread is created, all Perl data is cloned,
however non-Perl data cannot be cloned automatically.  In C<CLONE> you
can do whatever you need to do, like for example handle the cloning of
non-Perl data, if necessary.  C<CLONE> will be executed once for every
package that has it defined or inherited.  It will be called in the
context of the new thread, so all modifications are made in the new area.

=end original

C<CLONE> 特殊サブルーチンが追加されました。
iスレッドでは、新しいスレッドが作成されたときに Perl データが
複製されますが、非 Perl データは自動的には複製されません。
C<CLONE> で、非 Perl データの複製といった必要な処理を行うことができます。
C<CLONE> はパッケージが定義されたり継承されたりする毎に一度実行されます。
新しいスレッドのコンテキストから呼び出されるので、
全ての変更は新しいエリアで行われます。

=begin original

See L<perlmod>

=end original

L<perlmod> を参照してください。

=back

=head1 Modules and Pragmata

(モジュールとプラグマ)

=head2 New Modules and Pragmata

(新しいモジュールとプラグマ)

=over 4

=item *

=begin original

C<Attribute::Handlers>, originally by Damian Conway and now maintained
by Arthur Bergman, allows a class to define attribute handlers.

=end original

Damian Conway が作成し、現在 Arthur Bergman によって保守されている
C<Attribute::Handlers> は、属性ハンドラを定義できます。

=begin original

    package MyPack;
    use Attribute::Handlers;
    sub Wolf :ATTR(SCALAR) { print "howl!\n" }

    # later, in some package using or inheriting from MyPack...

    my MyPack $Fluffy : Wolf; # the attribute handler Wolf will be called

=end original

    package MyPack;
    use Attribute::Handlers;
    sub Wolf :ATTR(SCALAR) { print "howl!\n" }

    # その後、あるpackageでMyPackを使う、あるいは継承すると...

    my MyPack $Fluffy : Wolf; # 属性ハンドラWolfが呼び出されます

=begin original

Both variables and routines can have attribute handlers.  Handlers can
be specific to type (SCALAR, ARRAY, HASH, or CODE), or specific to the
exact compilation phase (BEGIN, CHECK, INIT, or END).
See L<Attribute::Handlers>.

=end original

変数とルーチンの両方とも属性ハンドラを持つことが可能です。ハンドラは
ある型(SCALAR, ARRAY, HASH, CODE のいずれか)に特有であるか、あるいは
まさにそのコンパイルフェーズ(BEGIN, CHECK, INIT, END のいずれかに特有である
可能性があります。L<Attribute::Handlers> を参照してください。

=item *

=begin original

C<B::Concise>, by Stephen McCamant, is a new compiler backend for
walking the Perl syntax tree, printing concise info about ops.
The output is highly customisable.  See L<B::Concise>. [561+]

=end original

Stephen McCamant による C<B::Concise> は Perl 文法ツリーを
渡り歩いて、操作に関する簡単な情報を表示するための
新しいコンパイラバックエンドです。
出力は高度にカスタム化可能です。L<B::Concise> を参照してください。[561+]

=item *

=begin original

The new bignum, bigint, and bigrat pragmas, by Tels, implement
transparent bignum support (using the Math::BigInt, Math::BigFloat,
and Math::BigRat backends).

=end original

Tels による新しい bignum, bigint, bigrat プラグマは
(the Math::BigInt, Math::BigFloat, Math::BigRat を
バックエンドで使うことによって)透過的な bignum サポートを実装しています。

=item *

=begin original

C<Class::ISA>, by Sean Burke, is a module for reporting the search
path for a class's ISA tree.  See L<Class::ISA>.

=end original

Sean Bruke による C<Class::ISA> は、クラスの ISA ツリーのサーチパスを
レポートするためのモジュールです。
L<Class::ISA> を参照してください。

=item *

=begin original

C<Cwd> now has a split personality: if possible, an XS extension is
used, (this will hopefully be faster, more secure, and more robust)
but if not possible, the familiar Perl implementation is used.

=end original

C<Cwd> は分離した性格を持つようになりました; 可能であれば XS 拡張
が使われ(これはより高速で、より安全で、より頑強であることが期待できます)、
不可能であれば、慣れ親しんだ Perl の実装が使われます。

=item *

=begin original

C<Devel::PPPort>, originally by Kenneth Albanowski and now
maintained by Paul Marquess, has been added.  It is primarily used
by C<h2xs> to enhance portability of XS modules between different
versions of Perl.  See L<Devel::PPPort>.

=end original

Kenneth Albanowski によって作成され、
現在は Paul Marquess によって保守されている
C<Devel::PPPort> が追加されました。
このモジュールは異なるバージョン間での XS モジュールにおける
移植性を向上させるために C<h2xs> によって優先的に使用されます。
L<Devel::PPPort> を参照してください。

=item *

=begin original

C<Digest>, frontend module for calculating digests (checksums), from
Gisle Aas, has been added.  See L<Digest>.

=end original

Gisle Aas による、ダイジェスト(チェックサム)を計算するための
フロントエンドのモジュールである C<Digest> が追加されました。
L<Digest> を参照してください。

=item *

=begin original

C<Digest::MD5> for calculating MD5 digests (checksums) as defined in
RFC 1321, from Gisle Aas, has been added.  See L<Digest::MD5>.

=end original

Gisle Aas による、RFC 1321 に従って MD5 ダイジェスト(チェックサム)の
算出を行う C<Digest::MD5> が追加されました。
L<Digest::MD5> を参照してください。

    use Digest::MD5 'md5_hex';

    $digest = md5_hex("Thirsty Camel");

    print $digest, "\n"; # 01d19d9d2045e005c3f1b80e8b164de1

=begin original

NOTE: the C<MD5> backward compatibility module is deliberately not
included since its further use is discouraged.

=end original

注意: 過去互換性のための C<MD5> モジュールはこの先
使われる見込みがなくなったため意図的に含まれていません。

=begin original

See also L<PerlIO::via::QuotedPrint>.

=end original

L<PerlIO::via::QuotedPrint> も参照してください。

=item *

=begin original

C<Encode>, originally by Nick Ing-Simmons and now maintained by Dan
Kogai, provides a mechanism to translate between different character
encodings.  Support for Unicode, ISO-8859-1, and ASCII are compiled in
to the module.  Several other encodings (like the rest of the
ISO-8859, CP*/Win*, Mac, KOI8-R, three variants EBCDIC, Chinese,
Japanese, and Korean encodings) are included and can be loaded at
runtime.  (For space considerations, the largest Chinese encodings
have been separated into their own CPAN module, Encode::HanExtra,
which Encode will use if available).  See L<Encode>.

=end original

Nick Ing-Simmons によって作成され、現在 Dan Kogai によって保守されている
C<Encode> は異なる文字エンコーディング間を変換する
機構を提供します。Unicode, ISO-8859-1, ASCII のサポートは
コンパイル時にモジュール内に含まれます。他のいくつかのエンコーディング
(ISO-8859, CP*/Win*, Mac, KOI8-R, 3 通りの EBCDIC, 中国語, 日本語,
そして韓国語エンコーディングのような一部のもの)は含まれており
実行時にロード可能です。(スペースを考えて、
一番大きい中国語のエンコーディングは独自の CPAN モジュールである
Encode::HanExtra として隔離されており、Encode は利用可能な
場合利用するでしょう)。L<Encode> を参照してください。

=begin original

Any encoding supported by Encode module is also available to the
":encoding()" layer if PerlIO is used.

=end original

Encode モジュールによってサポートされたいかなるエンコーディングも
PerlIO が使用されている場合":encoding()"層が使用可能です。

=item *

=begin original

C<Hash::Util> is the interface to the new I<restricted hashes>
feature.  (Implemented by Jeffrey Friedl, Nick Ing-Simmons, and
Michael Schwern.)  See L<Hash::Util>.

=end original

C<Hash::Util> は新しい I<制限ハッシュ> へのインターフェースです。
(Jeffrey Friedl, Nick Ing-Simmons, Michael Schwern によるものです。)
L<Hash::Util> を参照してください。

=item *

=begin original

C<I18N::Langinfo> can be used to query locale information.
See L<I18N::Langinfo>.

=end original

C<I18N::Langinfo> はロケール情報の問い合わせに使えます。
L<I18N::Langinfo> を参照してください。

=item *

=begin original

C<I18N::LangTags>, by Sean Burke, has functions for dealing with
RFC3066-style language tags.  See L<I18N::LangTags>.

=end original

C<I18N::LangTags> は Sean Bruke によるもので、RFC3066 スタイルの
言語タグを扱うための関数を持ちます。L<I18N::LangTags> を参照してください。

=item *

=begin original

C<ExtUtils::Constant>, by Nicholas Clark, is a new tool for extension
writers for generating XS code to import C header constants.
See L<ExtUtils::Constant>.

=end original

Nicholas Clark による C<ExtUtils::Constant> は
拡張を書く人にとっての新しいツールで、インポート C ヘッダ定数の
XS コードを生成します。
L<ExtUtils::Constant> を参照してください。

=item *

=begin original

C<Filter::Simple>, by Damian Conway, is an easy-to-use frontend to
Filter::Util::Call.  See L<Filter::Simple>.

=end original

C<Filter::Simple> は Damian Conway によるもので、フロントエンドで
Filter::Util::Call を簡単に扱えるようにしたものです。
L<Filter::Simple> を参照してください。

=begin original

    # in MyFilter.pm:

    package MyFilter;

    use Filter::Simple sub {
        while (my ($from, $to) = splice @_, 0, 2) {
                s/$from/$to/g;
        }
    };

    1;

    # in user's code:

    use MyFilter qr/red/ => 'green';

    print "red\n";   # this code is filtered, will print "green\n"
    print "bored\n"; # this code is filtered, will print "bogreen\n"

    no MyFilter;

    print "red\n";   # this code is not filtered, will print "red\n"

=end original

    # MyFilter.pm内で:

    package MyFilter;

    use Filter::Simple sub {
        while (my ($from, $to) = splice @_, 0, 2) {
                s/$from/$to/g;
        }
    };

    1;

    # ユーザーのコード内で:

    use MyFilter qr/red/ => 'green';

    print "red\n";   # このコードはフィルターがかけられ、"green\n"を出力します
    print "bored\n"; # このコードはフィルターがかけられ、"bogreen\n"を出力します

    no MyFilter;

    print "red\n";   # このコードはフィルターがかけられず、"red\n"を出力します

=item *

=begin original

C<File::Temp>, by Tim Jenness, allows one to create temporary files
and directories in an easy, portable, and secure way.  See L<File::Temp>.
[561+]

=end original

C<File::Temp> は Tim Jenness によるもので、簡単かつ移殖性があり
セキュアな方法でテンポラリファイル及びディレクトリを作ることを可能にします。
L<File::Temp> を参照してください。

=item *

=begin original

C<Filter::Util::Call>, by Paul Marquess, provides you with the
framework to write I<source filters> in Perl.  For most uses, the
frontend Filter::Simple is to be preferred.  See L<Filter::Util::Call>.

=end original

C<Filter::Util::Call> は Paul Marquess によるもので、I<source filters> を
Perl で書くためのフレームワークを提供します。大抵の場合には
フロントエンドの Filter::Simple を使う方法が好まれます。
<Filter::Util::Call> を参照してください。

=item *

=begin original

C<if>, by Ilya Zakharevich, is a new pragma for conditional inclusion
of modules.

=end original

C<if> は Ilya Zakharevich によるもので、モジュールの条件付き
インクルードを実現するための新しいプラグマです。

=item *

=begin original

L<libnet>, by Graham Barr, is a collection of perl5 modules related
to network programming.  See L<Net::FTP>, L<Net::NNTP>, L<Net::Ping>
(not part of libnet, but related), L<Net::POP3>, L<Net::SMTP>,
and L<Net::Time>.

=end original

L<libnet> は Graham Barr によるもので、ネットワークプログラミング関連の
Perl5 モジュールを集めたものです。
L<Net::FTP>, L<Net::NNTP>, L<Net::Ping>(libnet の一部では
ありませんが、関連しています), L<Net::POP3>, L<Net::SMTP> を参照してください。

=begin original

Perl installation leaves libnet unconfigured; use F<libnetcfg>
to configure it.

=end original

Perl のインストールでは libnet は設定されません;
設定するためには F<libnetcfg> を使って下さい。

=item *

=begin original

C<List::Util>, by Graham Barr, is a selection of general-utility
list subroutines, such as sum(), min(), first(), and shuffle().
See L<List::Util>.

=end original

C<List::Util> は Graham Barrによるもので、sum(), min(), first(),
shuffle() などのようなリストに関する一般的なユーティリティサブルーチンが
集まったものです。
L<List::Util> を参照してください。

=item *

=begin original

C<Locale::Constants>, C<Locale::Country>, C<Locale::Currency>
C<Locale::Language>, and L<Locale::Script>, by Neil Bowers, have
been added.  They provide the codes for various locale standards, such
as "fr" for France, "usd" for US Dollar, and "ja" for Japanese.

=end original

Neil Bowers による C<Locale::Constants>, C<Locale::Country>, C<Locale::Currency>
C<Locale::Language>, L<Locale::Script> が追加されました。
フランスは "fr"、アメリカドルは "usd"、日本は "ja" といった、
さまざまなロケール標準のコードを提供します。

    use Locale::Country;

    $country = code2country('jp');               # $country gets 'Japan'
    $code    = country2code('Norway');           # $code gets 'no'

=begin original

See L<Locale::Constants>, L<Locale::Country>, L<Locale::Currency>,
and L<Locale::Language>.

=end original

L<Locale::Constants>, L<Locale::Country>, L<Locale::Currency>,
L<Locale::Language> を参照してください。

=item *

=begin original

C<Locale::Maketext>, by Sean Burke, is a localization framework.  See
L<Locale::Maketext>, and L<Locale::Maketext::TPJ13>.  The latter is an
article about software localization, originally published in The Perl
Journal #13, and republished here with kind permission.

=end original

Sean Burke による C<Locale::Maketext> はローカライズフレームワークです。
L<Locale::Maketext> と L<Locale::Maketext::TPJ13> を参照してください。
後者はソフトウェアローカライズに関する記事で、
The Perl Journal #13 に掲載され、許諾の元に再配布されています。

=item *

=begin original

C<Math::BigRat> for big rational numbers, to accompany Math::BigInt and
Math::BigFloat, from Tels.  See L<Math::BigRat>.

=end original

Tels からの C<Math::BigRat> は Math::BigInt 及び Math::BigFloat と使う、
巨大な有理数を扱うためのモジュールです。
L<Math::BigRat> を参照してください。

=item *

=begin original

C<Memoize> can make your functions faster by trading space for time,
from Mark-Jason Dominus.  See L<Memoize>.

=end original

C<Memoize> は Mark-Jason Dominus によるもので、
サイズを速度の引き換えにして関数を速くします。
L<Memoize> を参照してください。

=item *

=begin original

C<MIME::Base64>, by Gisle Aas, allows you to encode data in base64,
as defined in RFC 2045 - I<MIME (Multipurpose Internet Mail
Extensions)>.

=end original

C<MIME::Base64> は Gisle Aas によるもので、
RFC 2045 - I<MIME (Multipurpose Internet Mail Extensions)> に従って
base64 エンコードを可能にします。

    use MIME::Base64;

    $encoded = encode_base64('Aladdin:open sesame');
    $decoded = decode_base64($encoded);

    print $encoded, "\n"; # "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="

=begin original

See L<MIME::Base64>.

=end original

L<MIME::Base64> を参照してください。

=item *

=begin original

C<MIME::QuotedPrint>, by Gisle Aas, allows you to encode data
in quoted-printable encoding, as defined in RFC 2045 - I<MIME
(Multipurpose Internet Mail Extensions)>.

=end original

C<MIME:QuotedPrint> は Gisle Aas によるもので、
RFC 2045 - I<MIME(Multipurpose Internet Mail Extensions)> で
定義されている quoted-printable encoding でデータをエンコードすることを
可能にします。

    use MIME::QuotedPrint;

    $encoded = encode_qp("\xDE\xAD\xBE\xEF");
    $decoded = decode_qp($encoded);

    print $encoded, "\n"; # "=DE=AD=BE=EF\n"
    print $decoded, "\n"; # "\xDE\xAD\xBE\xEF\n"

=begin original

See also L<PerlIO::via::QuotedPrint>.

=end original

<PerlIO::via::QuotedPrint> も併せて参照してください。

=item *

=begin original

C<NEXT>, by Damian Conway, is a pseudo-class for method redispatch.
See L<NEXT>.

=end original

C<NEXT> は Damian Conway によるもので、メソッドの再ディスパッチの
ための擬似クラスです。L<NEXT> を参照してください。

=item *

=begin original

C<open> is a new pragma for setting the default I/O layers
for open().

=end original

C<open> は open() のためのデフォルトの I/O 層をセットするための
新しいプラグマです。

=item *

=begin original

C<PerlIO::scalar>, by Nick Ing-Simmons, provides the implementation
of IO to "in memory" Perl scalars as discussed above.  It also serves
as an example of a loadable PerlIO layer.  Other future possibilities
include PerlIO::Array and PerlIO::Code.  See L<PerlIO::scalar>.

=end original

C<PerlIO::scalar> は Nick Ing-Simmons によるもので、
"インメモリ" な Perl スカラのための上述した IO 実装を提供します。
これはまたローダブル PerlIO 層の例となっています。
その他の将来の可能性としては PerlIO::Array と PerlIO::Code があります。
L<PerlIO::scalar> を参照してください。

=item *

=begin original

C<PerlIO::via>, by Nick Ing-Simmons, acts as a PerlIO layer and wraps
PerlIO layer functionality provided by a class (typically implemented
in Perl code).

=end original

C<PerlIO::via> は Nick Ing-Simmons によるもので PerlIO 層として
振る舞い、(典型的には Perl コードで実装された) クラスで提供される
PerlIO 層の機能をラップします。

=item *

=begin original

C<PerlIO::via::QuotedPrint>, by Elizabeth Mattijsen, is an example
of a C<PerlIO::via> class:

=end original

C<PerlIO::via::QuotedPrint> は Elizabeth Mattijsen によるもので、
C<PerlIO::via> クラスの一例です:

    use PerlIO::via::QuotedPrint;
    open($fh,">:via(QuotedPrint)",$path);

=begin original

This will automatically convert everything output to C<$fh> to
Quoted-Printable.  See L<PerlIO::via> and L<PerlIO::via::QuotedPrint>.

=end original

これは自動的に C<$fh> への全ての出力を Quoted-Printable にコンバートします。
L<PerlIO::via> 及び L<PerlIO::via::QuotedPrint> を参照してください。

=item *

=begin original

C<Pod::ParseLink>, by Russ Allbery, has been added,
to parse LZ<><> links in pods as described in the new
perlpodspec.

=end original

Russ Allbery による、新しい podpodspec 内で記述されている LZ<><> リンクを
パースするための C<Pod::ParseLink> が追加されました。

=item *

=begin original

C<Pod::Text::Overstrike>, by Joe Smith, has been added.
It converts POD data to formatted overstrike text.
See L<Pod::Text::Overstrike>. [561+]

=end original

Joe Smith による C<Pod::Text::Overstrike> が追加されました。
POD データをフォーマットされた overstrike 文章にコンバートします。
L<Pod::Text::Overstrike> を参照してください。[561+]

=item *

=begin original

C<Scalar::Util> is a selection of general-utility scalar subroutines,
such as blessed(), reftype(), and tainted().  See L<Scalar::Util>.

=end original

C<Scalar::Util> は blessed(), reftype(), tainted() のような、
一般的に使われるスカラーサブルーチンを選り集めたものです。
L<Scalar::Util> を参照してください。

=item *

=begin original

C<sort> is a new pragma for controlling the behaviour of sort().

=end original

C<sort> は sort() の振る舞いを制御する新しいプラグマです。

=item *

=begin original

C<Storable> gives persistence to Perl data structures by allowing the
storage and retrieval of Perl data to and from files in a fast and
compact binary format.  Because in effect Storable does serialisation
of Perl data structures, with it you can also clone deep, hierarchical
datastructures.  Storable was originally created by Raphael Manfredi,
but it is now maintained by Abhijit Menon-Sen.  Storable has been
enhanced to understand the two new hash features, Unicode keys and
restricted hashes.  See L<Storable>.

=end original

C<Storable> は Perl データを高速でコンパクトなバイナリフォーマットで
ファイルに保存及びファイルから読み込むことで、
Perl データ構造に永続性を与えます。
Storable が Perl データ構造を直列化するので、
これによって深い階層的なデータ構造をコピーすることが出来ます。
Storable は Raphael Manfredi が作成しましたが、
現在は Abhijit Menon-Sen によって保守されています。
Storable は 二つの新しいハッシュ機能である Unicode キーと
制限ハッシュを理解するように拡張されました。
L<Storable> を参照してください。

=item *

=begin original

C<Switch>, by Damian Conway, has been added.  Just by saying

=end original

Damian Conway による C<Switch> が追加されました。単に:

    use Switch;

=begin original

you have C<switch> and C<case> available in Perl.

=end original

と宣言することによって C<switch> と C<case> が Perl で利用可能になります。

    use Switch;

    switch ($val) {

		case 1		{ print "number 1" }
		case "a"	{ print "string a" }
		case [1..10,42]	{ print "number in list" }
		case (@array)	{ print "number in list" }
		case /\w+/	{ print "pattern" }
		case qr/\w+/	{ print "pattern" }
		case (%hash)	{ print "entry in hash" }
		case (\%hash)	{ print "entry in hash" }
		case (\&sub)	{ print "arg to subroutine" }
		else		{ print "previous case not true" }
    }

=begin original

See L<Switch>.

=end original

L<Switch> を参照してください。

=item *

=begin original

C<Test::More>, by Michael Schwern, is yet another framework for writing
test scripts, more extensive than Test::Simple.  See L<Test::More>.

=end original

Michael Schwern による C<Test::More> は テストスクリプトを書くための
フレームワークの一種で、Test::Simple より拡張されています。
L<Test::More> を参照してください。

=item *

=begin original

C<Test::Simple>, by Michael Schwern, has basic utilities for writing
tests.   See L<Test::Simple>.

=end original

C<Test::Simple> は Michael Schwern によるテストを書くための基礎となる
ユーティリティです。L<Test::Simple> を参照してください。

=item *

=begin original

C<Text::Balanced>, by Damian Conway, has been added, for extracting
delimited text sequences from strings.

=end original

文字列から区切られた一連のテキストを展開するための、
Damian Conway による C<Text::Balanced> が追加されました。

    use Text::Balanced 'extract_delimited';

    ($a, $b) = extract_delimited("'never say never', he never said", "'", '');

=begin original

$a will be "'never say never'", $b will be ', he never said'.

=end original

$a は"'never say never'"になり、 $b は', he never said'になるでしょう。

=begin original

In addition to extract_delimited(), there are also extract_bracketed(),
extract_quotelike(), extract_codeblock(), extract_variable(),
extract_tagged(), extract_multiple(), gen_delimited_pat(), and
gen_extract_tagged().  With these, you can implement rather advanced
parsing algorithms.  See L<Text::Balanced>.

=end original

extract_delimited() に加えて、extract_quotelike(), extract_variable(),
extract_tagged(), extract_multople(), gen_delimited_pat(),
gen_extract_tagged() も存在します。これらによって、
より発展したパースのアルゴリズムを実装することが可能になります。
L<Text::Balanced> を参照してください。

=item *

=begin original

C<threads>, by Arthur Bergman, is an interface to interpreter threads.
Interpreter threads (ithreads) is the new thread model introduced in
Perl 5.6 but only available as an internal interface for extension
writers (and for Win32 Perl for C<fork()> emulation).  See L<threads>,
L<threads::shared>, and L<perlthrtut>.

=end original

Arthur Bergman による C<threads>は、インタプリタスレッドへの
インターフェースです。インタプリタスレッド(iスレッド)は Perl5.6 で導入された
新しいスレッドモデルでしたが拡張機能を書く人に対して内部形式の
インターフェースのみしか利用できませんでした
(また、Win32 の Perl では C<fork()> のエミュレーションのためのものでした)。
L<threads>, L<threads::shared>, L<perlthrtut> を参照してください。

=item *

=begin original

C<threads::shared>, by Arthur Bergman, allows data sharing for
interpreter threads.  See L<threads::shared>.

=end original

C<threads::shared> は Artur Bergman によるものですが、インタプリタスレッドで
データを共有することを可能にします。
L<threads::shared>を参照してください。

=item *

=begin original

C<Tie::File>, by Mark-Jason Dominus, associates a Perl array with the
lines of a file.  See L<Tie::File>.

=end original

C<Tie::File> は Mark-Jason Dominus によるもので、
Perl の配列をファイルの行と関連付けます。
L<Tie::File> を参照してください。

=item *

=begin original

C<Tie::Memoize>, by Ilya Zakharevich, provides on-demand loaded hashes.
See L<Tie::Memoize>.

=end original

C<Tie::Memoize> は Ilya Zakharevich によるもので、
オンデマンドで読み込まれるハッシュを提供します。
L<Tie::Memoize> を参照してください。

=item *

=begin original

C<Tie::RefHash::Nestable>, by Edward Avis, allows storing hash
references (unlike the standard Tie::RefHash)  The module is contained
within Tie::RefHash.  See L<Tie::RefHash>.

=end original

C<Tie::RefHash::Nestable> は Edward Avis によるもので、ハッシュの
リファレンスを格納することを可能にします(標準の Tie::RefHash とは
異なるものです)。本モジュールは Tie::Refhash に含まれています。
L<Tie::RefHash> を参照してください。

=item *

=begin original

C<Time::HiRes>, by Douglas E. Wegscheid, provides high resolution
timing (ualarm, usleep, and gettimeofday).  See L<Time::HiRes>.

=end original

C<Time::HiRes> は Douglas E. Wegcheid によるもので、高精度の
時間操作(ualarm, usleep, gettimeofday)を提供します。
L<Time::HiRes> を参照してください。

=item *

=begin original

C<Unicode::UCD> offers a querying interface to the Unicode Character
Database.  See L<Unicode::UCD>.

=end original

C<Unicode::UCD> は Unicode 文字のデータベースへのクエリーの
インターフェースを提供します。
L<Unicode::UCD> を参照してください。

=item *

=begin original

C<Unicode::Collate>, by SADAHIRO Tomoyuki, implements the UCA
(Unicode Collation Algorithm) for sorting Unicode strings.
See L<Unicode::Collate>.

=end original

C<Unicode::Collate> は SADAHIRO Tomoyuki によるもので、Unicode 文字列を
ソートするための UCA(Unicode Collation Algorithm) の実装です。
L<Unicode::Collate> を参照してください。

=item *

=begin original

C<Unicode::Normalize>, by SADAHIRO Tomoyuki, implements the various
Unicode normalization forms.  See L<Unicode::Normalize>.

=end original

C<Unicode::Normalize> は SADAHIRO Tomoyuki によるもので、
さまざまな Unicode の正規化方法を実装しています。
L<Unicode::Normalize> を参照してください。

=item *

=begin original

C<XS::APItest>, by Tim Jenness, is a test extension that exercises XS
APIs.  Currently only C<printf()> is tested: how to output various
basic data types from XS.

=end original

C<XS::APItest> は Tim Jenness によるもので、XS API を学ぶためのテスト拡張です。
現在のところ C<printf()> のみがテストされています:
XS からさまざまな基本データを出力する方法です。

=item *

=begin original

C<XS::Typemap>, by Tim Jenness, is a test extension that exercises
XS typemaps.  Nothing gets installed, but the code is worth studying
for extension writers.

=end original

C<XS::Typemap> は Tim Jenness によるもので XS タイプマップを
学ぶためのテスト拡張です。
何もインストールされませんが、コードは拡張を書く人々にとっては
学ぶ価値のあるものです。

=back

=head2 Updated And Improved Modules and Pragmata

(更新または改善されたモジュールとプラグマ)

=over 4

=item *

=begin original

The following independently supported modules have been updated to the
newest versions from CPAN: CGI, CPAN, DB_File, File::Spec, File::Temp,
Getopt::Long, Math::BigFloat, Math::BigInt, the podlators bundle
(Pod::Man, Pod::Text), Pod::LaTeX [561+], Pod::Parser, Storable,
Term::ANSIColor, Test, Text-Tabs+Wrap.

=end original

以下の独立してサポートされているモジュールが
CPAN から最新のバージョンに更新されました:
CGI, CPAN, DB_File, File::Spec, File::Temp,
Getopt::Long, Math::BigFloat, Math::BigInt, the podlators bundle
(Pod::Man, Pod::Text), Pod::LaTeX [561+], Pod::Parser, Storable,
Term::ANSIColor, Test, Text-Tabs+Wrap.

=item *

=begin original

attributes::reftype() now works on tied arguments.

=end original

attributes::reftype() は tie された引数で動作するようになりました。

=item *

=begin original

AutoLoader can now be disabled with C<no AutoLoader;>.

=end original

AutoLoader は C<no AutoLoader;> によって無効にすることが
可能になりました。

=item *

=begin original

B::Deparse has been significantly enhanced by Robin Houston.  It can
now deparse almost all of the standard test suite (so that the tests
still succeed).  There is a make target "test.deparse" for trying this
out.

=end original

B::Deparse は Robin Houston によって大きく拡張されました。
ほとんど全てのテストスイートを逆パースできるようになりました
(テストは成功するままです)。
これを試すための make ターゲットは "test.deparse" です。

=item *

=begin original

Carp now has better interface documentation, and the @CARP_NOT
interface has been added to get optional control over where errors
are reported independently of @ISA, by Ben Tilly.

=end original

Carp はよりよいインターフェースドキュメントが付き、
@ISA と独立してエラーがどこで報告されるかを追加で制御するための
@CARP_NOT インターフェースが Ben Tilly によって追加されました。

=item *

=begin original

Class::Struct can now define the classes in compile time.

=end original

Class::Struct はコンパイル時にクラスを定義できるようになりました。

=item *

=begin original

Class::Struct now assigns the array/hash element if the accessor
is called with an array/hash element as the B<sole> argument.

=end original

Class::Struct はアクセサが B<単一で> 配列/ハッシュの要素の引数を伴って、
呼び出された場合、その配列/ハッシュの要素を割り当てます。

=item *

=begin original

The return value of Cwd::fastcwd() is now tainted.

=end original

Cwd::fastcwd() の返り値は汚染されるようになりました。

=item *

=begin original

Data::Dumper now has an option to sort hashes.

=end original

Data::Dumper にはハッシュをソートするオプションがつきました。

=item *

=begin original

Data::Dumper now has an option to dump code references
using B::Deparse.

=end original

Data::Dumper には B::Deparse を使ったコードリファレンスをダンプする
オプションが付きました。

=item *

=begin original

DB_File now supports newer Berkeley DB versions, among
other improvements.

=end original

DB_File は新しいバージョンの Berkeley DB に対応し、
さまざまな改良も行われました。

=item *

=begin original

Devel::Peek now has an interface for the Perl memory statistics
(this works only if you are using perl's malloc, and if you have
compiled with debugging).

=end original

Devel::Peek に Perl のメモリ状況のためのインターフェースが
追加されました(これは perl の malloc を使っていて、
デバッグモードでコンパイルされているときにのみ動作します)。

=item *

=begin original

The English module can now be used without the infamous performance
hit by saying

=end original

English モジュールは以下のように書くことで性能に影響を
与えずに使うことができるようになりました。

	use English '-no_match_vars';

=begin original

(Assuming, of course, that you don't need the troublesome variables
C<$`>, C<$&>, or C<$'>.)  Also, introduced C<@LAST_MATCH_START> and
C<@LAST_MATCH_END> English aliases for C<@-> and C<@+>.

=end original

(もちろん、問題のある C<$`>, C<$&>, or C<$'> を使わないことを仮定しています。)
また、C<@-> と C<@+> の別名として C<@LAST_MATCH_START> と
C<@LAST_MATCH_END> が導入されました。

=item *

=begin original

ExtUtils::MakeMaker has been significantly cleaned up and fixed.
The enhanced version has also been backported to earlier releases
of Perl and submitted to CPAN so that the earlier releases can
enjoy the fixes.

=end original

ExtUtils::MakeMaker は大幅にクリーンアップされ、修正されました。
拡張されたバージョンは Perl の以前のリリースにもバックポートされ、
CPAN に登録されたので、以前のリリースでも修正を享受できます。

=item *

=begin original

The arguments of WriteMakefile() in Makefile.PL are now checked
for sanity much more carefully than before.  This may cause new
warnings when modules are being installed.  See L<ExtUtils::MakeMaker>
for more details.

=end original

Makefile.PL における WriteMakefile() の引数は以前より注意深く、
正確なチェックを行うようになりました。
これはモジュールがインストールされるとき
新たな警告を発生させることでしょう。
さらなる詳細は L<ExtUtils::MakeMaker> を参照してください。

=item *

=begin original

ExtUtils::MakeMaker now uses File::Spec internally, which hopefully
leads to better portability.

=end original

ExtUtils::MakeMaker は、移植性が高まるように内部で File::Spec を
使うようになりました。

=item *

=begin original

Fcntl, Socket, and Sys::Syslog have been rewritten by Nicholas Clark
to use the new-style constant dispatch section (see L<ExtUtils::Constant>).
This means that they will be more robust and hopefully faster.

=end original

Fnctl, Socket, Sys::Syslog は Nicholas Clark によって
新しいスタイルの継続的なディスパッチセクションを用いるため書き直されました
(L<ExtUtils::Constant> を参照してください)。
これはより強力で高速化が期待されることを意味します。

=item *

=begin original

File::Find now chdir()s correctly when chasing symbolic links. [561]

=end original

File::Find のシンボリックリンクの追跡の際の chdir() の動作が
正確になりました。[561]

=item *

=begin original

File::Find now has pre- and post-processing callbacks.  It also
correctly changes directories when chasing symbolic links.  Callbacks
(naughtily) exiting with "next;" instead of "return;" now work.

=end original

File::Find は処理前後にコールバックを持つようになりました。
また、シンボリックリンクを追うときに正しくディレクトリを
変更するようになりました。
"return;" ではなく "next;" で終了する(行儀の悪い) コールバックも
動作するようになりました。

=item *

=begin original

File::Find is now (again) reentrant.  It also has been made
more portable.

=end original

File::Findは（再び）再入可能になりました。より移植性が高くなっています。

=item *

=begin original

The warnings issued by File::Find now belong to their own category.
You can enable/disable them with C<use/no warnings 'File::Find';>.

=end original

File::Find による警告は自身のカテゴリに従うようになりました。
C<use/no warnings 'File::Find';> によってオン/オフできます。

=item *

=begin original

File::Glob::glob() has been renamed to File::Glob::bsd_glob()
because the name clashes with the builtin glob().  The older
name is still available for compatibility, but is deprecated. [561]

=end original

組み込みの glob() と名前が重複してしまうため、File::Glob::glob() は
File::Glob::bsd_glob() に名前を変更されました。古いほうの名前は
互換性を保つためにまだ利用可能ですが、非推奨です。[561]

=item *

=begin original

File::Glob now supports C<GLOB_LIMIT> constant to limit the size of
the returned list of filenames.

=end original

File::Glob は、返されるファイル名のリストのサイズを制限するための
C<GLOB_LIMIT> 定数に対応しました。

=item *

=begin original

IPC::Open3 now allows the use of numeric file descriptors.

=end original

IPC::Open3 で数値のファイル記述子が使えるようになりました。

=item *

=begin original

IO::Socket now has an atmark() method, which returns true if the socket
is positioned at the out-of-band mark.  The method is also exportable
as a sockatmark() function.

=end original

IO::Socket に atmark() メソッドが追加され、ソケットが out-of-band マークの
位置にある場合に真を返します。
このメソッドは sockatmark() 関数としてエクスポートされます。

=item *

=begin original

IO::Socket::INET failed to open the specified port if the service name
was not known.  It now correctly uses the supplied port number as is. [561]

=end original

IO::Socket::INET はサービス名が不明な場合、特定のポートを開くのに
失敗していました。
与えられたポート番号そのままを使うように修正されました。[561]

=item *

=begin original

IO::Socket::INET has support for the ReusePort option (if your
platform supports it).  The Reuse option now has an alias, ReuseAddr.
For clarity, you may want to prefer ReuseAddr.

=end original

IO::Socket::INET が(プラットフォームが対応していれば) ReusePort オプションに
対応しました。Reuse オプションは ReuseAddr というエイリアスを持ちます。
明確化のために、ReuseAddr の方を使いたいと思うかもしれません。

=item *

=begin original

IO::Socket::INET now supports a value of zero for C<LocalPort>
(usually meaning that the operating system will make one up.)

=end original

IO::Socket::INET は C<LocalPort> にゼロを指定できるようになりました
(普通これはオペレーティングシステムが値を決定することを意味します)。

=item *

=begin original

'use lib' now works identically to @INC.  Removing directories
with 'no lib' now works.

=end original

'use lib' は @INC と全く同じように動作するようになりました。
'no lib' でディレクトリを削除できるようになりました。

=item *

=begin original

Math::BigFloat and Math::BigInt have undergone a full rewrite by Tels.
They are now magnitudes faster, and they support various bignum
libraries such as GMP and PARI as their backends.

=end original

Math::BigFloat と Math::BigInt は Tels によって完全に書き直されました。
大きく高速化され、バックエンドとして GMP や PARI のような
さまざまな bignum ライブラリに対応しました。
=item *

=begin original

Math::Complex handles inf, NaN etc., better.

=end original

Math::Complex は inf, NaN などをよりよく扱うようになりました。

=item *

=begin original

Net::Ping has been considerably enhanced by Rob Brown: multihoming is
now supported, Win32 functionality is better, there is now time
measuring functionality (optionally high-resolution using
Time::HiRes), and there is now "external" protocol which uses
Net::Ping::External module which runs your external ping utility and
parses the output.  A version of Net::Ping::External is available in
CPAN.

=end original

Net::Ping は Rob Brown によってかなり拡張されました:
マルチホーミングに対応し、Win32 の機能が改善され、
時間計測機能(TIme::HiRes を使った高精度計測にも対応しています)が
追加されました。
また、外部 ping ユーティリティを使って出力をパースする、
Net::Ping::External モジュールによって「外部」プロトコルに
対応しました。
Net::Ping::External は CPAN で入手可能です。

=begin original

Note that some of the Net::Ping tests are disabled when running
under the Perl distribution since one cannot assume one or more
of the following: enabled echo port at localhost, full Internet
connectivity, or sympathetic firewalls.  You can set the environment
variable PERL_TEST_Net_Ping to "1" (one) before running the Perl test
suite to enable all the Net::Ping tests.

=end original

Net::Ping のテストの一部は Perl ディストリビューションで
実行するときに無効になっていることに注意してください。
これは、localhost の有効な echo ポート、完全なインターネット接続性、
同情的なファイアウォールといった情報を仮定できないためです。
Perl テストスイートを実行する前に環境変数 PERL_TEST_Net_Ping を "1" に
設定することで Net::Ping の全てのテストが有効になります。

=item *

=begin original

POSIX::sigaction() is now much more flexible and robust.
You can now install coderef handlers, 'DEFAULT', and 'IGNORE'
handlers, installing new handlers was not atomic.

=end original

POSIX::sigaction() はより柔軟で頑強になりました。
コードリファレンス、'DEFAULT', 'IGNORE' のハンドラや、
アトミックでない新しいハンドラを設定できます。

=item *

=begin original

In Safe, C<%INC> is now localised in a Safe compartment so that
use/require work.

=end original

Safe では、use/require が動くように C<%INC> は Safe コンパートメントの
中ではローカル化されます。

=item *

=begin original

In SDBM_File on dosish platforms, some keys went missing because of
lack of support for files with "holes".  A workaround for the problem
has been added.

=end original

DOS 風プラットフォームでの SDBM_File において、
"穴"のあるファイルに対応していないためにキーのいくつかが
失われていました。
この問題の回避策が追加されました。

=item *

=begin original

In Search::Dict one can now have a pre-processing hook for the
lines being searched.

=end original

Search::Dict において、検索された行のためのプリプロセスフックが
追加されました。

=item *

=begin original

The Shell module now has an OO interface.

=end original

Shell モジュールに OO インターフェースが追加されました。

=item *

=begin original

In Sys::Syslog there is now a failover mechanism that will go
through alternative connection mechanisms until the message
is successfully logged.

=end original

Sys::Syslog において、メッセージのロギングに成功するまで
次の接続を行うというフェイルオーバー機構が追加されました。

=item *

=begin original

The Test module has been significantly enhanced.

=end original

Test モジュールは大幅に拡張されました。

=item *

=begin original

Time::Local::timelocal() does not handle fractional seconds anymore.
The rationale is that neither does localtime(), and timelocal() and
localtime() are supposed to be inverses of each other.

=end original

Time::Local::timelocal() はもはや小数の秒を扱いません。
この理由は、localtime() が対応していないということと、
timelocal() と localtime() は互いに対称であると想定されるからです。

=item *

=begin original

The vars pragma now supports declaring fully qualified variables.
(Something that C<our()> does not and will not support.)

=end original

vars プラグマは完全修飾変数の宣言に対応しました。
(C<our()> は対応せず、対応の予定もありません。)

=item *

=begin original

The C<utf8::> name space (as in the pragma) provides various
Perl-callable functions to provide low level access to Perl's
internal Unicode representation.  At the moment only length()
has been implemented.

=end original

C<utf8::> 名前空間は(プラグマのように) Perl の内部 Unicode 表現への
低レベルアクセスを提供するさまざまな Perl から呼び出せる関数を提供します。
現在のところ length() のみが実装されています。

=back

=head1 Utility Changes

(ツールの変更)

=over 4

=item *

=begin original

Emacs perl mode (emacs/cperl-mode.el) has been updated to version
4.31.

=end original

Emacs perl mode (emacs/cperl-mode.el) はバージョン 4.31 に
更新されました。

=item *

=begin original

F<emacs/e2ctags.pl> is now much faster.

=end original

F<emacs/e2ctags.pl> は遥かに速くなりました。

=item *

=begin original

C<enc2xs> is a tool for people adding their own encodings to the
Encode module.

=end original

C<enc2xs> は Encode モジュールに独自のエンコーディングを追加するための
ツールです。

=item *

=begin original

C<h2ph> now supports C trigraphs.

=end original

C<h2ph> は C トライグラフに対応しました。

=item *

=begin original

C<h2xs> now produces a template README.

=end original

C<h2xs> は README のテンプレートを生成するようになりました。

=item *

=begin original

C<h2xs> now uses C<Devel::PPPort> for better portability between
different versions of Perl.

=end original

C<h2xs> は Perl の異なるバージョンの間での移植性を高めるために
C<Devel::PPPort> を使うようになりました。

=item *

=begin original

C<h2xs> uses the new L<ExtUtils::Constant|ExtUtils::Constant> module
which will affect newly created extensions that define constants.
Since the new code is more correct (if you have two constants where the
first one is a prefix of the second one, the first constant B<never>
got defined), less lossy (it uses integers for integer constant,
as opposed to the old code that used floating point numbers even for
integer constants), and slightly faster, you might want to consider
regenerating your extension code (the new scheme makes regenerating
easy).  L<h2xs> now also supports C trigraphs.

=end original

C<h2xs> は新しい L<ExtUtils::Constant|ExtUtils::Constant> モジュールを
使うようになったので、定数を定義する新しく作成された拡張に影響を与えます。
新しいコードはより正しく(ある定数がもう一つの定数の接頭辞となっているような
二つの定数がある場合、一つ目の定数は B<決して> 定義されません)、
誤差が少なく(古いコードは整数定数にも浮動小数点数を使っていましたが、
整数定数には整数を使うようになりました)、
少し速くなりましたので、すでにある拡張コードを再生成することを考慮するべき
かもしれません(新しいスキーマは簡単に再生成できます)。
L<h2xs> は C トライグラフにも対応しました。

=item *

=begin original

C<libnetcfg> has been added to configure libnet.

=end original

libnet を設定するために C<libnetcfg> が追加されました。

=item *

=begin original

C<perlbug> is now much more robust.  It also sends the bug report to
perl.org, not perl.com.

=end original

C<perlbug> はより頑強になりました。
また、perl.com ではなく perl.org にバグレポートを送信します。

=item *

=begin original

C<perlcc> has been rewritten and its user interface (that is,
command line) is much more like that of the UNIX C compiler, cc.
(The perlbc tools has been removed.  Use C<perlcc -B> instead.)
B<Note that perlcc is still considered very experimental and
unsupported.> [561]

=end original

C<perlcc> は書き直され、ユーザーインターフェース(つまりコマンドライン)は
より UNIX C コンパイラである cc と近いものになりました。
(perlbc ツールは削除されました。代わりに C<perlcc -B> を使ってください。)
B<perlcc はいまだ非常に実験的で未サポートであることに注意してください。> [561]

=item *

=begin original

C<perlivp> is a new Installation Verification Procedure utility
for running any time after installing Perl.

=end original

C<perlivp> は Perl インストール後にいつでも使える
新しいインストール検証手順ユーティリティです。

=item *

=begin original

C<piconv> is an implementation of the character conversion utility
C<iconv>, demonstrating the new Encode module.

=end original

C<piconv> は文字変換ユーティリティ C<iconv> の実装で、
新しい Encode モジュールのデモ用です。

=item *

=begin original

C<pod2html> now allows specifying a cache directory.

=end original

C<pod2html> はキャッシュディレクトリを指定できるようになりました。

=item *

=begin original

C<pod2html> now produces XHTML 1.0.

=end original

C<pod2html> は XHTML 1.0 を生成できるようになりました。

=item *

=begin original

C<pod2html> now understands POD written using different line endings
(PC-like CRLF versus UNIX-like LF versus MacClassic-like CR).

=end original

C<pod2html> は異なる改行コード(PC 風の CRLF と UNIX 風の LF と
MacClassic 風の CR)で書かれた POD を理解するようになりました。

=item *

=begin original

C<s2p> has been completely rewritten in Perl.  (It is in fact a full
implementation of sed in Perl: you can use the sed functionality by
using the C<psed> utility.)

=end original

C<s2p> は完全に Perl で書き直されました。
(これは実際のところ sed の Perl による完全な実装です:
C<psed> ユーティリティを使うことで sed の機能を使うことができます。)

=item *

=begin original

C<xsubpp> now understands POD documentation embedded in the *.xs
files. [561]

=end original

C<xsubpp> は *.xs に組み込まれた POD ドキュメントを理解するように
なりました。

=item *

=begin original

C<xsubpp> now supports the OUT keyword.

=end original

C<xsubpp> は OUT キーワードに対応しました。

=back

=head1 New Documentation

(新しいドキュメント)

=over 4

=item *

=begin original

perl56delta details the changes between the 5.005 release and the
5.6.0 release.

=end original

perl56delta はリリース 5.005 と 5.6.0 の違いに関する詳細です。

=item *

=begin original

perlclib documents the internal replacements for standard C library
functions.  (Interesting only for extension writers and Perl core
hackers.) [561+]

=end original

prtlclib は標準 C ライブラリ関数の内部置き換えについてのドキュメントです。
(拡張を書く人と Perl コアのハッカーにのみ興味があるものです。)[561+]

=item *

=begin original

perldebtut is a Perl debugging tutorial. [561+]

=end original

perldebtut は Perl デバッグのチュートリアルです。[561+]

=item *

=begin original

perlebcdic contains considerations for running Perl on EBCDIC
platforms. [561+]

=end original

perlebcdic は Perl を EBCDIC プラットフォームで動作させる場合に
考慮するべきことを記述しています。[561+]

=item *

=begin original

perlintro is a gentle introduction to Perl.

=end original

perlintro は Perl の穏やかな説明です。

=item *

=begin original

perliol documents the internals of PerlIO with layers.

=end original

perliol は PerlIO と層の内部について記述しています。

=item *

=begin original

perlmodstyle is a style guide for writing modules.

=end original

perlmodstyle はモジュールを書くときのスタイルガイドです。

=item *

=begin original

perlnewmod tells about writing and submitting a new module. [561+]

=end original

perlnewmod は新しいモジュールを書いて、登録する方法を
記述しています。[561+]

=item *

=begin original

perlpacktut is a pack() tutorial.

=end original

perlpacktut は pack() のチュートリアルです。

=item *

=begin original

perlpod has been rewritten to be clearer and to record the best
practices gathered over the years.

=end original

perlpod はより明確にするためと、何年にも渡って行われてきた
ベストプラクティスを記録するために書き直されました。

=item *

=begin original

perlpodspec is a more formal specification of the pod format,
mainly of interest for writers of pod applications, not to
people writing in pod.

=end original

perlpodspec は pod フォーマットに関するよりフォーマルな仕様書で、
主に pod を書く人ではなく、pod アプリケーションを書く人のためのものです。

=item *

=begin original

perlretut is a regular expression tutorial. [561+]

=end original

perlretut は正規表現のチュートリアルです。[561+]

=item *

=begin original

perlrequick is a regular expressions quick-start guide.
Yes, much quicker than perlretut. [561]

=end original

perlrequick は正規表現のクイックスタートガイドです。
実際、perlretut より遥かに素早く始められます。[561]

=item *

=begin original

perltodo has been updated.

=end original

perltodo は更新されました。

=item *

=begin original

perltootc has been renamed as perltooc (to not to conflict
with perltoot in filesystems restricted to "8.3" names).

=end original

perltootc は perltooc に名前が変わりました
(ファイル名が"8.3"に制限されているファイルシステムで perltoot と
競合しないためです)。

=item *

=begin original

perluniintro is an introduction to using Unicode in Perl.
(perlunicode is more of a detailed reference and background
information)

=end original

perluniintro は Perl で Unicode を使うための説明です。
(perlunicode はより詳細なリファレンスと背景情報です)

=item *

=begin original

perlutil explains the command line utilities packaged with the Perl
distribution. [561+]

=end original

perlutil は Perl ディストリビューションと共に配布されている
コマンドラインユーティリティの説明です。[561+]

=back

=begin original

The following platform-specific documents are available before
the installation as README.I<platform>, and after the installation
as perlI<platform>:

=end original

以下のプラットフォーム固有のドキュメントが利用可能です。
インストール前は README.I<platform>、インストール後は
perlI<platform> という名前です。

    perlaix perlamiga perlapollo perlbeos perlbs2000
    perlce perlcygwin perldgux perldos perlepoc perlfreebsd perlhpux
    perlhurd perlirix perlmachten perlmacos perlmint perlmpeix
    perlnetware perlos2 perlos390 perlplan9 perlqnx perlsolaris
    perltru64 perluts perlvmesa perlvms perlvos perlwin32

=begin original

These documents usually detail one or more of the following subjects:
configuring, building, testing, installing, and sometimes also using
Perl on the said platform.

=end original

これらのドキュメントは通常以下のような内容の詳細がが記されています:
設定、ビルド、テスト、インストール、そのプラットフォームで Perl を
動かすときに関係する内容。

=begin original

Eastern Asian Perl users are now welcomed in their own languages:
README.jp (Japanese), README.ko (Korean), README.cn (simplified
Chinese) and README.tw (traditional Chinese), which are written in
normal pod but encoded in EUC-JP, EUC-KR, EUC-CN and Big5.  These
will get installed as

=end original

東アジアの Perl ユーザーは自身の言語で迎えられることになりました:
README.jp (日本語), README.ko (韓国語), README.cn (簡体中国語),
README.tw (繁体中国語) は通常の pod として書かれていますが、
それぞれ EUC-JP, EUC-KR, EUC-CN, Big5 でエンコードされています。
これらは以下の名前でインストールされます。

   perljp perlko perlcn perltw

=over 4

=item *

=begin original

The documentation for the POSIX-BC platform is called "BS2000", to avoid
confusion with the Perl POSIX module.

=end original

POSIX-BC プラットフォームのドキュメントは "BS2000" と呼ばれます。
Perl POSIX モジュールと混乱しないためです。

=item *

=begin original

The documentation for the WinCE platform is called perlce (README.ce
in the source code kit), to avoid confusion with the perlwin32
documentation on 8.3-restricted filesystems.

=end original

WinCE プラットフォームのドキュメントは perlce (ソースコードキットでは
README.ce) という名前です。
8.3 制限のファイルシステムで perlwin32 ドキュメントと混乱しないためです。

=back

=head1 Performance Enhancements

(性能の向上)

=over 4

=item *

=begin original

map() could get pathologically slow when the result list it generates
is larger than the source list.  The performance has been improved for
common scenarios. [561]

=end original

map() は生成した結果のリストが元のリストよりも大きいときに
病的に遅くなることがありました。
そのパフォーマンスが一般的な場面において改善されました。[561]

=item *

=begin original

sort() is also fully reentrant, in the sense that the sort function
can itself call sort().  This did not work reliably in previous
releases. [561]

=end original

sort() は、sort 関数自身が sort() を呼ぶことができるという意味で、
完全に再入可能です。
それは以前のリリースでは確実には動作しませんでした。[561]

=item *

=begin original

sort() has been changed to use primarily mergesort internally as
opposed to the earlier quicksort.  For very small lists this may
result in slightly slower sorting times, but in general the speedup
should be at least 20%.  Additional bonuses are that the worst case
behaviour of sort() is now better (in computer science terms it now
runs in time O(N log N), as opposed to quicksort's Theta(N**2)
worst-case run time behaviour), and that sort() is now stable
(meaning that elements with identical keys will stay ordered as they
were before the sort).  See the C<sort> pragma for information.

=end original

sort() は今まではクイックソートでしたが、代わりにマージソートを
使うようになりました。非常に小さいリストではソート時間が少し
遅くなりますが、一般的には少なくとも 20% は高速化されるはずです。
追加の利点としては最悪の場合の sort() の振る舞いが改善されます
(コンピュータ科学の表現では、クイックソートでは最悪の場合に
実行時に Theta(N**2) かかっていたものが O(N log N) になります)。
そして sort() は安定したものになります
(つまり同じキーを持つ要素はソート前と同じ順序になります)。
詳しくは C<sort> プラグマを参照してください。

=begin original

The story in more detail: suppose you want to serve yourself a little
slice of Pi.

=end original

詳細を検討するための想定: 円周率の一部を自分で提供したいと仮定します。

    @digits = ( 3,1,4,1,5,9 );

=begin original

A numerical sort of the digits will yield (1,1,3,4,5,9), as expected.
Which C<1> comes first is hard to know, since one C<1> looks pretty
much like any other.  You can regard this as totally trivial,
or somewhat profound.  However, if you just want to sort the even
digits ahead of the odd ones, then what will

=end original

数値の数値ソートは予想通り (1,1,3,4,5,9) となります。
どちらの C<1> が最初に来るのかはわかりにくいです。
なぜなら片方の C<1> はもう片方とかなり良く似ているからです。
このことは全くつまらないことと考えるかもしれませんし、
何か深遠なことと考えるかもしれません。
しかし、もし偶数を奇数の前にしたくて以下のように書いたとします:

    sort { ($a % 2) <=> ($b % 2) } @digits;

=begin original

yield?  The only even digit, C<4>, will come first.  But how about
the odd numbers, which all compare equal?  With the quicksort algorithm
used to implement Perl 5.6 and earlier, the order of ties is left up
to the sort.  So, as you add more and more digits of Pi, the order
in which the sorted even and odd digits appear will change.
and, for sufficiently large slices of Pi, the quicksort algorithm
in Perl 5.8 won't return the same results even if reinvoked with the
same input.  The justification for this rests with quicksort's
worst case behavior.  If you run

=end original

結果は?唯一の偶数である C<4> が最初に来ます。
しかし、比較すると全て同じになる奇数はについては?
Perl 5.6 以前で実装されていたクイックソートアルゴリズムでは、
同点の場合の順序はソートに委ねられます。
従って、円周率の数値を追加するにつれて、
ソートされた偶数と奇数の順序は変わります。
また、十分に多い数の円周率の場合は、Perl 5.8 のクイックソート
アルゴリズムは、同じ入力のソートを再実行した場合でも
同じ結果にはなりません。
これの正当化は、クイックソートの最悪の場合の振る舞いと
共に残ります。
以下を実行すると:

   sort { $a <=> $b } ( 1 .. $N , 1 .. $N );

=begin original

(something you might approximate if you wanted to merge two sorted
arrays using sort), doubling $N doesn't just double the quicksort time,
it I<quadruples> it.  Quicksort has a worst case run time that can
grow like N**2, so-called I<quadratic> behaviour, and it can happen
on patterns that may well arise in normal use.  You won't notice this
for small arrays, but you I<will> notice it with larger arrays,
and you may not live long enough for the sort to complete on arrays
of a million elements.  So the 5.8 quicksort scrambles large arrays
before sorting them, as a statistical defence against quadratic behaviour.
But that means if you sort the same large array twice, ties may be
broken in different ways.

=end original

(二つのソートされた配列を sort を使ってマージしたいと
仮定します)、$N の値を 2 倍にした場合、クイックソートに掛かる時間は
2 倍ではなく、 I<4 倍> になります。
クイックソートの実行時間は最悪の場合で N**2 で増えることになるため、
I<4 倍の> 振る舞いと呼ばれ、これは通常の使用のパターンでも発生しえます。
これは小さい配列の場合は注意する必要はありませんが、
大きい配列の場合は I<注意する必要があります>。
そしてあなたは何百万要素もあるような配列のソートが終わるまで
長生きできないかもしれません。
それで、5.8 のクイックソートは大きな配列の場合は 4 倍の振る舞いから
守るためにはソート前に配列をかき混ぜます。
しかしこれは、もし同じ大きな配列をもう一度ソートすると、
同点の場合の挙動は色々は方法で変わることを意味します。

=begin original

Because of the unpredictability of tie-breaking order, and the quadratic
worst-case behaviour, quicksort was I<almost> replaced completely with
a stable mergesort.  I<Stable> means that ties are broken to preserve
the original order of appearance in the input array.  So

=end original

同点の時の優先順位が予測不可能であることと、
最悪の場合に 4 倍の振る舞いをするので、
クイックソートは安定したマージソートに I<ほとんど> 完全に置き換えられました。
I<安定した> とは、同点の場合は入力配列での出現順が保存されるということです。
従って:

    sort { ($a % 2) <=> ($b % 2) } (3,1,4,1,5,9);

=begin original

will yield (4,3,1,1,5,9), guaranteed.  The even and odd numbers
appear in the output in the same order they appeared in the input.
Mergesort has worst case O(N log N) behaviour, the best value
attainable.  And, ironically, this mergesort does particularly
well where quicksort goes quadratic:  mergesort sorts (1..$N, 1..$N)
in O(N) time.  But quicksort was rescued at the last moment because
it is faster than mergesort on certain inputs and platforms.
For example, if you really I<don't> care about the order of even
and odd digits, quicksort will run in O(N) time; it's very good
at sorting many repetitions of a small number of distinct elements.
The quicksort divide and conquer strategy works well on platforms
with relatively small, very fast, caches.  Eventually, the problem gets
whittled down to one that fits in the cache, from which point it
benefits from the increased memory speed.

=end original

では (4,3,1,1,5,9) という結果が保証されます。
偶数と奇数は入力で現れた順に出力にも現れます。
マージソートは最悪の場合でも理想値である O(N log N) の振る舞いを示します。
そして皮肉にも、クイックソートで 4 倍になるような場合に特によい性能を
示します: (1..$N, 1..$N) のソートは O(N) 時間です。
しかしクイックソートは、ある種の入力とプラットフォームでは
マージソートより速いという理由で最後の瞬間に救出されました。
例えば、偶数と奇数の順番を I<気にしない> のであれば、
クイックソートは O(N) 時間で実行されます;
これは異なった少しの要素を何回もソートするにはよいものです。
クイックソートの分割統治戦略は比較的小さいがとても早いキャッシュをもつ
プラットフォームでよく動きます。
最終的に問題はキャッシュに収まるサイズに分割され、
それによりメモリ速度工場の恩恵を受けられます。

=begin original

Quicksort was rescued by implementing a sort pragma to control aspects
of the sort.  The B<stable> subpragma forces stable behaviour,
regardless of algorithm.  The B<_quicksort> and B<_mergesort>
subpragmas are heavy-handed ways to select the underlying implementation.
The leading C<_> is a reminder that these subpragmas may not survive
beyond 5.8.  More appropriate mechanisms for selecting the implementation
exist, but they wouldn't have arrived in time to save quicksort.

=end original

クイックソートは、ソートの様相を制御する sort プラグマの実装によって
救出されました。 B<stable> 副プラグマはアルゴリズムに関わらず
安定した振る舞いを強制します。
B<_quicksort> と B<_mergesort> 副プラグマは内在する実装を
選択する荒っぽい方法です。
先頭の C<_> は、この副プラグマが 5.8 以降まで生き残らないかもしれない
ことを示しています。
実装を選択するためのより適切な機構がありますが、
クイックソートの救出には間に合いませんでした。

=item *

=begin original

Hashes now use Bob Jenkins "One-at-a-Time" hashing key algorithm
( http://burtleburtle.net/bob/hash/doobs.html ).  This algorithm is
reasonably fast while producing a much better spread of values than
the old hashing algorithm (originally by Chris Torek, later tweaked by
Ilya Zakharevich).  Hash values output from the algorithm on a hash of
all 3-char printable ASCII keys comes much closer to passing the
DIEHARD random number generation tests.  According to perlbench, this
change has not affected the overall speed of Perl.

=end original

ハッシュは Bob Jenkins の"一期一会"ハッシュキーアルゴリズム
( http://burtleburtle.net/bob/hash/doobs.html )を使うようになりました。
このアルゴリズムは十分に高速で、古いハッシュアルゴリズム
(Chris Torek によって書かれ、後に Ilya Zakharevich に変更されたもの)より
値の拡散がよいです。
このアルゴリズムによる全ての 3 文字の印字可能な ASCII 文字によるキーの
ハッシュ値は DIEHARD 乱数生成テストをほとんど通過するものです。
perlbench によれば、この変更は Perl 全体の速度に影響を与えません。

=item *

=begin original

unshift() should now be noticeably faster.

=end original

unshift() は目立つほど速くなったはずです。

=back

=head1 Installation and Configuration Improvements

(インストールと設定の改善点)

=head2 Generic Improvements

(全般的な改善点)

=over 4

=item *

=begin original

INSTALL now explains how you can configure Perl to use 64-bit
integers even on non-64-bit platforms.

=end original

INSTALL に 非 64-bit プラットフォームで Perl を 64-bit 整数を使うように
設定する方法の説明が追加されました。

=item *

=begin original

Policy.sh policy change: if you are reusing a Policy.sh file
(see INSTALL) and you use Configure -Dprefix=/foo/bar and in the old
Policy $prefix eq $siteprefix and $prefix eq $vendorprefix, all of
them will now be changed to the new prefix, /foo/bar.  (Previously
only $prefix changed.)  If you do not like this new behaviour,
specify prefix, siteprefix, and vendorprefix explicitly.

=end original

Policy.sh のポリシーが変更されました: Policy.sh ファイルを
再利用して(INSTALL を参照してください)、
Configure -Dprefix=/foo/bar を使い、
古い Policy で $prefix eq $siteprefix and $prefix eq $vendorprefix の
場合、これら全てが新しい接頭辞である /foo/bar に変更されます。
(以前は $prefix のみが変更されていました。)
この新しい振る舞いを好まない場合は、prefix, siteprefix, vendorperfix を
明示的に指定してください。

=item *

=begin original

A new optional location for Perl libraries, otherlibdirs, is available.
It can be used for example for vendor add-ons without disturbing Perl's
own library directories.

=end original

Perl ライブラリの追加の位置を指定するための otherlibdirs が
利用可能になりました。
Perl 自身のライブラリディレクトリを使わずにベンダーアドオンを 
インストールするためなどに使えます。

=item *

=begin original

In many platforms, the vendor-supplied 'cc' is too stripped-down to
build Perl (basically, 'cc' doesn't do ANSI C).  If this seems
to be the case and 'cc' does not seem to be the GNU C compiler
'gcc', an automatic attempt is made to find and use 'gcc' instead.

=end original

多くのプラットフォームで、ベンダーが提供する 'cc' は Perl を
ビルドするには機能が低すぎます(基本的に、'cc' は ANSI C ではありません)。
この場合にあたると考えられ、'cc' が GNU C コンパイラでないような
場合、代わりに 'gcc' を使うために自動的に検索します。

=item *

=begin original

gcc needs to closely track the operating system release to avoid
build problems. If Configure finds that gcc was built for a different
operating system release than is running, it now gives a clearly visible
warning that there may be trouble ahead.

=end original

gcc はビルドの問題を避けるためにオペレーションシステムのリリースを
追いかける必要があります。実行されているオペレーティングシステムと
違う環境で gcc がコンパイルされているのを Configure が発見した場合、
問題があるかもしれないことを明確に警告として出力します。

=item *

=begin original

Since Perl 5.8 is not binary-compatible with previous releases
of Perl, Configure no longer suggests including the 5.005
modules in @INC.

=end original

Perl 5.8 は以前のバージョンとバイナリ互換性がありませんので、
@INC に 5.005 モジュールを含めることを提案しなくなりました。

=item *

=begin original

Configure C<-S> can now run non-interactively. [561]

=end original

Configure C<-S> は非対話的に実行できるようになりました。[561]

=item *

=begin original

Configure support for pdp11-style memory models has been removed due
to obsolescence. [561]

=end original

Configure の pdp11-スタイルメモリモデルは古いものになっていますので
取り除かれました。

=item *

=begin original

configure.gnu now works with options with whitespace in them.

=end original

configure.gnu はオプションに空白が入っていても動作するようになりました。

=item *

=begin original

installperl now outputs everything to STDERR.

=end original

installperl は出力を全て STDERR に行うようになりました。

=item *

=begin original

Because PerlIO is now the default on most platforms, "-perlio" doesn't
get appended to the $Config{archname} (also known as $^O) anymore.
Instead, if you explicitly choose not to use perlio (Configure command
line option -Uuseperlio), you will get "-stdio" appended.

=end original

PerlIO がほとんどのプラットフォームでデフォルトになったので、
"-perlio" は $Config{archname} ($^O としても知られます) に
追加されなくなりました。
代わりに、明示的に perlio を使わないことを選択した
(Configure コマンドラインオプション -Uuseperlio)場合、
"-stdio"が追加されます。

=item *

=begin original

Another change related to the architecture name is that "-64all"
(-Duse64bitall, or "maximally 64-bit") is appended only if your
pointers are 64 bits wide.  (To be exact, the use64bitall is ignored.)

=end original

アーキテクチャ名に関するその他の変更としては、
"-64all"(-Duse64bitall または "maximally 64-bit") は
ポインタが 64 ビット長 の場合にのみ追加されます。
(正確には、use64bitall が無視されます。)

=item *

=begin original

In AFS installations, one can configure the root of the AFS to be
somewhere else than the default F</afs> by using the Configure
parameter C<-Dafsroot=/some/where/else>.

=end original

AFS インストールで、Configure でパラメータ C<-Dafsroot=/some/where/else> を
使うことで、AFS のルートをデフォルトの F</afs> 以外に設定することができます。

=item *

=begin original

APPLLIB_EXP, a lesser-known configuration-time definition, has been
documented.  It can be used to prepend site-specific directories
to Perl's default search path (@INC); see INSTALL for information.

=end original

ほとんど知られていない設定時定義である APPLLIB_EXP どドキュメントが
作成されました。これはサイト固有のディレクトリを Perl の
デフォルト検索パス (@INC) に追加するために使えます。
情報については INSTALL を参照してください。

=item *

=begin original

The version of Berkeley DB used when the Perl (and, presumably, the
DB_File extension) was built is now available as
C<@Config{qw(db_version_major db_version_minor db_version_patch)}>
from Perl and as C<DB_VERSION_MAJOR_CFG DB_VERSION_MINOR_CFG
DB_VERSION_PATCH_CFG> from C.

=end original

Perl (とおそらくは DB_File 拡張)がビルドされたときに使われた
Berkeley DB のバージョンが、Perl からは
C<@Config{qw(db_version_major db_version_minor db_version_patch)}> で、
C からは C<DB_VERSION_MAJOR_CFG DB_VERSION_MINOR_CFG DB_VERSION_PATCH_CFG> で
得られるようになりました。

=item *

=begin original

Building Berkeley DB3 for compatibility modes for DB, NDBM, and ODBM
has been documented in INSTALL.

=end original

DB, NDBM, ODBM のために Berkeley DB3 を互換性モードでビルドする方法が
INSTALL に記述されました。

=item *

=begin original

If you have CPAN access (either network or a local copy such as a
CD-ROM) you can during specify extra modules to Configure to build and
install with Perl using the -Dextras=...  option.  See INSTALL for
more details.

=end original

(ネットワーク経由か、CD-ROM のようなローカルコピーによって) CPAN に
アクセスできる場合、-Dextras=... オプションを使って
Perl と共にビルドおよびインストールする追加のモジュールを Configure に
指定することが出来ます。
さらなる詳細については INSTALL を参照してください。

=item *

=begin original

In addition to config.over, a new override file, config.arch, is
available.  This file is supposed to be used by hints file writers
for architecture-wide changes (as opposed to config.over which is
for site-wide changes).

=end original

config.over に追加して、新しい上書きファイルである config.arch が
利用可能になりました。
このファイルはヒントファイルを書く人が
(config.over がサイトでの変更のためにあるのと違って)
アーキテクチャでの変更を扱うことを想定しています。

=item *

=begin original

If your file system supports symbolic links, you can build Perl outside
of the source directory by

=end original

ファイルシステムがシンボリックリンクに対応している場合、
以下のようにして Perl をソースディレクトリの外側でビルドすることが
できます:

	mkdir perl/build/directory
	cd perl/build/directory
	sh /path/to/perl/source/Configure -Dmksymlinks ...

=begin original

This will create in perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished, you can just say

=end original

これは perl/build/directory に /path/to/perl/source にある
ファイルを指すシンボリックリンクのツリーを作成します。
元のファイルには影響はありません。
Configure が終了した後、単に以下のようにすることで:

	make all test

=begin original

and Perl will be built and tested, all in perl/build/directory.
[561]

=end original

全て perl/build/directory ディレクトリ内でで Perl が
ビルド、テストされます。[561]

=item *

=begin original

For Perl developers, several new make targets for profiling
and debugging have been added; see L<perlhack>.

=end original

Perl 開発者のために、プロファイリングやデバッグのための
新しい make のターゲットが追加されました;
L<perlhack> を参照してください。

=over 8

=item *

=begin original

Use of the F<gprof> tool to profile Perl has been documented in
L<perlhack>.  There is a make target called "perl.gprof" for
generating a gprofiled Perl executable.

=end original

Perl のプロファイリングを 行う F<gprof> ツールの使い方が
L<perlhack> に記述されました。
gprofile 化された Perl 実行ファイルを生成するための
"perl.gprof" という make ターゲットがあります。

=item *

=begin original

If you have GCC 3, there is a make target called "perl.gcov" for
creating a gcoved Perl executable for coverage analysis.  See
L<perlhack>.

=end original

GCC 3 がある場合、範囲解析のための gcov 化された Perl 実行ファイルを
生成するための "perl.gcov"という make ターゲットがあります。

=item *

=begin original

If you are on IRIX or Tru64 platforms, new profiling/debugging options
have been added; see L<perlhack> for more information about pixie and
Third Degree.

=end original

IRIX か Tru64 プラットフォームの場合は、
新しいプロファイリング/デバッギングオプションが追加されました。
pixie と Third Degree に関するさらなる情報については L<perlhack> を
参照してください。

=back

=item *

=begin original

Guidelines of how to construct minimal Perl installations have
been added to INSTALL.

=end original

最小の Perl インストールを構築するためのガイドラインが
INSTALL に追加されました。

=item *

=begin original

The Thread extension is now not built at all under ithreads
(C<Configure -Duseithreads>) because it wouldn't work anyway (the
Thread extension requires being Configured with C<-Duse5005threads>).

=end original

Thread 拡張は i スレッドの基では(C<Configure -Duseithreads>)
ビルドされなくなりました。とにかく動作しないからです
(Thread 拡張は Configure に C<-Duse5005threads> を指定する必要があります)。

=begin original

B<Note that the 5.005 threads are unsupported and deprecated: if you
have code written for the old threads you should migrate it to the
new ithreads model.>

=end original

B<5.005 のスレッドは非サポートで、非推奨であることに注意してください:
古いスレッドを使ったコードは新しい i スレッドモデルに
移るべきです.>

=item *

=begin original

The Gconvert macro ($Config{d_Gconvert}) used by perl for stringifying
floating-point numbers is now more picky about using sprintf %.*g
rules for the conversion.  Some platforms that used to use gcvt may
now resort to the slower sprintf.

=end original

浮動小数点を文字列化するための Gconvert マクロ ($Config{d_Gconvert}) は
変換に sprintf %.*g ルールを使うことに関してよりうるさくなりました。
gcvt を使えていたプラットフォームでも、より遅い sprintf を使うことに
なるものもあります。

=item *

=begin original

The obsolete method of making a special (e.g., debugging) flavor
of perl by saying

=end original

perl に特殊な(デバッグなど)機能を付けるための以下のように指定する:

	make LIBPERL=libperld.a

=begin original

has been removed. Use -DDEBUGGING instead.

=end original

古いメソッドは取り除かれました。代わりに -DDEBUGGING を使ってください。

=back

=head2 New Or Improved Platforms

(新しい、もしくは改善されたプラットフォーム)

=begin original

For the list of platforms known to support Perl,
see L<perlport/"Supported Platforms">.

=end original

Perl に対応しているとわかっているプラットフォームの一覧については、
L<perlport/"Supported Platforms"> を参照してください。

=over 4

=item *

=begin original

AIX dynamic loading should be now better supported.

=end original

AIX の動的ローディングはよりよく対応するようになりました。

=item *

=begin original

AIX should now work better with gcc, threads, and 64-bitness.  Also the
long doubles support in AIX should be better now.  See L<perlaix>.

=end original

AIX は gcc、スレッド、64-bit 化に関してよりよく動くようになりました。
また AIX での long double の対応も改善されました。
L<perlaix> を参照してください。

=item *

=begin original

AtheOS ( http://www.atheos.cx/ ) is a new platform.

=end original

AtheOS ( http://www.atheos.cx/ ) は新しいプラットフォームです。

=item *

=begin original

BeOS has been reclaimed.

=end original

BeOS で再び動作するようになりました。

=item *

=begin original

The DG/UX platform now supports 5.005-style threads.
See L<perldgux>.

=end original

DG/UX プラットフォームで 5.005-スタイルのスレッドに対応しました。
L<perldgux> を参照してください。

=item *

=begin original

The DYNIX/ptx platform (also known as dynixptx) is supported at or
near osvers 4.5.2.

=end original

DYNIX/ptx プラットフォーム(dynixptx としても知られます) は
OS バージョン 4.5.2 あたりから対応されました。

=item *

=begin original

EBCDIC platforms (z/OS (also known as OS/390), POSIX-BC, and VM/ESA)
have been regained.  Many test suite tests still fail and the
co-existence of Unicode and EBCDIC isn't quite settled, but the
situation is much better than with Perl 5.6.  See L<perlos390>,
L<perlbs2000> (for POSIX-BC), and L<perlvmesa> for more information.

=end original

EBCDIC プラットフォーム (z/OS (OS/390 としても知られます), POSIX-BC, VM/ESA)
が復活しました。多くのテストスイートテストは未だに失敗し、
Unicode と EBCDIC の共存がすっかり解決したわけではありませんが、
状況は Perl 5.6 の頃より遥かに改善しました。
さらなる情報については L<perlos390>, L<perlbs2000> (POSIX-BC), L<perlvmesa> を
参照してください。

=item *

=begin original

Building perl with -Duseithreads or -Duse5005threads now works under
HP-UX 10.20 (previously it only worked under 10.30 or later). You will
need a thread library package installed. See README.hpux. [561]

=end original

-Duseithreads または -Duse5005threads 付きの perl のビルドは
HP-UX 10.20 以前でも動作するようになりました(以前は10.30 以降でのみ
動作していました)。
スレッドライブラリパッケージのインストールが必要です。
README.hpux を参照してください。[561]

=item *

=begin original

Mac OS Classic is now supported in the mainstream source package
(MacPerl has of course been available since perl 5.004 but now the
source code bases of standard Perl and MacPerl have been synchronised)
[561]

=end original

Mac OS Classic はメインストリームソースパッケージで対応することに
なりました(perl 5.004 からの MacPerl ももちろん利用可能ですが、
標準の Perl と MacPerl のソースコードベースは同期しています)。[561]

=item *

=begin original

Mac OS X (or Darwin) should now be able to build Perl even on HFS+
filesystems.  (The case-insensitivity used to confuse the Perl build
process.)

=end original

Mac OS X(Darwin)では、HFS+ ファイルシステムでも Perl をビルドできるように
なりました。
(大文字小文字を無視するので Perl ビルドプロセスを混乱させていました。)

=item *

=begin original

NCR MP-RAS is now supported. [561]

=end original

NCR MP-RAS に対応しました。[561]

=item *

=begin original

All the NetBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.

=end original

全ての NetBSD 固有のパッチ(インストール固有のパッチを除きます)が
メインディストリビューションにマージされました。

=item *

=begin original

NetWare from Novell is now supported.  See L<perlnetware>.

=end original

Novell の NetWare に対応しました。
L<perlnetware> を参照してください。

=item *

=begin original

NonStop-UX is now supported. [561]

=end original

NonStop-UX に対応しました。[561]

=item *

=begin original

NEC SUPER-UX is now supported.

=end original

NEC SUPER-UX に対応しました。

=item *

=begin original

All the OpenBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.

=end original

全ての OpenBSD 固有のパッチ(インストール固有のパッチを除きます)が
メインディストリビューションにマージされました。

=item *

=begin original

Perl has been tested with the GNU pth userlevel thread package
( http://www.gnu.org/software/pth/pth.html ).  All thread tests
of Perl now work, but not without adding some yield()s to the tests,
so while pth (and other userlevel thread implementations) can be
considered to be "working" with Perl ithreads, keep in mind the
possible non-preemptability of the underlying thread implementation.

=end original

Perl は GNU pth ユーザーレベルスレッドパッケージ
( http://www.gnu.org/software/pth/pth.html ) でテストされました。
Perl の全てのスレッドテストは動作しましたが、
テストにいくつかの yield() を追加する必要がありました。
そのため、pth (とその他のユーザーレベルスレッド実装) は
Perl iスレッドで"動作する"と考えらえられますが、
スレッド実装に内在するノンプリエンプティブ性の可能性について
考慮してください。

=item *

=begin original

Stratus VOS is now supported using Perl's native build method
(Configure).  This is the recommended method to build Perl on
VOS.  The older methods, which build miniperl, are still
available.  See L<perlvos>. [561+]

=end original

Stratus VOS は Perl のネイティブビルド手法 (Configure) で対応されました。
これが VOS で Perl をビルドする場合の推奨される手法です。
miniperl をビルドする古い手法もまだ利用可能です。
L<perlvos> を参照してください。[561+]

=item *

=begin original

The Amdahl UTS UNIX mainframe platform is now supported. [561]

=end original

Amdahl UTS UNIX メインフレームプラットフォームに対応しました。[561]

=item *

=begin original

WinCE is now supported.  See L<perlce>.

=end original

WinCE に対応しました。L<perlce> を参照してください。

=item *

=begin original

z/OS (formerly known as OS/390, formerly known as MVS OE) now has
support for dynamic loading.  This is not selected by default,
however, you must specify -Dusedl in the arguments of Configure. [561]

=end original

z/OS (以前は OS/360 として知られ、その前は MVS OE として知られていました)は
動的ローディングに対応しました。
これはデフォルトでは選択されませんので、Configure の引数として
-Dusedl を指定する必要があります。[561]

=back

=head1 Selected Bug Fixes

(バグ修正の抜粋)

=begin original

Numerous memory leaks and uninitialized memory accesses have been
hunted down.  Most importantly, anonymous subs used to leak quite
a bit. [561]

=end original

多くのメモリリークと未初期化メモリへのアクセスが修正されました。
最重要なものとしては、無名 subs がかなりメモリリークしていました。[561]

=over 4

=item *

=begin original

The autouse pragma didn't work for Multi::Part::Function::Names.

=end original

autouse プラグマは Multi::Part::Function::Names で動作していませんでした。

=item *

=begin original

caller() could cause core dumps in certain situations.  Carp was
sometimes affected by this problem.  In particular, caller() now
returns a subroutine name of C<(unknown)> for subroutines that have
been removed from the symbol table.

=end original

caller() はある種の状況ではコアダンプを引き起こしていました。
Cart は時々この問題の影響を受けていました。
特に、caller() はシンボルテーブルから削除されたサブルーチンでは
サブルーチン名として C<(unknown)> を返すようになりました。

=item *

=begin original

chop(@list) in list context returned the characters chopped in
reverse order.  This has been reversed to be in the right order. [561]

=end original

chop(@list) をリストコンテキストで使うと、
逆順で chop した文字列を返していました。
これは正しい順序に戻されました。[561]

=item *

=begin original

Configure no longer includes the DBM libraries (dbm, gdbm, db, ndbm)
when building the Perl binary.  The only exception to this is SunOS 4.x,
which needs them. [561]

=end original

Configure は Perl バイナリをビルドするときに DBM ライブラリ
(dbm, gdbm, db, ndbm) を含めないようになりました。
唯一の例外はこれらが必要な SunOS 4.x です。[561]

=item *

=begin original

The behaviour of non-decimal but numeric string constants such as
"0x23" was platform-dependent: in some platforms that was seen as 35,
in some as 0, in some as a floating point number (don't ask).  This
was caused by Perl's using the operating system libraries in a situation
where the result of the string to number conversion is undefined: now
Perl consistently handles such strings as zero in numeric contexts.

=end original

"0x23" といった、10 進ではない数値文字列定数の振る舞いは
プラットフォーム依存でした: 35 として扱うプラットフォームもあれば、
0 として扱うプラットフォームもあり、
小数点として扱うプラットフォームもありました(聞かないで下さい)。
これは、Perl は文字列を数値に変換した結果が未定義のときに
オペレーションシステムのライブラリを使っていたからです:
Perl は一貫して数値コンテキストではこれらの文字列をゼロとして
扱うようになりました。

=item *

=begin original

Several debugger fixes: exit code now reflects the script exit code,
condition C<"0"> now treated correctly, the C<d> command now checks
line number, C<$.> no longer gets corrupted, and all debugger output
now goes correctly to the socket if RemotePort is set. [561]

=end original

いくつかのデバッガの修正: 終了コードはスクリプトの終了コードを
反映するようになりました; 条件 C<"0"> を正しく扱えるようになりました;
C<d> コマンドは行番号をチェックするようになりました;
C<$.> は壊れなくなりました;
RemotePort がセットされた場合、デバッガの全ての出力が
正しくソケットに向かうようになりました。[561]

=item *

=begin original

The debugger (perl5db.pl) has been modified to present a more
consistent commands interface, via (CommandSet=580).  perl5db.t was
also added to test the changes, and as a placeholder for further tests.

=end original

デバッガ (perl5db.pl) は (CommandSet=580) を通して
より一貫したコマンドインターフェースを持つように修正されました。
この変更をテストするためと、将来のテストのプレースホルダとして
perl5db.t が追加されました。

=begin original

See L<perldebug>.

=end original

L<perldebug> を参照してください。

=item *

=begin original

The debugger has a new C<dumpDepth> option to control the maximum
depth to which nested structures are dumped.  The C<x> command has
been extended so that C<x N EXPR> dumps out the value of I<EXPR> to a
depth of at most I<N> levels.

=end original

デバッガに、ネストした構造をダンプする場合の最大の深さを制御するための
C<dumpDepth> オプションが追加されました。
C<x> コマンドは拡張され、C<x N EXPR> とすると
I<EXPR> の値を最大 I<N> レベルの深さまでダンプ出力します。

=item *

=begin original

The debugger can now show lexical variables if you have the CPAN
module PadWalker installed.

=end original

デバッガは、CPAN モジュールである PadWalker がインストールされていると
レキシカル変数を表示できるようになりました。

=item *

=begin original

The order of DESTROYs has been made more predictable.

=end original

DESTROY の順序はより予測可能になりました。

=item *

=begin original

Perl 5.6.0 could emit spurious warnings about redefinition of
dl_error() when statically building extensions into perl.
This has been corrected. [561]

=end original

Perl 5.6.0 ではモジュールを静的に perl にビルドした場合、
dl_error() の再定義に関する偽の警告を出力することがありました。
これは修正されました。[561]

=item *

=begin original

L<dprofpp> -R didn't work.

=end original

L<dprofpp> -R は動作しませんでした。

=item *

=begin original

C<*foo{FORMAT}> now works.

=end original

C<*foo{FORMAT}> が動作するようになりました。

=item *

=begin original

Infinity is now recognized as a number.

=end original

無限を数として認識するようになりました。

=item *

=begin original

UNIVERSAL::isa no longer caches methods incorrectly.  (This broke
the Tk extension with 5.6.0.) [561]

=end original

UNIVERSAL::isa は正しくメソッドをキャッシュするようになりました。
(これが 5.6.0 の Tk 拡張を壊していました。)[561]

=item *

=begin original

Lexicals I: lexicals outside an eval "" weren't resolved
correctly inside a subroutine definition inside the eval "" if they
were not already referenced in the top level of the eval""ed code.

=end original

レキシカルその 1: eval "" の外側のレキシカルが
まだトップレベルの eval "" 化コードから参照されていない場合、
eval "" 内部のサブルーチン定義で正しく解決されていませんでした。

=item *

=begin original

Lexicals II: lexicals leaked at file scope into subroutines that
were declared before the lexicals.

=end original

レキシカルが、ファイルスコープから、レキシカルが定義される前の
サブルーチンにリークしていました。

=item *

=begin original

Lexical warnings now propagating correctly between scopes
and into C<eval "...">.

=end original

レキシカルの警告がスコープと C<eval "..."> の間で正しく
伝播するようになりました。

=item *

=begin original

C<use warnings qw(FATAL all)> did not work as intended.  This has been
corrected. [561]

=end original

C<use warnings qw(FATAL all)> は狙いどおりに動作していませんでした。
これは修正されました。[561]

=item *

=begin original

warnings::enabled() now reports the state of $^W correctly if the caller
isn't using lexical warnings. [561]

=end original

warnings::enabled() は呼び出し側がレキシカル警告を使っていない場合に
$^W の状態を正しく報告するようになりました。[561]

=item *

=begin original

Line renumbering with eval and C<#line> now works. [561]

=end original

eval と C<#line> での行番号の振り直しが動作するようになりました。[561]

=item *

=begin original

Fixed numerous memory leaks, especially in eval "".

=end original

多くのメモリリーク、特に eval "" でのメモリリークが修正されました。

=item *

=begin original

Localised tied variables no longer leak memory

=end original

tie した変数をローカル化してもメモリリークしなくなりました。

    use Tie::Hash;
    tie my %tied_hash => 'Tie::StdHash';

    ...

    # Used to leak memory every time local() was called;
    # in a loop, this added up.
    local($tied_hash{Foo}) = 1;

=item *

=begin original

Localised hash elements (and %ENV) are correctly unlocalised to not
exist, if they didn't before they were localised.

=end original

ローカル化したハッシュ要素 (と %ENV)は、
それがもともとローカル化されていなかった場合は
存在しないように非ローカル化されるようになりました。

    use Tie::Hash;
    tie my %tied_hash => 'Tie::StdHash';

    ...

    # Nothing has set the FOO element so far

    { local $tied_hash{FOO} = 'Bar' }

    # This used to print, but not now.
    print "exists!\n" if exists $tied_hash{FOO};

=begin original

As a side effect of this fix, tied hash interfaces B<must> define
the EXISTS and DELETE methods.

=end original

この修正の副作用として、tie されたハッシュインターフェースは
EXISTS と DELETE のメソッドを定義 B<しなければならない> ことに
なりました。

=item *

=begin original

mkdir() now ignores trailing slashes in the directory name,
as mandated by POSIX.

=end original

mkdir() は POSIX で要求されているように、ディレクトリ名の
末尾のスラッシュを無視するようになりました。

=item *

=begin original

Some versions of glibc have a broken modfl().  This affects builds
with C<-Duselongdouble>.  This version of Perl detects this brokenness
and has a workaround for it.  The glibc release 2.2.2 is known to have
fixed the modfl() bug.

=end original

glibc の中には modfl() が壊れているバージョンがあります。
これは C<-Duselongdouble> でビルドしたときに影響を受けます。
このバージョンの Perl はこの問題を検出し、回避策をとります。
glibc 2.2.2 リリースは modfl() バグが修正されていると
わかっています。

=item *

=begin original

Modulus of unsigned numbers now works (4063328477 % 65535 used to
return 27406, instead of 27047). [561]

=end original

符号なし数の剰余が動作するようになりました
(4063328477 % 65535 は 27406 を返していましたが、27047 を
返すようになりました)。[561]

=item *

=begin original

Some "not a number" warnings introduced in 5.6.0 eliminated to be
more compatible with 5.005.  Infinity is now recognised as a number. [561]

=end original

5.6.0 でのいくつかの "not a number" 警告は 5.005 との互換性を
高めるために除去されました。
無限は数値として認識されるようになりました。[561]

=item *

=begin original

Numeric conversions did not recognize changes in the string value
properly in certain circumstances. [561]

=end original

数値変換は特定の状況では文字列値の変更を正しく
認識できていませんでした。[561]

=item *

=begin original

Attributes (such as :shared) didn't work with our().

=end original

(:shared のような) 属性が our() で動作していませんでした。

=item *

=begin original

our() variables will not cause bogus "Variable will not stay shared"
warnings. [561]

=end original

our() 変数で余分な "Variable will not stay shared" 警告を
出さなくなりました。[561]

=item *

=begin original

"our" variables of the same name declared in two sibling blocks
resulted in bogus warnings about "redeclaration" of the variables.
The problem has been corrected. [561]

=end original

並んだ二つのブロックで同じ名前で宣言されている
"our" 変数があるとこの変数に対する余分な"再定義"警告が出ていました。
問題は修正されました。[561]

=item *

=begin original

pack "Z" now correctly terminates the string with "\0".

=end original

pack "Z" は正しく文字列を "\0" で終端するようになりました。

=item *

=begin original

Fix password routines which in some shadow password platforms
(e.g. HP-UX) caused getpwent() to return every other entry.

=end original

シャドウパスワードを使っているプラットフォームのいくつか
(HP-UX など)において getpwent() が別のエントリを返していた
パスワードルーチンが修正されました。

=item *

=begin original

The PERL5OPT environment variable (for passing command line arguments
to Perl) didn't work for more than a single group of options. [561]

=end original

(Perl にコマンドライン引数を渡すための) PERL5OPT 環境変数が
複数の組のオプションを渡せていませんでした。[561]

=item *

=begin original

PERL5OPT with embedded spaces didn't work.

=end original

PERL5OPT が組み込み空間では動作していませんでした。

=item *

=begin original

printf() no longer resets the numeric locale to "C".

=end original

printf() は数値ロケールを "C" にリセットしなくなりました。

=item *

=begin original

C<qw(a\\b)> now parses correctly as C<'a\\b'>: that is, as three
characters, not four. [561]

=end original

C<qw(a\\b)> は正しく C<'a\\b'> とパースされるようになりました:
これは 4 文字ではなく 3 文字です。[561]

=item *

=begin original

pos() did not return the correct value within s///ge in earlier
versions.  This is now handled correctly. [561]

=end original

以前のバージョンでは s///ge の中では pos() が正しい値を
返していませんでした。正しく扱えるようになりました。[561]

=item *

=begin original

Printing quads (64-bit integers) with printf/sprintf now works
without the q L ll prefixes (assuming you are on a quad-capable platform).

=end original

(64 bit 整数対応のプラットフォームでは)
printf/sprintf において、q L ll 接頭辞をつけなくても
64 bit 整数を表示できるようになりました。

=item *

=begin original

Regular expressions on references and overloaded scalars now work. [561+]

=end original

リファレンスとオーバーロードされた正規表現が動作するようになりました。[561+]

=item *

=begin original

Right-hand side magic (GMAGIC) could in many cases such as string
concatenation be invoked too many times.

=end original

右辺値マジック (GMAGIC) は、文字列連結などの多くの場合に
多く呼び出され過ぎていました。

=item *

=begin original

scalar() now forces scalar context even when used in void context.

=end original

scalar() は無効コンテキストで使われてもスカラコンテキストを
強制するようになりました。

=item *

=begin original

SOCKS support is now much more robust.

=end original

SOCKS 対応は遥かに頑強になりました。

=item *

=begin original

sort() arguments are now compiled in the right wantarray context
(they were accidentally using the context of the sort() itself).
The comparison block is now run in scalar context, and the arguments
to be sorted are always provided list context. [561]

=end original

sort() の引数は正しい wantarray コンテキストでコンパイルされるように
なりました(図らずも sort() 自身のコンテキストを使うようになっていました)。
比較ブロックはスカラコンテキストで実行され、
ソートされる引数は常にリストコンテキストで提供されます。[561]

=item *

=begin original

Changed the POSIX character class C<[[:space:]]> to include the (very
rarely used) vertical tab character.  Added a new POSIX-ish character
class C<[[:blank:]]> which stands for horizontal whitespace
(currently, the space and the tab).

=end original

POSIX 文字クラス C<[[:space:]]> に(めったに使われない)垂直タブ文字を
含むように変更されました。水平空白(現在のところ、空白とタブ)を示す
新しい POSIX 風文字クラスである C<[[:blank:]]> が追加されました。

=item *

=begin original

The tainting behaviour of sprintf() has been rationalized.  It does
not taint the result of floating point formats anymore, making the
behaviour consistent with that of string interpolation. [561]

=end original

sprintf() の汚染された場合の振る舞いが合理的なものになりました。
浮動小数点フォーマットの結果はもはや汚染されず、
文字列の変換の場合と一貫性のある振る舞いをするようになりました。[561]

=item *

=begin original

Some cases of inconsistent taint propagation (such as within hash
values) have been fixed.

=end original

(ハッシュの値のような)一貫性のない汚染の伝播が修正されました。

=item *

=begin original

The RE engine found in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These are now handled better. [561]

=end original

Perl 5.6.0 の RE エンジンは図らずもある種の単純なパターンマッチで
悲観的になっていました。これらはよりよく扱われるようになりました。[561]

=item *

=begin original

Regular expression debug output (whether through C<use re 'debug'>
or via C<-Dr>) now looks better. [561]

=end original

(C<use re 'debug'> か C<-Dr> かによらず)正規表現デバッグ出力は
よりよく見えるようになりました。[561]

=item *

=begin original

Multi-line matches like C<"a\nxb\n" =~ /(?!\A)x/m> were flawed.  The
bug has been fixed. [561]

=end original

C<"a\nxb\n" =~ /(?!\A)x/m> のような複数行マッチに不具合がありました。
このバグは修正されました。[561]

=item *

=begin original

Use of $& could trigger a core dump under some situations.  This
is now avoided. [561]

=end original

$& を使うと状況によってはコアダンプを引き起こすことがありました。
これは修正されました。[561]

=item *

=begin original

The regular expression captured submatches ($1, $2, ...) are now
more consistently unset if the match fails, instead of leaving false
data lying around in them. [561]

=end original

正規表現が捕らえた部分マッチング($1, $2, ...)は、マッチングが
失敗したとき、間違ったデータが入っていましたが、
より一貫してリセットされるようになりました。[561]

=item *

=begin original

readline() on files opened in "slurp" mode could return an extra
"" (blank line) at the end in certain situations.  This has been
corrected. [561]

=end original

"slurp" モードでオープンしたファイルに対する readline() が、
ある種の状況では余分の "" (空行) を返すことがありました。
これは修正されました。[561]

=item *

=begin original

Autovivification of symbolic references of special variables described
in L<perlvar> (as in C<${$num}>) was accidentally disabled.  This works
again now. [561]

=end original

(C<${$num}> での) L<perlvar> に記述された特殊変数の
シンボリックリファレンスの自動活性化が図らずも無効になっていました。
これは再び動作するようになりました。[561]

=item *

=begin original

Sys::Syslog ignored the C<LOG_AUTH> constant.

=end original

Sys::Syslog は C<LOG_AUTH> 定数を無視していました。

=item *

=begin original

$AUTOLOAD, sort(), lock(), and spawning subprocesses
in multiple threads simultaneously are now thread-safe.

=end original

マルチスレッドでの同時に $AUTOLOAD, sort(), lock() およびサブプロセスの
起動を行ってもスレッドセーフになりました。

=item *

=begin original

Tie::Array's SPLICE method was broken.

=end original

Tie::Array の SPLICE メソッドは壊れていました。

=item *

=begin original

Allow a read-only string on the left-hand side of a non-modifying tr///.

=end original

修正されない tr/// の左側に読み込み専用文字列を置くことが
できるようになりました。

=item *

=begin original

If C<STDERR> is tied, warnings caused by C<warn> and C<die> now
correctly pass to it.

=end original

C<STDERR> を tie したとき、C<warn> と C<die> による警告が
正しく渡されるようになりました。

=item *

=begin original

Several Unicode fixes.

=end original

いくつかの Unicode 関係の修正が行われました。

=over 8

=item *

=begin original

BOMs (byte order marks) at the beginning of Perl files
(scripts, modules) should now be transparently skipped.
UTF-16 and UCS-2 encoded Perl files should now be read correctly.

=end original

Perl ファイル(スクリプト、モジュール) が BOM(byte order marks) で
始まっていても透過的にスキップするようになりました。
UTF-16 と UCS-2 でエンコードされた Perl ファイルも正しく
読み込めるようなりました。

=item *

=begin original

The character tables have been updated to Unicode 3.2.0.

=end original

文字テーブルは Unicode 3.2.0 に更新されました。

=item *

=begin original

Comparing with utf8 data does not magically upgrade non-utf8 data
into utf8.  (This was a problem for example if you were mixing data
from I/O and Unicode data: your output might have got magically encoded
as UTF-8.)

=end original

utf8 データの比較は、非 utf8 データを utf8 に自動的にアップグレード
していませんでした。(これは例えば I/O からのデータと Unicode データを
混ぜるときに問題になります: 出力は自動的に UTF-8 としてエンコード
されているかもしれません。)

=item *

=begin original

Generating illegal Unicode code points such as U+FFFE, or the UTF-16
surrogates, now also generates an optional warning.

=end original

U+FFFE, や UTF-16 サロゲートのような、不正な Unicode コードポイントの
生成にオプションの警告を出力するようになりました。

=item *

=begin original

C<IsAlnum>, C<IsAlpha>, and C<IsWord> now match titlecase.

=end original

C<IsAlnum>, C<IsAlpha>, and C<IsWord> がtitlecase にマッチするように
なりました。

=item *

=begin original

Concatenation with the C<.> operator or via variable interpolation,
C<eq>, C<substr>, C<reverse>, C<quotemeta>, the C<x> operator,
substitution with C<s///>, single-quoted UTF-8, should now work.

=end original

変数変換、C<eq>, C<substr>, C<reverse>, C<quotemeta>, C<x> 演算子、
C<s///> による変換、シングルクオートされた UTF-8 経由での
C<.> 演算子による連結が動作するようになりました。

=item *

=begin original

The C<tr///> operator now works.  Note that the C<tr///CU>
functionality has been removed (but see pack('U0', ...)).

=end original

C<tr///> 演算子が動作するようになりました。
C<tr///CU> の機能は取り除かれました(pack('U0', ...) を参照してください)。

=item *

=begin original

C<eval "v200"> now works.

=end original

C<eval "v200"> が動作するようになりました。

=item *

=begin original

Perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spurious warnings.
This has been corrected. [561]

=end original

Perl 5.6.0 は m/\x{ab}/ を間違って解釈し、間違った警告を出していました。
これは修正されました。[561]

=item *

=begin original

Zero entries were missing from the Unicode classes such as C<IsDigit>.

=end original

C<IsDigit> のような Unicode クラスにゼロエントリがありませんでした。

=back

=item *

=begin original

Large unsigned numbers (those above 2**31) could sometimes lose their
unsignedness, causing bogus results in arithmetic operations. [561]

=end original

大きな符号なし数(2**31 以上) が、符号なしであるという情報が
失われてしまい、数値演算子でおかしな結果を引き起こすことがありました。[561]

=item *

=begin original

The Perl parser has been stress tested using both random input and
Markov chain input and the few found crashes and lockups have been
fixed.

=end original

Perl パーサはランダム入力とマルコフ連鎖入力の両方を使った
ストレステストを受け、発見されたいくつかのクラッシュとハングアップが
修正されました。

=back

=head2 Platform Specific Changes and Fixes

(プラットフォーム固有の変更と修正点)

=over 4

=item *

BSDI 4.*

=begin original

Perl now works on post-4.0 BSD/OSes.

=end original

Perl は 4.0 以降の BSD/OS でも動作するようになりました。

=item *

All BSDs

=begin original

Setting C<$0> now works (as much as possible; see L<perlvar> for details).

=end original

C<$0> が動作するようになりました(できるだけは; 詳細については
L<perlvar>を参照してください)。

=item *

Cygwin

=begin original

Numerous updates; currently synchronised with Cygwin 1.3.10.

=end original

大量の更新が行われました; 現在のところ Cygwin 1.3.10 と同期しています。

=item *

=begin original

Previously DYNIX/ptx had problems in its Configure probe for non-blocking I/O.

=end original

以前は DYNIX/ptx は Configure による 非ブロック I/O の検出に問題がありました。

=item *

EPOC

=begin original

EPOC now better supported.  See README.epoc. [561]

=end original

EPOC 対応が改善されました。 README.epoc を参照してくだっさい。[561]

=item *

FreeBSD 3.*

=begin original

Perl now works on post-3.0 FreeBSDs.

=end original

3.0 以降の FreeBSD でも動作するようになりました。

=item *

HP-UX

=begin original

README.hpux updated; C<Configure -Duse64bitall> now works;
now uses HP-UX malloc instead of Perl malloc.

=end original

README.hpux が更新されました; C<Configure -Duse64bitall> が
動作するようになりました; Perl malloc ではなく HP-UX malloc を
使うようになりました。

=item *

IRIX

=begin original

Numerous compilation flag and hint enhancements; accidental mixing
of 32-bit and 64-bit libraries (a doomed attempt) made much harder.

=end original

大量のコンパイルフラグとヒントが拡張されました;
図らずも 32-bit と 64-bit のライブラリが混ざっていた(破滅的な試みです)のが
より強固になりました。

=item *

Linux

=over 8

=item *

=begin original

Long doubles should now work (see INSTALL). [561]

=end original

long double が動作するようになりました (INSTALL を参照してください)。[561]

=item *

=begin original

Linux previously had problems related to sockaddrlen when using
accept(), recvfrom() (in Perl: recv()), getpeername(), and
getsockname().

=end original

Linux では accept(), recvfrom() (Perl での: recv()), getpeername(),
getsockname() を使うときに sockaddrlen に関する問題がありました。

=back

=item *

Mac OS Classic

=begin original

Compilation of the standard Perl distribution in Mac OS Classic should
now work if you have the Metrowerks development environment and the
missing Mac-specific toolkit bits.  Contact the macperl mailing list
for details.

=end original

標準 Perl ディストリビューションの Mac OS Classic での
コンパイルは Metrowerks 開発環境があって、
Mac 固有のツールキットがなくても行えるようになりました。
詳細は maclperl メーリングリストに接触してください。

=item *

MPE/iX

=begin original

MPE/iX update after Perl 5.6.0.  See README.mpeix. [561]

=end original

MPE/iX は Perl 5.6.0 から更新されました。README.mpeix を
参照してください。[561]

=item *

=begin original

NetBSD/threads: try installing the GNU pth (should be in the
packages collection, or http://www.gnu.org/software/pth/),
and Configure with -Duseithreads.

=end original

NetBSD/threads: GNU pth をインストール(パッケージコレクションからか
http://www.gnu.org/software/pth/ )して、
Configure に -Duseithreads を指定してください。
=item *

NetBSD/sparc

=begin original

Perl now works on NetBSD/sparc.

=end original

Perl は NetBSD/sparc で動作するようになりました。

=item *

OS/2

=begin original

Now works with usethreads (see INSTALL). [561]

=end original

usethreads で動作するようになりました (INSTALL を参照してください)。[561]

=item *

Solaris

=begin original

64-bitness using the Sun Workshop compiler now works.

=end original

Sun Workshop コンパイラを使った 64-bit 化が動作するようになりました。

=item *

Stratus VOS

=begin original

The native build method requires at least VOS Release 14.5.0
and GNU C++/GNU Tools 2.0.1 or later.  The Perl pack function
now maps overflowed values to +infinity and underflowed values
to -infinity.

=end original

ネイティブビルドメソッドでは最低 VOS リリース 14.5.0 と
GNU C++/GNU Tools 2.0.1 以降が必要です。
Perl の pack 関数はオーバーフローした値を +infinity に、
アンダーフローした値を -infinity に割り当てるようになりました。

=item *

Tru64 (aka Digital UNIX, aka DEC OSF/1)

=begin original

The operating system version letter now recorded in $Config{osvers}.
Allow compiling with gcc (previously explicitly forbidden).  Compiling
with gcc still not recommended because buggy code results, even with
gcc 2.95.2.

=end original

オペレーティングシステムバージョン文字が $Config{osvers} に
記録されるようになりました。
gcc でコンパイルできるようになりました (以前は明示的に禁止されていました)。
バグったコードが出力されるので gcc でのコンパイルは
たとえ gcc 2.95.2 でも未だ薦められません。

=item *

Unicos

=begin original

Fixed various alignment problems that lead into core dumps either
during build or later; no longer dies on math errors at runtime;
now using full quad integers (64 bits), previously was using
only 46 bit integers for speed.

=end original

ビルド時やその後にコアダンプを引き起こしていた
さまざまなアライメント問題を修正しました;
実行時の演算エラーで die しなくなりました;
完全な 4 バイト整数 (64 bits) を使うようになりました。
以前は速度のために 46 bit だけを使っていました。

=item *

VMS

=begin original

See L</"Socket Extension Dynamic in VMS"> and L</"IEEE-format Floating Point
Default on OpenVMS Alpha"> for important changes not otherwise listed here.

=end original

ここに上げられていない重要な変更については
L</"Socket Extension Dynamic in VMS"> と L</"IEEE-format Floating Point
Default on OpenVMS Alpha"> を参照してください。

=begin original

chdir() now works better despite a CRT bug; now works with MULTIPLICITY
(see INSTALL); now works with Perl's malloc.

=end original

chdir() は CRT バグにも関わらずよりよく動作するようになりました;
MULTIPLICITY で動作するようになりました(INSTALL を参照してください);
Perl の malloc で動作するようになりました。

=begin original

The tainting of C<%ENV> elements via C<keys> or C<values> was previously
unimplemented.  It now works as documented.

=end original

C<keys> や C<values> による C<%ENV> 要素の汚染は以前は
実装されていませんでした。
現在はドキュメント通りに動作するようになりました。

=begin original

The C<waitpid> emulation has been improved.  The worst bug (now fixed)
was that a pid of -1 would cause a wildcard search of all processes on
the system.

=end original

C<waitpid> エミュレーションが改良されました。
(修正された)最悪のバグは pid に -1 を指定すると
システムの全てのプロセスのワイルドカード検索を引き起こしていたことでした。

=begin original

POSIX-style signals are now emulated much better on VMS versions prior
to 7.0.

=end original

POSIX-スタイルのシグナルは VMS バージョン 7.0 以前で
はるかによくエミュレートされるようになりました。

=begin original

The C<system> function and backticks operator have improved
functionality and better error handling. [561]

=end original

C<system> 関数とバッククォート演算子は
機能が改善し、エラー処理もよりよくなりました。[561]

=begin original

File access tests now use current process privileges rather than the
user's default privileges, which could sometimes result in a mismatch
between reported access and actual access.  This improvement is only
available on VMS v6.0 and later.

=end original

ファイルアクセステストはユーザーのデフォルト権限ではなく
現在のプロセスの権限で行われるようになりました。
これにより、以前は報告されるアクセスと実際のアクセスに
時々不整合が起きていました。
この改良は VMS v6.0 以降でのみ利用可能です。

=begin original

There is a new C<kill> implementation based on C<sys$sigprc> that allows
older VMS systems (pre-7.0) to use C<kill> to send signals rather than
simply force exit.  This implementation also allows later systems to
call C<kill> from within a signal handler.

=end original

古い VMS システム (7.0 以前) で C<kill> を単に強制的に終了させるのではなく
シグナルを送ることができるようになる、
C<sys$sigprc> を基とした新しい C<kill> が実装されました。
この実装より、最近のシステムでシグナルハンドラの中で
C<kill> を使えるようにもなりました。

=begin original

Iterative logical name translations are now limited to 10 iterations in
imitation of SHOW LOGICAL and other OpenVMS facilities.

=end original

繰り返しされる論理名変換 は SHOW LOGICAL とその他の OpenVMS 機能の
制限により、10 回の変換に制限されるようになりました。

=item *

Windows

=over 8

=item *

=begin original

Signal handling now works better than it used to.  It is now implemented
using a Windows message loop, and is therefore less prone to random
crashes.

=end original

シグナルの扱いがよりよく動作するようになりました。
Windows のメッセージループを使って実装されたため、
ランダムなクラッシュが発生しにくくなりました。

=item *

=begin original

fork() emulation is now more robust, but still continues to have a few
esoteric bugs and caveats.  See L<perlfork> for details. [561+]

=end original

fork() エミュレーションはより頑強になりましたが、
未だにいくつか難解なバグと欠点があります。
詳細については L<perlfork> を参照してください。[561+]

=item *

=begin original

A failed (pseudo)fork now returns undef and sets errno to EAGAIN. [561]

=end original

(擬似)fork に失敗すると、undef を返し、errno に EAGAIN を
セットするようになりました。[561]

=item *

=begin original

The following modules now work on Windows:

=end original

以下のモジュールが Windows で動作するようになりました。

    ExtUtils::Embed         [561]
    IO::Pipe
    IO::Poll
    Net::Ping

=item *

=begin original

IO::File::new_tmpfile() is no longer limited to 32767 invocations
per-process.

=end original

IO::File::new_tmpfile() はもはやプロセス毎に 32767 回の起動に制限
されなくなりました。

=item *

=begin original

Better chdir() return value for a non-existent directory.

=end original

存在しないディレクトリへの chdir() の返り値が改善されました。

=item *

=begin original

Compiling perl using the 64-bit Platform SDK tools is now supported.

=end original

64-bit プラットフォーム SDK を使った Perl のコンパイルに
対応しました。

=item *

=begin original

The Win32::SetChildShowWindow() builtin can be used to control the
visibility of windows created by child processes.  See L<Win32> for
details.

=end original

組み込みの Win32::SetChildShowWindow() が、子プロセスによって
作成されたウィンドウの可視性を制御するために利用可能になりました。
詳細については L<Win32> を参照してください。

=item *

=begin original

Non-blocking waits for child processes (or pseudo-processes) are
supported via C<waitpid($pid, &POSIX::WNOHANG)>.

=end original

子プロセス(または 擬似プロセス)のための非ブロックウェイトが
C<waitpid($pid, &POSIX::WNOHANG)> で対応されました。

=item *

=begin original

The behavior of system() with multiple arguments has been rationalized.
Each unquoted argument will be automatically quoted to protect whitespace,
and any existing whitespace in the arguments will be preserved.  This
improves the portability of system(@args) by avoiding the need for
Windows C<cmd> shell specific quoting in perl programs.

=end original

system() に複数の引数を与えたときの振る舞いが合理的になりました。
クォートされていない引数は空白を保持するために自動的にクォートされ、
引数内の全ての空白は保存されます。
この改良により、Windows の C<cmd> シェル固有のクォートを
perl プログラムでする必要がなくなるので、
system(@args) の移植性が改善します。

=begin original

Note that this means that some scripts that may have relied on earlier
buggy behavior may no longer work correctly.  For example,
C<system("nmake /nologo", @args)> will now attempt to run the file
C<nmake /nologo> and will fail when such a file isn't found.
On the other hand, perl will now execute code such as
C<system("c:/Program Files/MyApp/foo.exe", @args)> correctly.

=end original

以前のバグっぽい振る舞いに依存したスクリプトがもはや正しく
動作しなくなることに注意してください。
例えば、C<system("nmake /nologo", @args)> は、
ファイル C<nmake /nologo> を実行しようとして、ファイルが見つからないので
失敗します。
一方、perl は C<system("c:/Program Files/MyApp/foo.exe", @args)> といった
コードを正しく実行できるようになります。

=item *

=begin original

The perl header files no longer suppress common warnings from the
Microsoft Visual C++ compiler.  This means that additional warnings may
now show up when compiling XS code.

=end original

perl のヘッダファイルは Microsoft Visual C++ コンパイラからの
共通の警告を抑制しなくなりました。
これにより XS コードをコンパイルするときに追加の警告が
出力されるかもしれません。

=item *

=begin original

Borland C++ v5.5 is now a supported compiler that can build Perl.
However, the generated binaries continue to be incompatible with those
generated by the other supported compilers (GCC and Visual C++). [561]

=end original

Borland C++ v5.5 のコンパイラを使っての Perl のビルドに対応しました。
しかし、作成されたバイナリはその他の対応コンパイラ(GCC と Visual C++)で
作成したものと互換性がありません。[561]

=item *

=begin original

Duping socket handles with open(F, ">&MYSOCK") now works under Windows 9x.
[561]

=end original

open(F, ">&MYSOCK") でのソケットハンドルの複製が
Windows 9x で動作するようになりました。[561]

=item *

=begin original

Current directory entries in %ENV are now correctly propagated to child
processes. [561]

=end original

%ENV のカレントディレクトリのエントリが子プロセスに正しく伝播するように
なりました。[561]

=item *

=begin original

New %ENV entries now propagate to subprocesses. [561]

=end original

新しい %env エントリがサブプロセスに伝播するようになりました。[561]

=item *

=begin original

Win32::GetCwd() correctly returns C:\ instead of C: when at the drive root.
Other bugs in chdir() and Cwd::cwd() have also been fixed. [561]

=end original

ドライブのルートでは、Win32::GetCwd() は C: ではなく正しく C:\ を
返すようになりました。chdir() と Cwd::cwd() のその他のバグも
修正されました。[561]

=item *

=begin original

The makefiles now default to the features enabled in ActiveState ActivePerl
(a popular Win32 binary distribution). [561]

=end original

ActiveState ActivePerl (有名な Win32 バイナリディストリビューション)
で有効になった機能が makefile でデフォルトになりました。[561]

=item *

=begin original

HTML files will now be installed in c:\perl\html instead of
c:\perl\lib\pod\html

=end original

HTML ファイルは c:\perl\lib\pod\html ではなく c:\perl\html に
インストールされるようになりました。

=item *

=begin original

REG_EXPAND_SZ keys are now allowed in registry settings used by perl. [561]

=end original

REG_EXPAND_SZ キーが perl で使われるレジストリ設定で有効になりました。[561]

=item *

=begin original

Can now send() from all threads, not just the first one. [561]

=end original

send() が、スレッドの最初ではなく、全てのスレッドから使えるようになりました。

=item *

=begin original

ExtUtils::MakeMaker now uses $ENV{LIB} to search for libraries. [561]

=end original

ExtUtils::MakeMaker がライブラリの検索に $ENV{LIB} を使うようになりました。

=item *

=begin original

Less stack reserved per thread so that more threads can run
concurrently. (Still 16M per thread.) [561]

=end original

スレッド毎に確保するスタック量が少なくなったので、
より多くのスレッドを同時に実行できるようになりました。
(未だスレッド当たり 16M です。)[561]

=item *

=begin original

C<< File::Spec->tmpdir() >> now prefers C:/temp over /tmp
(works better when perl is running as service).

=end original

C<< File::Spec->tmpdir() >> が /tmp ではなく C:/temp を
返すようになりました(perl がサービスとして実行されるときに
よりよく動作します)。

=item *

=begin original

Better UNC path handling under ithreads. [561]

=end original

iスレッドでの UNC パスの扱いが改善されました。[561]

=item *

=begin original

wait(), waitpid(), and backticks now return the correct exit status
under Windows 9x. [561]

=end original

wait(), waitpid(), 逆クォートが Windows 9x で正しい終了コードを
返すようになりました。

=item *

=begin original

A socket handle leak in accept() has been fixed. [561]

=end original

accept() のソケットハンドルリークが修正されました。[561]

=back

=back

=head1 New or Changed Diagnostics

(新しい、もしくは変更された診断メッセージ)

=begin original

Please see L<perldiag> for more details.

=end original

さらなる詳細については L<perldiag> を参照してください。

=over 4

=item *

=begin original

Ambiguous range in the transliteration operator (like a-z-9) now
gives a warning.

=end original

文字変換演算子での (a-z-9 のような) 不明瞭な範囲指定は
警告を出すようになりました。

=item *

=begin original

chdir("") and chdir(undef) now give a deprecation warning because they
cause a possible unintentional chdir to the home directory.
Say chdir() if you really mean that.

=end original

chdir("") と chdir(undef) は非推奨の警告を出すようになりました。
ホームディレクトリへの意図的でないディレクトリ変更が
起きることがあるからです。
本当に意味していることをするには chdir() としてください。

=item *

=begin original

Two new debugging options have been added: if you have compiled your
Perl with debugging, you can use the -DT [561] and -DR options to trace
tokenising and to add reference counts to displaying variables,
respectively.

=end original

2 つの新しいデバッグオプションが追加されました:
Perl をデバッグ機能つきでコンパイルした場合、
トークン化をトレースする -DT [561] オプションと
変数を表示するときにリファレンスカウントを表示する
-DR オプションが追加されます。

=item *

=begin original

The lexical warnings category "deprecated" is no longer a sub-category
of the "syntax" category. It is now a top-level category in its own
right.

=end original

レキシカル警告のカテゴリである "deprecated" はもはや "syntax" カテゴリの
サブカテゴリではなくなりました。
トップレベルのカテゴリとなりました。

=item *

=begin original

Unadorned dump() will now give a warning suggesting to
use explicit CORE::dump() if that's what really is meant.

=end original

修飾のない dump() は本当にそれが意味していることなら
明示的に CORE::dump() を使うように提案する警告を出します。

=item *

=begin original

The "Unrecognized escape" warning has been extended to include C<\8>,
C<\9>, and C<\_>.  There is no need to escape any of the C<\w> characters.

=end original

"Unrecognized escape" 警告が C<\8>, C<\9>, C<\_> を含むように拡張されました。
C<\w> 文字をエスケープする必要はありません。

=item *

=begin original

All regular expression compilation error messages are now hopefully
easier to understand both because the error message now comes before
the failed regex and because the point of failure is now clearly
marked by a C<E<lt>-- HERE> marker.

=end original

全ての正規表現コンパイルエラーメッセージは
より理解しやすくなりました。
エラーメッセージは regex に失敗する前に出力されるようになり、
失敗した場所が明確に C<E<lt>-- HERE> マーカーで示されるようになりました。

=item *

=begin original

Various I/O (and socket) functions like binmode(), close(), and so
forth now more consistently warn if they are used illogically either
on a yet unopened or on an already closed filehandle (or socket).

=end original

binmode() や close() のようなさまざまな I/O (とソケット) 関数は、
まだオープンされていないか既にクローズされているファイルハンドル
(またはソケット)に対して非論理的に使われた場合に、
より一貫した警告を出すようになりました。

=item *

=begin original

Using lstat() on a filehandle now gives a warning.  (It's a non-sensical
thing to do.)

=end original

ファイルハンドルに対する lstat() は警告を出すようになりました。
(これはしても意味のないことです)。

=item *

=begin original

The C<-M> and C<-m> options now warn if you didn't supply the module name.

=end original

C<-M> と C<-m> のオプションはモジュール名が指定されなかったときに
警告を出すようになりました。

=item *

=begin original

If you in C<use> specify a required minimum version, modules matching
the name and but not defining a $VERSION will cause a fatal failure.

=end original

C<use> に必要最低バージョンを指定した場合、
名前が一致するけれども $VERSION が定義されていないモジュールは
致命的エラーとなります。

=item *

=begin original

Using negative offset for vec() in lvalue context is now a warnable offense.

=end original

左辺値コンテキストで vec() に負数のオフセットを指定することは
警告を発生させます。

=item *

=begin original

Odd number of arguments to overload::constant now elicits a warning.

=end original

overload::constant に半端な数の引数を与えると警告を出すようになりました。

=item *

=begin original

Odd number of elements in anonymous hash now elicits a warning.

=end original

無名ハッシュに半端な数の引数を与えると警告を出すようになりました。

=item *

=begin original

The various "opened only for", "on closed", "never opened" warnings
drop the C<main::> prefix for filehandles in the C<main> package,
for example C<STDIN> instead of C<main::STDIN>.

=end original

さまざまな "opened only for", "on closed", "never opened" 警告では、
C<main> パッケージ内でファイルハンドルに C<main::> をつけなくなりました。
例えば C<main::STDIN> ではなく C<STDIN> となります。

=item *

=begin original

Subroutine prototypes are now checked more carefully, you may
get warnings for example if you have used non-prototype characters.

=end original

サブルーチンのプロトタイプはより慎重にチェックされ、
プロトタイプでない文字を使うなどすると警告が出ます。

=item *

=begin original

If an attempt to use a (non-blessed) reference as an array index
is made, a warning is given.

=end original

(bless されていない)リファレンスを配列のインデックスとして使おうとすると
警告が出ます。

=item *

=begin original

C<push @a;> and C<unshift @a;> (with no values to push or unshift)
now give a warning.  This may be a problem for generated and evaled
code.

=end original

C<push @a;> と C<unshift @a;> (push したり unshift したりする値がない)
は警告が出るようになりました。
これは生成されて eval されたコードで問題になるかもしれません。

=item *

=begin original

If you try to L<perlfunc/pack> a number less than 0 or larger than 255
using the C<"C"> format you will get an optional warning.  Similarly
for the C<"c"> format and a number less than -128 or more than 127.

=end original

L<perlfunc/pack> で、C<"C"> フォーマットに 0 より小さい値や
255 より大きい値を指定しようとするとオプションの警告が出ます。
C<"c"> フォーマットに -128 より小さい値や 127 より大きい値を
指定しようとした場合も同様です。

=item *

=begin original

pack C<P> format now demands an explicit size.

=end original

pack の C<P> フォーマットは明示的なサイズを要求するようになりました。

=item *

=begin original

unpack C<w> now warns of unterminated compressed integers.

=end original

unpack の C<w> は終端していない圧縮された整数の警告を出すようになりました。

=item *

=begin original

Warnings relating to the use of PerlIO have been added.

=end original

PerlIO の使用に関連する警告が追加されました。

=item *

=begin original

Certain regex modifiers such as C<(?o)> make sense only if applied to
the entire regex.  You will get an optional warning if you try to do
otherwise.

=end original

C<(?o)> のようないくつかの正規表現修飾子は、
正規表現全体に適用される場合にのみ意味を持ちます。
そうでない場合、オプションの警告が出ます。

=item *

=begin original

Variable length lookbehind has not yet been implemented, trying to
use it will tell that.

=end original

可変長の戻り読み(lookbehind) はまだ実装されていませんので、
これをしようとするとそう知らせます。

=item *

=begin original

Using arrays or hashes as references (e.g. C<< %foo->{bar} >>
has been deprecated for a while.  Now you will get an optional warning.

=end original

配列やハッシュをリファレンスとして使うこと(C<< %foo->{bar} >>)は
しばらくの間非推奨となっています。オプションの警告を出すようになりました。

=item *

=begin original

Warnings relating to the use of the new restricted hashes feature
have been added.

=end original

新しい制限ハッシュ機能に関連する警告が追加されました。

=item *

=begin original

Self-ties of arrays and hashes are not supported and fatal errors
will happen even at an attempt to do so.

=end original

配列とハッシュの自己 tie はサポート外であり、
そうしようとすると致命的エラーとなります。

=item *

=begin original

Using C<sort> in scalar context now issues an optional warning.
This didn't do anything useful, as the sort was not performed.

=end original

C<sort> をスカラコンテキストで使うとオプションの警告を出すようになりました。
これは、ソートが行われないので全く使い道がありません。

=item *

=begin original

Using the /g modifier in split() is meaningless and will cause a warning.

=end original

split() で /g 修飾子を使うのは意味がないので警告が出ます。

=item *

=begin original

Using splice() past the end of an array now causes a warning.

=end original

splice() を配列の終わりを過ぎて使うと警告が出るようになりました。

=item *

=begin original

Malformed Unicode encodings (UTF-8 and UTF-16) cause a lot of warnings,
ad doestrying to use UTF-16 surrogates (which are unimplemented).

=end original

不正な Unicode エンコーディング(UTF-8 と UTF-16) は、
(まだ実装されていない) UTF-16 サロゲートを使おうとして
多くの警告を引き起こします。

=item *

=begin original

Trying to use Unicode characters on an I/O stream without marking the
stream's encoding (using open() or binmode()) will cause "Wide character"
warnings.

=end original

I/O ストリームでストリームのエンコーディングを (open() か binmode()を使って)
指定せずに Unicode を使おうとすると "Wide character" 警告が出ます。

=item *

=begin original

Use of v-strings in use/require causes a (backward) portability warning.

=end original

use/require で v-strings を使うと(過去)互換性警告が出ます。

=item *

=begin original

Warnings relating to the use interpreter threads and their shared data
have been added.

=end original

インタプリタスレッドとその共有データの使用に関連する警告が追加されました。

=back

=head1 Changed Internals

(内部の変更点)

=over 4

=item *

=begin original

PerlIO is now the default.

=end original

PerlIO がデフォルトになりました。

=item *

=begin original

perlapi.pod (a companion to perlguts) now attempts to document the
internal API.

=end original

perlapi.pod (perlguts の仲間) で内部 API の記述を試みています。

=item *

=begin original

You can now build a really minimal perl called microperl.
Building microperl does not require even running Configure;
C<make -f Makefile.micro> should be enough.  Beware: microperl makes
many assumptions, some of which may be too bold; the resulting
executable may crash or otherwise misbehave in wondrous ways.
For careful hackers only.

=end original

microperl と呼ばれる、本当に最小限の perl をビルドできるようになりました。
microperl のビルドには Configure の実行すら不要です;
C<make -f Makefile.micro> とするだけです。
注意: microperl は多くの仮定を置いています。その中には
大胆すぎるものもあります;結果として実行ファイルがクラッシュしたり、
さもなければ不思議な形で正しくない振る舞いをしたりするかもしれません。
慎重なハッカー専用です。

=item *

=begin original

Added rsignal(), whichsig(), do_join(), op_clear, op_null,
ptr_table_clear(), ptr_table_free(), sv_setref_uv(), and several UTF-8
interfaces to the publicised API.  For the full list of the available
APIs see L<perlapi>.

=end original

rsignal(), whichsig(), do_join(), op_clear, op_null,
ptr_table_clear(), ptr_table_free(), sv_setref_uv() と、
いくつかの UTF-8 インターフェースが公式 API に追加されました。
利用可能な API の完全な一覧については L<perlapi> を参照してください。

=item *

=begin original

Made possible to propagate customised exceptions via croak()ing.

=end original

カスタマイズした例外を croak() することで伝播させることが
できるようになりました。

=item *

=begin original

Now xsubs can have attributes just like subs.  (Well, at least the
built-in attributes.)

=end original

xsubs は subs のように属性を持てるようになりました。
(ええ、少なくとも組み込み属性は。)

=item *

=begin original

dTHR and djSP have been obsoleted; the former removed (because it's
a no-op) and the latter replaced with dSP.

=end original

dTHR と djSP は古いものとなりました; 前者は取り除かれ
(なぜならこれは何も行わないからです) 後者は dSP で置き換えられました。

=item *

=begin original

PERL_OBJECT has been completely removed.

=end original

PERL_OBJECT は完全に取り除かれました。

=item *

=begin original

The MAGIC constants (e.g. C<'P'>) have been macrofied
(e.g. C<PERL_MAGIC_TIED>) for better source code readability
and maintainability.

=end original

MAGIC 定数 (つまり C<'P'>) はソースコードの可読性と
保守性を高めるためにマクロ化(つまり C<PERL_MAGIC_TIED>)されました。

=item *

=begin original

The regex compiler now maintains a structure that identifies nodes in
the compiled bytecode with the corresponding syntactic features of the
original regex expression.  The information is attached to the new
C<offsets> member of the C<struct regexp>. See L<perldebguts> for more
complete information.

=end original

正規表現コンパイラは
コンパイルされたバイトコードと対応する元の正規表現の文法的要素を
識別するノードの構造を保守するようになりました。
この情報は C<struct regexp> の新しい C<offsets> メンバに
記録されます。
より完全な情報については L<perldebguts> を参照してください。

=item *

=begin original

The C code has been made much more C<gcc -Wall> clean.  Some warning
messages still remain in some platforms, so if you are compiling with
gcc you may see some warnings about dubious practices.  The warnings
are being worked on.

=end original

C コードは遥かによく C<gcc -Wall> クリーンになりました。
プラットフォームによってはいくつかの警告が未だ残っているので、
gcc を使ってコンパイルすることで疑わしい慣習に関する警告を見ることができます。
警告は対応中です。

work on
=item *

=begin original

F<perly.c>, F<sv.c>, and F<sv.h> have now been extensively commented.

=end original

F<perly.c>, F<sv.c>, F<sv.h> には広範囲にコメントが付けられました。

=item *

=begin original

Documentation on how to use the Perl source repository has been added
to F<Porting/repository.pod>.

=end original

Perl ソースレポジトリの使い方に関するドキュメントが
F<Porting/repository.pod> として追加されました。

=item *

=begin original

There are now several profiling make targets.

=end original

プロファイリングのための make ターゲットがいくつか追加されました。

=back

=head1 Security Vulnerability Closed [561]

(修正された脆弱性[561])

=begin original

(This change was already made in 5.7.0 but bears repeating here.)
(5.7.0 came out before 5.6.1: the development branch 5.7 released
earlier than the maintenance branch 5.6)

=end original

(これは既に 5.7.0 で修正されていますが、ここで繰り返します。)
(5.7.0 は 5.6.1 より先に出ています: 5.7 開発ブランチは
5.6 メンテナンスブランチより先にリリースされています)

=begin original

A potential security vulnerability in the optional suidperl component
of Perl was identified in August 2000.  suidperl is neither built nor
installed by default.  As of November 2001 the only known vulnerable
platform is Linux, most likely all Linux distributions.  CERT and
various vendors and distributors have been alerted about the vulnerability.
See http://www.cpan.org/src/5.0/sperl-2000-08-05/sperl-2000-08-05.txt
for more information.

=end original

オプションである suidperl コンポーネントの潜在的なセキュリティ脆弱性が
2000 年 8 月に発見されました。
suidperl はデフォルトではビルド・インストールされません。
2001 年 11 月までに知られている唯一の脆弱なプラットフォームは
Linux で、ほとんど全ての Linux ディストリビューションを含みます。
CERT とさまざまなベンダーとディストリビューターはこの
脆弱性を警告しています。
さらなる情報については 
http://www.cpan.org/src/5.0/sperl-2000-08-05/sperl-2000-08-05.txt を
参照してください。

=begin original

The problem was caused by Perl trying to report a suspected security
exploit attempt using an external program, /bin/mail.  On Linux
platforms the /bin/mail program had an undocumented feature which
when combined with suidperl gave access to a root shell, resulting in
a serious compromise instead of reporting the exploit attempt.  If you
don't have /bin/mail, or if you have 'safe setuid scripts', or if
suidperl is not installed, you are safe.

=end original

問題は Perl が セキュリティ攻撃を報告するために外部プログラムである
/bin/mail を使おうとすることです。
Linux プラットフォームでは /bin/main プログラムのドキュメント化されていない
機能が suidperl と結びつくと root シェルへのアクセスを与え、
結果として攻撃を報告する代わりにセキュリティに重大な脅威を与えます。
/bin/mail がないか、'safe setuid scripts' を使っているか、
suidperl がインストールされていなければ、安全です。

=begin original

The exploit attempt reporting feature has been completely removed from
Perl 5.8.0 (and the maintenance release 5.6.1, and it was removed also
from all the Perl 5.7 releases), so that particular vulnerability
isn't there anymore.  However, further security vulnerabilities are,
unfortunately, always possible.  The suidperl functionality is most
probably going to be removed in Perl 5.10.  In any case, suidperl
should only be used by security experts who know exactly what they are
doing and why they are using suidperl instead of some other solution
such as sudo ( see http://www.courtesan.com/sudo/ ).

=end original

攻撃報告機能は Perl 5.8.0 (および 5.6.1 メンテナンスリリースと
全ての Perl 5.7 リリース)では完全に取り除かれましたので、
この脆弱性はもう存在しません。
しかし、残念ながらさらなるセキュリティ脆弱性は常にあり得ます。
suidperl 機能はおそらく Perl 5.10 で取り除かれます。
どちらにしても、suidperl は何が行われ、なぜ sudo 
( http://www.courtesan.com/sudo/ を参照してください)のようなその他の
ソリューションではなく suidperl を使うのかを完全に理解している
セキュリティの専門家だけが使うべきです。

=head1 New Tests

(新しいテスト)

=begin original

Several new tests have been added, especially for the F<lib> and
F<ext> subsections.  There are now about 69 000 individual tests
(spread over about 700 test scripts), in the regression suite (5.6.1
has about 11 700 tests, in 258 test scripts)  The exact numbers depend
on the platform and Perl configuration used.  Many of the new tests
are of course introduced by the new modules, but still in general Perl
is now more thoroughly tested.

=end original

いくつかの新しいテストが追加されました。特に F<lib> と F<ext>
サブセクションのためのものです。
現在およそ 69000 個のテスト(700 ほどのテストスクリプトに
拡散しています)と、退行テスト(5.6.1 は 258 テストスクリプトに 11700 テストが
あります)があります。
正確な数はプラットフォームと Perl の設定によります。
多くの新しいテストはもちろん新しいモジュールのためのものですが、
一般的な Perl も更なるテストを受けています。

=begin original

Because of the large number of tests, running the regression suite
will take considerably longer time than it used to: expect the suite
to take up to 4-5 times longer to run than in perl 5.6.  On a really
fast machine you can hope to finish the suite in about 6-8 minutes
(wallclock time).

=end original

テストの数が多いので、退行テストは予想よりかなり時間がかかります:
perl 5.6 の 4-5 倍長い時間がかかります。
本当に速いマシンでのみ(壁時計時間で) 6-8 分で終了する望みがあります。

=begin original

The tests are now reported in a different order than in earlier Perls.
(This happens because the test scripts from under t/lib have been moved
to be closer to the library/extension they are testing.)

=end original

テストは以前の Perl と違う順番で報告します。
(これは t/lib 以下のテストスクリプトがテストするライブラリ/拡張に
より近い位置に移動したからです。)

=head1 Known Problems

(既知の問題)

=head2 The Compiler Suite Is Still Very Experimental

(コンパイラスイートは未だ非常に実験的です)

=begin original

The compiler suite is slowly getting better but it continues to be
highly experimental.  Use in production environments is discouraged.

=end original

コンパイラスイートは少しずつ良いものになっていますが、
非常に実験的なままです。製品環境に使うことは薦められません。

=head2 Localising Tied Arrays and Hashes Is Broken

(tie された配列やハッシュを local 化すると破壊されます)

    local %tied_array;

=begin original

doesn't work as one would expect: the old value is restored
incorrectly.  This will be changed in a future release, but we don't
know yet what the new semantics will exactly be.  In any case, the
change will break existing code that relies on the current
(ill-defined) semantics, so just avoid doing this in general.

=end original

と書いてもうまく働かず、次のような動作になることでしょう:
古い値が正しく復元されません。
これは将来のリリースでは変更されるでしょうが、我々は現在のところどの新しい
セマンティクスが正確であるかを見出していません。どのような場合でも、
変更が現在の(間違った定義の)セマンティクスに依存する既存のコードを
破壊します。よって、通常はとにかくこうなることを回避してください。

=head2 Building Extensions Can Fail Because Of Largefiles

=begin original

Some extensions like mod_perl are known to have issues with
`largefiles', a change brought by Perl 5.6.0 in which file offsets
default to 64 bits wide, where supported.  Modules may fail to compile
at all, or they may compile and work incorrectly.  Currently, there
is no good solution for the problem, but Configure now provides
appropriate non-largefile ccflags, ldflags, libswanted, and libs
in the %Config hash (e.g., $Config{ccflags_nolargefiles}) so the
extensions that are having problems can try configuring themselves
without the largefileness.  This is admittedly not a clean solution,
and the solution may not even work at all.  One potential failure is
whether one can (or, if one can, whether it's a good idea to) link
together at all binaries with different ideas about file offsets;
all this is platform-dependent.

=end original

mod_perl のような拡張は `largefiles' 問題があるとして知られ、
Perl 5.6.0 から、ファイルオフセットをデフォルト 64 bit 長にする
変更が対応しました。
モジュールが全くコンパイルできなかったり、コンパイルできても
動作しなかったりします。
現在のところ、この問題のよい解決法はありませんが、
Configure は %Config ハッシュに非 largefile 用の
ccflags, ldflags, libswanted, libs を提供するようになり
(例えば $Config{ccflags_nolargefiles})、問題のある拡張は
largefile 化せずに設定しようとすることができます。
これは確かにきれいな解決法ではなく、この解決法が全くうまくいかない
場合もあります。
考えられる失敗の一つは、ファイルオフセットに関して
異なる考えを持つ全てのバイナリを互いにリンクできてしまう
(または、リンクできるときにそれがよい考えだと考えてしまう)ことです。

=head2 Modifying $_ Inside for(..)

(for(..) 内部での $_ の変更)

   for (1..5) { $_++ }

=begin original

works without complaint.  It shouldn't.  (You should be able to
modify only lvalue elements inside the loops.)  You can see the
correct behaviour by replacing the 1..5 with 1, 2, 3, 4, 5.

=end original

これが警告なしに動作します。そうあるべきではありません。
(ループ中の左辺値要素のみが変更可能であるべきです。)
1..5 を 1, 2, 3, 4, 5 に置き換えると正しい振る舞いを見ることが出来ます。

=head2 mod_perl 1.26 Doesn't Build With Threaded Perl

(mod_perl 1.26 でスレッド化 Perl がビルドできません)

=begin original

Use mod_perl 1.27 or higher.

=end original

mod_perl 1.27 以降を使ってください。

=head2 lib/ftmp-security tests warn 'system possibly insecure'

(lib/ftmp-security テストで 'system possibly insecure' 警告が出ます)

=begin original

Don't panic.  Read the 'make test' section of INSTALL instead.

=end original

あわてるな。INSTALL の 'make test' の項目を読んでください。

=head2 libwww-perl (LWP) fails base/date #51

(libwww-perl (LWP) が base/date #51 で失敗します)

=begin original

Use libwww-perl 5.65 or later.

=end original

libwww-perl 5.65 以降を使ってください。

=head2 PDL failing some tests

(PDL でいくつかのテストが失敗します)

=begin original

Use PDL 2.3.4 or later.

=end original

PDL 2.3.4 以降を使ってください。

=head2 Perl_get_sv

=begin original

You may get errors like 'Undefined symbol "Perl_get_sv"' or "can't
resolve symbol 'Perl_get_sv'", or the symbol may be "Perl_sv_2pv".
This probably means that you are trying to use an older shared Perl
library (or extensions linked with such) with Perl 5.8.0 executable.
Perl used to have such a subroutine, but that is no more the case.
Check your shared library path, and any shared Perl libraries in those
directories.

=end original

'Undefined symbol "Perl_get_sv"' や "can't resolve symbol 'Perl_get_sv'" と
言ったエラーが出るかもしれません(シンボルは "Perl_sv_2pv" の場合もあります)。
これはおそらく古い Perl の共有ライブラリ(かこれらとリンクされている拡張)を
Perl 5.8.0 実行ファイルと共に使おうとしていることを意味しています。
以前の Perl はこのようなサブルーチンを使っていましたが、
現在は使っていません。共有ライブラリパスを調べて、
そのディレクトリにある Perl の共有ライブラリをチェックしてください。

=begin original

Sometimes this problem may also indicate a partial Perl 5.8.0
installation, see L</"Mac OS X dyld undefined symbols"> for an
example and how to deal with it.

=end original

この問題は Perl 5.8.0 のインストールが不完全な場合にも起こります。
この例と、どう扱うかについては L</"Mac OS X dyld undefined symbols"> を
参照してください。

=head2 Self-tying Problems

(自己 tie 問題)

=begin original

Self-tying of arrays and hashes is broken in rather deep and
hard-to-fix ways.  As a stop-gap measure to avoid people from getting
frustrated at the mysterious results (core dumps, most often), it is
forbidden for now (you will get a fatal error even from an attempt).

=end original

配列とハッシュの自己 tie は深くて修正しにくい部分でおかしくなります。
人々がおかしな結果(最も多いのはコアダンプです)にいらいらするのを
避けるために、これは禁止されることになりました(試みるだけで
致命的エラーになります)。

=begin original

A change to self-tying of globs has caused them to be recursively
referenced (see: L<perlobj/"Two-Phased Garbage Collection">).  You
will now need an explicit untie to destroy a self-tied glob.  This
behaviour may be fixed at a later date.

=end original

glob の自己 tie の変更は再帰的リファレンスを引き起こします
(参照: L<perlobj/"Two-Phased Garbage Collection">)。
自己 tie された glob を破壊するためには明示的に untie する必要があります。
この振る舞いは将来変更されるかもしれません。

=begin original

Self-tying of scalars and IO thingies works.

=end original

スカラと IO の自己 tie は動作します。

=head2 ext/threads/t/libc

=begin original

If this test fails, it indicates that your libc (C library) is not
threadsafe.  This particular test stress tests the localtime() call to
find out whether it is threadsafe.  See L<perlthrtut> for more information.

=end original

このテストが失敗する場合、libc(C ライブラリ)がスレッドセーフでないことを
示しています。このテストはスレッドセーフかどうかを検出するために
localtime() コールにストレステストをかけます。
さらなる情報については L<perlthrtut> を参照してください。

=head2 Failure of Thread (5.005-style) tests

(Thread (5.005-スタイル) テストの失敗)

=begin original

B<Note that support for 5.005-style threading is deprecated,
experimental and practically unsupported.  In 5.10, it is expected
to be removed.  You should migrate your code to ithreads.>

=end original

B<5.005スタイルでのスレッド操作は非推奨事項になり、
試験的でほとんどサポート外となったと言うことを
覚えておいて下さい。5.10では、削除される予定です。
ithread に移行すべきです。>

=begin original

The following tests are known to fail due to fundamental problems in
the 5.005 threading implementation. These are not new failures--Perl
5.005_0x has the same bugs, but didn't have these tests.

=end original

以下のテストは 5.005 のスレッド操作の実行における根本的な問題の結果失敗する
ことがわかっています。これらは新しい失敗事例ではありません--Perl5.005_0x でも
同じバグを持っていたのですが、テストされなかったのです。

 ../ext/B/t/xref.t                    255 65280    14   12  85.71%  3-14
 ../ext/List/Util/t/first.t           255 65280     7    4  57.14%  2 5-7
 ../lib/English.t                       2   512    54    2   3.70%  2-3
 ../lib/FileCache.t                                 5    1  20.00%  5
 ../lib/Filter/Simple/t/data.t                      6    3  50.00%  1-3
 ../lib/Filter/Simple/t/filter_only.                9    3  33.33%  1-2 5
 ../lib/Math/BigInt/t/bare_mbf.t                 1627    4   0.25%  8 11 1626-1627
 ../lib/Math/BigInt/t/bigfltpm.t                 1629    4   0.25%  10 13 1628-
                                                                    1629
 ../lib/Math/BigInt/t/sub_mbf.t                  1633    4   0.24%  8 11 1632-1633
 ../lib/Math/BigInt/t/with_sub.t                 1628    4   0.25%  9 12 1627-1628
 ../lib/Tie/File/t/31_autodefer.t     255 65280    65   32  49.23%  34-65
 ../lib/autouse.t                                  10    1  10.00%  4
 op/flip.t                                         15    1   6.67%  15

=begin original

These failures are unlikely to get fixed as 5.005-style threads
are considered fundamentally broken.  (Basically what happens is that
competing threads can corrupt shared global state, one good example
being regular expression engine's state.)

=end original

5.005 スタイルのスレッドは根本的な部分が破綻していると
見なされているため、これらの失敗が修正される見込みは薄いです。
(基本的に起こることとしては、
矛盾したスレッドがグローバルに共有された状態を壊す可能性が
あります。一つの良い例としては正規表現エンジンの状態です。)

=head2 Timing problems

(タイミングの問題)

=begin original

The following tests may fail intermittently because of timing
problems, for example if the system is heavily loaded.

=end original

以降のテストはタイミングの問題によって断続的に失敗するかも知れません。
例えばシステムに大きな負荷がかかっている時です。

    t/op/alarm.t
    ext/Time/HiRes/HiRes.t
    lib/Benchmark.t
    lib/Memoize/t/expmod_t.t
    lib/Memoize/t/speed.t

=begin original

In case of failure please try running them manually, for example

=end original

失敗する場合は手作業で起動するようにして下さい。例えば:

    ./perl -Ilib ext/Time/HiRes/HiRes.t

=head2 Tied/Magical Array/Hash Elements Do Not Autovivify

(tied/magical 配列/ハッシュ要素は自動活性化されません)

=begin original

For normal arrays C<$foo = \$bar[1]> will assign C<undef> to
C<$bar[1]> (assuming that it didn't exist before), but for
tied/magical arrays and hashes such autovivification does not happen
because there is currently no way to catch the reference creation.
The same problem affects slicing over non-existent indices/keys of
a tied/magical array/hash.

=end original

普通の配列に対して C<$foo = \$bar[1]> とすると、
(以前に存在していなかったとして) C<$bar[1]> には C<undef> が割り当てられます。
しかし、自動活性化のような tied/magical 配列やハッシュの場合は
このようにはなりません。現在のところリファレンスの作成を捕まえる方法が
ないためです。同じ問題は tied/magical 配列/ハッシュで存在しない
インデックス/キーを切り取る場合にも影響を与えます。

=head2 Unicode in package/class and subroutine names does not work

(package/classとサブルーチン名の中でUnicodeは使えません)

=begin original

One can have Unicode in identifier names, but not in package/class or
subroutine names.  While some limited functionality towards this does
exist as of Perl 5.8.0, that is more accidental than designed; use of
Unicode for the said purposes is unsupported.

=end original

識別名をつける際に Unicode を用いることは可能ですが、package/class 又は
サブルーチンの名前に関しては不可能です。これに対する制限が存在するのは
Perl5.8.0 からですが、意図的と言うよりもむしろ偶発的なものであると言えます;
つまり、これまでに述べた目的での Unicode の使用に関してはサポートされません。

=begin original

One reason of this unfinishedness is its (currently) inherent
unportability: since both package names and subroutine names may
need to be mapped to file and directory names, the Unicode capability
of the filesystem becomes important-- and there unfortunately aren't
portable answers.

=end original

この不完全性の理由の一つとしては、本来の移植性(現時点においての)が
無くなってしまうからです: パッケージとサブルーチンの名前はファイルと
ディレクトリの名前と対応させる必要があるため、ファイルシステムの Unicode 能力が
重要となります。そして、不幸なことに移植性を重視した答えと言うものは
存在しないのです。

=head1 Platform Specific Problems

(プラットフォーム固有の問題)

=head2 AIX

=over 4

=item *

=begin original

If using the AIX native make command, instead of just "make" issue
"make all".  In some setups the former has been known to spuriously
also try to run "make install".  Alternatively, you may want to use
GNU make.

=end original

AIX ネイティブの make コマンドを使っている場合、
単に"make"とするのではなく、"make all"としてください。
前者のようにすると、間違って"make install"が実行されることがあります。
あるいは、GNU make を使う方がよいかもしれません。

=item *

=begin original

In AIX 4.2, Perl extensions that use C++ functions that use statics
may have problems in that the statics are not getting initialized.
In newer AIX releases, this has been solved by linking Perl with
the libC_r library, but unfortunately in AIX 4.2 the said library
has an obscure bug where the various functions related to time
(such as time() and gettimeofday()) return broken values, and
therefore in AIX 4.2 Perl is not linked against libC_r.

=end original

AIX 4.2 では、statics を使う C++ 関数を使う Perl 拡張は
statics が初期化されないために問題が起きるかもしれません。
より新しい AIX では、この問題は Perl に libC_r ライブラリを
リンクすることで解決されますが、残念ながら AIX 4.2 では
このライブラリは時間に関するさまざまな関数(time() や gettimeofday() など)で
間違った値を返すという不明確なバグがあるため、AIX 4.2 では
Perl は libC_r をリンクしていません。

=item *

vac 5.0.0.0 May Produce Buggy Code For Perl

=begin original

The AIX C compiler vac version 5.0.0.0 may produce buggy code,
resulting in a few random tests failing when run as part of "make
test", but when the failing tests are run by hand, they succeed.
We suggest upgrading to at least vac version 5.0.1.0, that has been
known to compile Perl correctly.  "lslpp -L|grep vac.C" will tell
you the vac version.  See README.aix.

=end original

AIX C コンパイラ vac バージョン 5.0.0.0 はバグったコードを出力し、
"make test"の一部として実行するといくつかのテストに失敗することが
ありますが、失敗したテストを手動で実行すると成功します。
少なくとも vac バージョン 5.0.1.0 にアップグレードすることをお勧めします。
これは Perl を正しくコンパイルできることがわかっています。
"lslpp -L|grep vac.C" とすると vac のバージョンが表示されます。
README.aix を参照してください。

=item *

=begin original

If building threaded Perl, you may get compilation warning from pp_sys.c:

=end original

スレッド化 Perl をビルドすると、pp_sys.c でコンパイル警告が
出るかもしれません。

  "pp_sys.c", line 4651.39: 1506-280 (W) Function argument assignment between types "unsigned char*" and "const void*" is not allowed.

=begin original

This is harmless; it is caused by the getnetbyaddr() and getnetbyaddr_r()
having slightly different types for their first argument.

=end original

これは無害です; これは getnetbyaddr() と getnetbyaddr_r() の第一引数の
型が少し違うために発生します。

=back

=head2 Alpha systems with old gccs fail several tests

=begin original

If you see op/pack, op/pat, op/regexp, or ext/Storable tests failing
in a Linux/alpha or *BSD/Alpha, it's probably time to upgrade your gcc.
gccs prior to 2.95.3 are definitely not good enough, and gcc 3.1 may
be even better.  (RedHat Linux/alpha with gcc 3.1 reported no problems,
as did Linux 2.4.18 with gcc 2.95.4.)  (In Tru64, it is preferable to
use the bundled C compiler.)

=end original

Linux/alpha か *BSD/Alpha で op/pack, op/pat, op/regexp, ext/Storable の
いずれかのテストが失敗した場合、おそらく gcc をアップグレードする
タイミングです。2.95.3 以前の gcc は明らかに十分よいものであるとは言えず、
gcc 3.1 はもっとよいものです。(RedHat Linux/alpha で gcc 3.1 の場合は
問題は報告されていませんが、Linux 2.4.18 で gcc 2.95.4 の場合では
報告されています。)(Tru64 では、バンドルされている C コンパイラを使ったほうが
よいです。)

=head2 AmigaOS

=begin original

Perl 5.8.0 doesn't build in AmigaOS.  It broke at some point during
the ithreads work and we could not find Amiga experts to unbreak the
problems.  Perl 5.6.1 still works for AmigaOS (as does the the 5.7.2
development release).

=end original

Perl 5.8.0 は AmigaOS ではビルドできません。
iスレッドのどこかで問題が発生していて、この問題を解決するための
Amiga の専門家が見つけられないのです。
Perl 5.6.1 は未だ Amiga OS で動作します
(5.7.2 開発リリースも動作します)。

=head2 BeOS

=begin original

The following tests fail on 5.8.0 Perl in BeOS Personal 5.03:

=end original

BeOS Personal 5.03 では Perl 5.8.0 の以下のテストは失敗します。

 t/op/lfs............................FAILED at test 17
 t/op/magic..........................FAILED at test 24
 ext/Fcntl/t/syslfs..................FAILED at test 17
 ext/File/Glob/t/basic...............FAILED at test 3
 ext/POSIX/t/sigaction...............FAILED at test 13
 ext/POSIX/t/waitpid.................FAILED at test 1

=begin original

See L<perlbeos> (README.beos) for more details.

=end original

さらなる詳細については L<perlbeos> (README.beos) を参照してください。

=head2 Cygwin "unable to remap"

=begin original

For example when building the Tk extension for Cygwin,
you may get an error message saying "unable to remap".
This is known problem with Cygwin, and a workaround is
detailed in here: http://sources.redhat.com/ml/cygwin/2001-12/msg00894.html

=end original

例えば Cygwin 用の Tk 拡張をビルドするとき、"unable to remap" という
エラーが出るかもしれません。
これは Cygwin の既知の問題で、回避方法は以下に詳細があります:
http://sources.redhat.com/ml/cygwin/2001-12/msg00894.html

=head2 Cygwin ndbm tests fail on FAT

=begin original

One can build but not install (or test the build of) the NDBM_File
on FAT filesystems.  Installation (or build) on NTFS works fine.
If one attempts the test on a FAT install (or build) the following
failures are expected:

=end original

FAT ファイルシステムで NDBM_File をビルドはできますが、
インストール(とテスト)はできません。
NTFS でのインストール(とビルド)はうまくいきます。
FAT でのインストール(とビルド)をテストしようとすると、以下の
失敗が報告されるはずです:

 ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1-2 4 16-71
 ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
 ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
 ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7-11
 ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1-4
 run/fresh_perl.t                          97    1   1.03%  91

=begin original

NDBM_File fails and ODBM_File just coredumps.

=end original

NDBM_File は失敗し、ODBM_File は単にコアダンプします。

=begin original

If you intend to run only on FAT (or if using AnyDBM_File on FAT),
run Configure with the -Ui_ndbm and -Ui_dbm options to prevent
NDBM_File and ODBM_File being built.

=end original

FAT でのみ実行したい(あるいは FAT で AnyDBM_File を使いたい)場合は、
NDBM_File と ODBM_File がビルドされるのを防ぐために
Configure に -Ui_ndbm と -Ui_dbm のオプションをつけて実行してください。

=head2 DJGPP Failures

 t/op/stat............................FAILED at test 29
 lib/File/Find/t/find.................FAILED at test 1
 lib/File/Find/t/taint................FAILED at test 1
 lib/h2xs.............................FAILED at test 15
 lib/Pod/t/eol........................FAILED at test 1
 lib/Test/Harness/t/strap-analyze.....FAILED at test 8
 lib/Test/Harness/t/test-harness......FAILED at test 23
 lib/Test/Simple/t/exit...............FAILED at test 1

=begin original

The above failures are known as of 5.8.0 with native builds with long
filenames, but there are a few more if running under dosemu because of
limitations (and maybe bugs) of dosemu:

=end original

5.8.0 をロングファイルネーム対応でネイティブにビルドしたときに
上記の失敗が起こることがわかっていますが、dosemu で実行した場合、
dosemu の制限(とおそらくはバグ)によってさらに以下のものが失敗します。

 t/comp/cpp...........................FAILED at test 3
 t/op/inccode.........................(crash)

=begin original

and a few lib/ExtUtils tests, and several hundred Encode/t/Aliases.t
failures that work fine with long filenames.  So you really might
prefer native builds and long filenames.

=end original

さらに lib/ExtUtils test のいくつかと、ロングファイルネーム対応なら
正しく動く Encode/t/Aliases.t の数百のテストが失敗します。
従って、ロングファイルネーム付きでネイティブビルドした方がいいでしょう。

=head2 FreeBSD built with ithreads coredumps reading large directories

=begin original

This is a known bug in FreeBSD 4.5's readdir_r(), it has been fixed in
FreeBSD 4.6 (see L<perlfreebsd> (README.freebsd)).

=end original

これは FreeBSD 4.5 の readdir_r() に関する既知の問題で、
FreeBSD 4.6 で修正されています
(L<perlfreebsd> (README.freebsd) を参照してください)。

=head2 FreeBSD Failing locale Test 117 For ISO 8859-15 Locales

=begin original

The ISO 8859-15 locales may fail the locale test 117 in FreeBSD.
This is caused by the characters \xFF (y with diaeresis) and \xBE
(Y with diaeresis) not behaving correctly when being matched
case-insensitively.  Apparently this problem has been fixed in
the latest FreeBSD releases.
( http://www.freebsd.org/cgi/query-pr.cgi?pr=34308 )

=end original

ISO 8859-15 ロケールは FreeBSD の locale test 117 で失敗します。
これは 文字 \xFF (文節記号付きの y) と \xBE (文節記号付きの Y) が
大文字小文字を無視してのマッチのときに正しく振舞わないことが原因です。
この問題は最新の FreeBSD リリースでは修正されているようです。
( http://www.freebsd.org/cgi/query-pr.cgi?pr=34308 )

=head2 IRIX fails ext/List/Util/t/shuffle.t or Digest::MD5

=begin original

IRIX with MIPSpro 7.3.1.2m or 7.3.1.3m compiler may fail the List::Util
test ext/List/Util/t/shuffle.t by dumping core.  This seems to be
a compiler error since if compiled with gcc no core dump ensues, and
no failures have been seen on the said test on any other platform.

=end original

IRIX で MIPSpro 7.3.1.2m か 7.3.1.3m のコンパイラを使った場合、
List::Util のテストである ext/List/Util/t/shuffle.t が core を出力して
失敗します。gcc でコンパイルした場合は core を出力せず、
その他のプラットフォームでこのように失敗したという話を聞きませんので、
コンパイラのエラーのようです。

=begin original

Similarly, building the Digest::MD5 extension has been
known to fail with "*** Termination code 139 (bu21)".

=end original

同様に、Digest::MD5 拡張をビルドするときに
"*** Termination code 139 (bu21)" と表示して失敗することがわかっています。

=begin original

The cure is to drop optimization level (Configure -Doptimize=-O2).

=end original

回避方法は最適化レベルを落とすことです(Configure -Doptimize=-O2)。

=head2 HP-UX lib/posix Subtest 9 Fails When LP64-Configured

=begin original

If perl is configured with -Duse64bitall, the successful result of the
subtest 10 of lib/posix may arrive before the successful result of the
subtest 9, which confuses the test harness so much that it thinks the
subtest 9 failed.

=end original

perl が -Duse64bitall 付きで設定された場合、lib/posix の subtest 10 の
成功が subtest 9 の成功の前に報告されるため、テストハーネスが
混乱して subtest 9 が失敗したと考えてしまいます。

=head2 Linux with glibc 2.2.5 fails t/op/int subtest #6 with -Duse64bitint

=begin original

This is a known bug in the glibc 2.2.5 with long long integers.
( http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=65612 )

=end original

これは glibc 2.2.5 の long long int の既知のバグです。
( http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=65612 )

=head2 Linux With Sfio Fails op/misc Test 48

=begin original

No known fix.

=end original

わかっている修正方法はありません。

=head2 Mac OS X

=begin original

Please remember to set your environment variable LC_ALL to "C"
(setenv LC_ALL C) before running "make test" to avoid a lot of
warnings about the broken locales of Mac OS X.

=end original

Mac OS X の壊れたロケールに関する大量の警告を避けるために、
"make test" する前に環境変数 LC_ALL を "C" にセットする
(setenv LC_ALL C) ことを忘れないで下さい。

=begin original

The following tests are known to fail in Mac OS X 10.1.5 because of
buggy (old) implementations of Berkeley DB included in Mac OS X:

=end original

以下のテストは Mac OS X に含まれている Berkeley DB の実装が
バグっている(古い)ために失敗することがわかっています。

 Failed Test                 Stat Wstat Total Fail  Failed  List of Failed
 -------------------------------------------------------------------------
 ../ext/DB_File/t/db-btree.t    0    11    ??   ??       %  ??
 ../ext/DB_File/t/db-recno.t              149    3   2.01%  61 63 65

=begin original

If you are building on a UFS partition, you will also probably see
t/op/stat.t subtest #9 fail.  This is caused by Darwin's UFS not
supporting inode change time.

=end original

UFS パーティションでビルドした場合、多分 t/op/stat.t subtest #9 も
失敗するでしょう。これは Darwin の UPF が inode 変更時刻に
対応していないからです。

=begin original

Also the ext/POSIX/t/posix.t subtest #10 fails but it is skipped for
now because the failure is Apple's fault, not Perl's (blocked signals
are lost).

=end original

また ext/POSIX/t/posix.t subtest #10 が失敗しますが、
これは Perl の責任ではなく Apple の責任(ブロックされたシグナルが
失われる)なので、スキップするようになりました。

=begin original

If you Configure with ithreads, ext/threads/t/libc.t will fail. Again,
this is not Perl's fault-- the libc of Mac OS X is not threadsafe
(in this particular test, the localtime() call is found to be
threadunsafe.)

=end original

iスレッド付きで Configure した場合、ext/threads/t/libc.t が失敗します。
これも Perl の責任ではありません-- Mac OS X の libc はスレッドセーフでは
ありません(このテストは localtime() がスレッドセーフかどうかをテストします。)

=head2 Mac OS X dyld undefined symbols

=begin original

If after installing Perl 5.8.0 you are getting warnings about missing
symbols, for example

=end original

Perl 5.8.0 をインストールした後、以下のような未定義シンボルの
警告が出る場合:

    dyld: perl Undefined symbols
    _perl_sv_2pv
    _perl_get_sv

=begin original

you probably have an old pre-Perl-5.8.0 installation (or parts of one)
in /Library/Perl (the undefined symbols used to exist in pre-5.8.0 Perls).
It seems that for some reason "make install" doesn't always completely
overwrite the files in /Library/Perl.  You can move the old Perl
shared library out of the way like this:

=end original

おそらく古い Perl 5.8.0 以前のバージョン(あるいはその一部)が
/Library/Perl にインストールされています(未定義シンボルは
5.8.0 以前の Perl で使われています)。
なぜか "make install" の時に完全に /Library/Perl 以下のファイルを
上書きできないときがあるようです。古い Perl 共有ライブラリを以下のようにして
外すことが出来ます:

    cd /Library/Perl/darwin/CORE
    mv libperl.dylib libperlold.dylib

=begin original

and then reissue "make install".  Note that the above of course is
extremely disruptive for anything using the /usr/local/bin/perl.
If that doesn't help, you may have to try removing all the .bundle
files from beneath /Library/Perl, and again "make install"-ing.

=end original

それからもう一度 "make install" してください。
この方法は /usr/local/bin/perl を使っている場合は完全に破壊的であることに
注意してください。
もしこれでもだめなら、/Library/Perl 以下の全ての .bundle ファイルを
削除して、もう一度 "make install" する必要があります。

=head2 OS/2 Test Failures

=begin original

The following tests are known to fail on OS/2 (for clarity
only the failures are shown, not the full error messages):

=end original

以下のテストは SUPER-UX で失敗することがわかっています
(明確化しておくと、エラーメッセージ全体ではなく失敗することのみを
記しています):

 ../lib/ExtUtils/t/Mkbootstrap.t    1   256    18    1   5.56%  8
 ../lib/ExtUtils/t/Packlist.t       1   256    34    1   2.94%  17
 ../lib/ExtUtils/t/basic.t          1   256    17    1   5.88%  14
 lib/os2_process.t                  2   512   227    2   0.88%  174 209
 lib/os2_process_kid.t                        227    2   0.88%  174 209
 lib/rx_cmprt.t                   255 65280    18    3  16.67%  16-18

=head2 op/sprintf tests 91, 129, and 130

=begin original

The op/sprintf tests 91, 129, and 130 are known to fail on some platforms.
Examples include any platform using sfio, and Compaq/Tandem's NonStop-UX.

=end original

op/sprintf テスト 91, 129, 130 はプラットフォームによっては
失敗することがわかっています。
例としては、sfio を使うあらゆるプラットフォームおよび、
Compaq/Tandem の NonStop-UX です。

=begin original

Test 91 is known to fail on QNX6 (nto), because C<sprintf '%e',0>
incorrectly produces C<0.000000e+0> instead of C<0.000000e+00>.

=end original

Test 91 は QNX6 (nto) で失敗することがわかっています。
理由は C<sprintf '%e',0> が C<0.000000e+00> ではなく、
誤って C<0.000000e+0> を生成するからです。

=begin original

For tests 129 and 130, the failing platforms do not comply with
the ANSI C Standard: lines 19ff on page 134 of ANSI X3.159 1989, to
be exact.  (They produce something other than "1" and "-1" when
formatting 0.6 and -0.6 using the printf format "%.0f"; most often,
they produce "0" and "-0".)

=end original

テスト 129 と 130 について、失敗するプラットフォームは
ANSI C 標準 (正確に言うと ANSI X3.159 1989 の 134 ページ の
ライン 19ff) に従っていません。
(これは printf フォーマット "%.0f" を使って 0.6 と -0.6 を
フォーマットしたときに "1" と "-1" 以外の何かを生成しています;
もっとも良くある場合は、"0" と "-0" を生成しています。)

=head2 SCO

=begin original

The socketpair tests are known to be unhappy in SCO 3.2v5.0.4:

=end original

socketpair テストは SCO 3.2v5.0.4 で不幸になることがわかっています:

 ext/Socket/socketpair.t...............FAILED tests 15-45

=head2 Solaris 2.5

=begin original

In case you are still using Solaris 2.5 (aka SunOS 5.5), you may
experience failures (the test core dumping) in lib/locale.t.
The suggested cure is to upgrade your Solaris.

=end original

未だに Solaris 2.5(またの名を SunOS 5.5)を使っている場合、
lib/locale.t で(core dump の)テストが失敗するかもしれません。
お勧めの対応策は Solaris をアップグレードすることです。

=head2 Solaris x86 Fails Tests With -Duse64bitint

=begin original

The following tests are known to fail in Solaris x86 with Perl
configured to use 64 bit integers:

=end original

Perl を 64 bit 整数を使うように設定した場合、
以下のテストが Solaris x86 で失敗することがわかっています:

 ext/Data/Dumper/t/dumper.............FAILED at test 268
 ext/Devel/Peek/Peek..................FAILED at test 7

=head2 SUPER-UX (NEC SX)

=begin original

The following tests are known to fail on SUPER-UX:

=end original

以下のテストは SUPER-UX で失敗することがわかっています:

 op/64bitint...........................FAILED tests 29-30, 32-33, 35-36
 op/arith..............................FAILED tests 128-130
 op/pack...............................FAILED tests 25-5625
 op/pow................................
 op/taint..............................# msgsnd failed
 ../ext/IO/lib/IO/t/io_poll............FAILED tests 3-4
 ../ext/IPC/SysV/ipcsysv...............FAILED tests 2, 5-6
 ../ext/IPC/SysV/t/msg.................FAILED tests 2, 4-6
 ../ext/Socket/socketpair..............FAILED tests 12
 ../lib/IPC/SysV.......................FAILED tests 2, 5-6
 ../lib/warnings.......................FAILED tests 115-116, 118-119

=begin original

The op/pack failure ("Cannot compress negative numbers at op/pack.t line 126")
is serious but as of yet unsolved.  It points at some problems with the
signedness handling of the C compiler, as do the 64bitint, arith, and pow
failures.  Most of the rest point at problems with SysV IPC.

=end original

op/pack の失敗 ("Cannot compress negative numbers at op/pack.t line 126") は
重大ですがまだ解決していません。
問題いくつかは C コンパイラの符号の扱いによるもので、
64bitint, arith, pow で失敗します。
残りの問題のほとんどは SysV IPC の問題です。

=head2 Term::ReadKey not working on Win32

(Term::ReadKey が Win32 で動かない)

=begin original

Use Term::ReadKey 2.20 or later.

=end original

Term::ReadKey 2.20 以降を使ってください。

=head2 UNICOS/mk

=over 4

=item *

=begin original

During Configure, the test

=end original

Configure の途中で、以下のテスト:

    Guessing which symbols your C compiler and preprocessor define...

=begin original

will probably fail with error messages like

=end original

が以下のようなメッセージを出して失敗するかもしれません:

    CC-20 cc: ERROR File = try.c, Line = 3
      The identifier "bad" is undefined.

      bad switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
      ^

    CC-65 cc: ERROR File = try.c, Line = 3
      A semicolon is expected at this point.

=begin original

This is caused by a bug in the awk utility of UNICOS/mk.  You can ignore
the error, but it does cause a slight problem: you cannot fully
benefit from the h2ph utility (see L<h2ph>) that can be used to
convert C headers to Perl libraries, mainly used to be able to access
from Perl the constants defined using C preprocessor, cpp.  Because of
the above error, parts of the converted headers will be invisible.
Luckily, these days the need for h2ph is rare.

=end original

これは UNICOS/mk の awk ユーティリティのバグによるものです。
このエラーを無視することもできますが、若干の問題があります:
C ヘッダを Perl ライブラリに変換する
h2ph ユーティリティ (L<h2ph> を参照してください)  の
恩恵を完全には受けられないことです。
このツールは主に C プリプロセッサ cpp で使われている定数を
Perl からアクセスできるようにするために使われます。
上記のエラーにより、変換されたヘッダの一部が見えなくなります。
幸いなことに、最近は h2ph が必要になることはまれです。

=item *

=begin original

If building Perl with interpreter threads (ithreads), the
getgrent(), getgrnam(), and getgrgid() functions cannot return the
list of the group members due to a bug in the multithreaded support of
UNICOS/mk.  What this means is that in list context the functions will
return only three values, not four.

=end original

Perl をインタプリタスレッド(iスレッド)付きでビルドした場合、

getgrent(), getgrnam(), and getgrgid() 関数はグループのメンバの
リストを返すことができません。
これは UNICOS/mk のマルチスレッド機能のバグによるものです。
つまり、これらの関数はリストコンテキストでは 4 つではなく 3 つしか
値を返さないということです。

=back

=head2 UTS

=begin original

There are a few known test failures, see L<perluts> (README.uts).

=end original

いくつかのテストが失敗することがわかっています。
L<perluts> (README.uts)を参照してください。

=head2 VOS (Stratus)

=begin original

When Perl is built using the native build process on VOS Release
14.5.0 and GNU C++/GNU Tools 2.0.1, all attempted tests either
pass or result in TODO (ignored) failures.

=end original

Perl が VOS Release 14.5.0 と GNU C++/GNU Tools 2.0.1 でネイティブな
ビルドプロセスを使ってビルドされた場合、全てのテストは通過するか、
TODO (無視) 失敗の結果となります。


=head2 VMS

=begin original

There should be no reported test failures with a default configuration,
though there are a number of tests marked TODO that point to areas
needing further debugging and/or porting work.

=end original

デフォルト設定ではテスト失敗の報告はないはずですが、
更なるデバッグや移殖作業が必要な分野を示すために多くのテストが
TODO にマークされています。

=head2 Win32

=begin original

In multi-CPU boxes, there are some problems with the I/O buffering:
some output may appear twice.

=end original

マルチ CPU マシンでは、I/O バッファリングに問題があります:
出力が複数出る場合があります。

=head2 XML::Parser not working

=begin original

Use XML::Parser 2.31 or later.

=end original

XML::Parser 2.31 以降を使ってください。

=head2 z/OS (OS/390)

=begin original

z/OS has rather many test failures but the situation is actually much
better than it was in 5.6.0; it's just that so many new modules and
tests have been added.

=end original

z/OS では多くのテストで失敗しますが、実際のところ状況は 5.6.0 より
大きく改善しています; これは単に多くのモジュールとテストが
追加されたからです。

 Failed Test                   Stat Wstat Total Fail  Failed  List of Failed
 ---------------------------------------------------------------------------
 ../ext/Data/Dumper/t/dumper.t              357    8   2.24%  311 314 325 327
                                                              331 333 337 339
 ../ext/IO/lib/IO/t/io_unix.t                 5    4  80.00%  2-5
 ../ext/Storable/t/downgrade.t   12  3072   169   12   7.10%  14-15 46-47 78-79
                                                              110-111 150 161
 ../lib/ExtUtils/t/Constant.t   121 30976    48   48 100.00%  1-48
 ../lib/ExtUtils/t/Embed.t                    9    9 100.00%  1-9
 op/pat.t                                   922    7   0.76%  665 776 785 832-
                                                              834 845
 op/sprintf.t                               224    3   1.34%  98 100 136
 op/tr.t                                     97    5   5.15%  63 71-74
 uni/fold.t                                 780    6   0.77%  61 169 196 661
                                                              710-711

=begin original

The failures in dumper.t and downgrade.t are problems in the tests,
those in io_unix and sprintf are problems in the USS (UDP sockets and
printf formats).  The pat, tr, and fold failures are genuine Perl
problems caused by EBCDIC (and in the pat and fold cases, combining
that with Unicode).  The Constant and Embed are probably problems in
the tests (since they test Perl's ability to build extensions, and
that seems to be working reasonably well.)

=end original

dumper.t と downgrade.t の失敗はテストの中に問題があります。
一方 io_unix と sprintf の失敗は USS (UDP ソケットと printf フォーマット) に
問題があります。
pat, tr, fold の失敗は EBCDIC (pat と fold の場合は EBCDIC と Unicode の
組み合わせ) が原因の、正真正銘の Perl の問題です。
Constant と Embed はおそらくテストの中に問題があります
(これは Perl が拡張をビルドできる能力をテストするもので、
十分に正しく動くようにみえるからです)。

=head2 Unicode Support on EBCDIC Still Spotty

(EBCDIC での Unicode 対応はまだむらがあります)

=begin original

Though mostly working, Unicode support still has problem spots on
EBCDIC platforms.  One such known spot are the C<\p{}> and C<\P{}>
regular expression constructs for code points less than 256: the
C<pP> are testing for Unicode code points, not knowing about EBCDIC.

=end original

EBCDIC プラットフォームでの Unicode 対応は、ほとんどは動作しますが、
まだ問題点があります。
このような問題点の一つは、コードポイント 256 未満の
C<\p{}> と C<\P{}> 正規表現定数です;
C<pP> は Unicode コードポイントについてテストされ、
EBCDIC については知りません。

=head2 Seen In Perl 5.7 But Gone Now

(Perl 5.7にはあったが現在無くなってしまったもの)

=begin original

C<Time::Piece> (previously known as C<Time::Object>) was removed
because it was felt that it didn't have enough value in it to be a
core module.  It is still a useful module, though, and is available
from the CPAN.

=end original

C<Time::Pieace>(以前はC<Time::Object>として知られていました)は
コアモジュールとして十分な価値を持っていると感じられなかったため
削除されました。それでもなお便利なモジュールですので、CPANから入手可能です。

=begin original

Perl 5.8 unfortunately does not build anymore on AmigaOS; this broke
accidentally at some point.  Since there are not that many Amiga
developers available, we could not get this fixed and tested in time
for 5.8.0.  Perl 5.6.1 still works for AmigaOS (as does the the 5.7.2
development release).

=end original

Perl 5.8では、残念ながら今はもうAmigaOSではビルドされていません;開発の
中断はある時偶然にして起こりました。多くのAmigaの開発者が居なくなって以来
我々は5.8.0のための修正やテストが間に合いませんでした。Perl 5.6.1はまだ
AmigaOS上で動作します(開発版である5.7.2はリリースされていますが)。

=begin original

The C<PerlIO::Scalar> and C<PerlIO::Via> (capitalised) were renamed as
C<PerlIO::scalar> and C<PerlIO::via> (all lowercase) just before 5.8.0.
The main rationale was to have all core PerlIO layers to have all
lowercase names.  The "plugins" are named as usual, for example
C<PerlIO::via::QuotedPrint>.

=end original

C<PerlIO::Scalar>とC<PerlIO::Via>(大文字が使われている)は5.8.0で
C<PerlIO::scalar>とC<PerlIO::via>(全て小文字)に改名されました。
原則としてコアのIO層は全て小文字の名前です。"プラグイン"では
通常C<PerlIO::via::QuatedPrint>のような名前をつけられます。

=begin original

The C<threads::shared::queue> and C<threads::shared::semaphore> were
renamed as C<Thread::Queue> and C<Thread::Semaphore> just before 5.8.0.
The main rationale was to have thread modules to obey normal naming,
C<Thread::> (the C<threads> and C<threads::shared> themselves are
more pragma-like, they affect compile-time, so they stay lowercase).

=end original

C<threads::shared::queue> と C<threads::shared::semaphore> は
5.8.0 の直前に C<Thread::Queue> と C<Thread::Semaphore> に名前が
変わりました。主な理由は、スレッドモジュールを通常の命名法である
C<Thread::>に従わせるためです
(C<threads> と C<threads::shared> はよりプラグマっぽく、コンパイル時に
影響を与えるため、小文字のままです)。

=head1 Reporting Bugs

=begin original

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.com/ , the Perl Home Page.

=end original

もしバグと思われるものが見つかったら、 comp.lang.perl.misc ニュースグループに
最近投稿された記事や http://bugs.perl.org にある perl バグデータベースを
確認してください。
Perl ホームページ、http://www.perl.com にも情報があります。

=begin original

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

=end original

もしまだ報告されていないバグだと確信したら、そのリリースに含まれている
perlbug プログラムをを実行してください。
バグの再現スクリプトを十分小さく、しかし有効なコードに切りつめることを
意識してください。バグレポートは perl -V の出力と一緒に
perlbug@perl.org に送られ Perl porting チームによって解析されます。

=head1 SEE ALSO

=begin original

The F<Changes> file for exhaustive details on what changed.

=end original

F<Changes> ファイルに変更点の完全な詳細があります。

=begin original

The F<INSTALL> file for how to build Perl.

=end original

F<INSTALL> ファイルに Perl のビルド方法があります。

=begin original

The F<README> file for general stuff.

=end original

F<README> ファイルに一般的なことがあります。

=begin original

The F<Artistic> and F<Copying> files for copyright information.

=end original

F<Artistic> 及び F<Copying> ファイルに著作権情報があります。

=head1 HISTORY

=begin original

Written by Jarkko Hietaniemi <F<jhi@iki.fi>>.

=end original

Jarkko Hietaniemi <F<jhi@iki.fi>> によって書かれました。

=begin meta

Update: Kentaro Shirakata <argrath@ub32.org>

=end meta

=cut

