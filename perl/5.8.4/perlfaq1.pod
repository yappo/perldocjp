=encoding euc-jp

=head1 NAME

=begin original

perlfaq1 - General Questions About Perl ($Revision: 1.3 $, $Date: 2006/04/08 18:01:46 $)

=end original

perlfaq1 - Perl に関する一般的な質問 ($Revision: 1.3 $, $Date: 2006/04/08 18:01:46 $)

=head1 DESCRIPTION

=begin original

This section of the FAQ answers very general, high-level questions
about Perl.

=end original

このセクションでは、Perlに関する非常に一般的な高レベルの質問に答えます。

=head2 What is Perl?

(Perlってなんですか?)

=begin original

Perl is a high-level programming language with an eclectic heritage
written by Larry Wall and a cast of thousands.  It derives from the
ubiquitous C programming language and to a lesser extent from sed,
awk, the Unix shell, and at least a dozen other tools and languages.
Perl's process, file, and text manipulation facilities make it
particularly well-suited for tasks involving quick prototyping, system
utilities, software tools, system management tasks, database access,
graphical programming, networking, and world wide web programming.
These strengths make it especially popular with system administrators
and CGI script authors, but mathematicians, geneticists, journalists,
and even managers also use Perl.  Maybe you should, too.

=end original

Perl は Larry Wall と数多い協力者によって書かれた、折衷的な遺産を持った
高水準プログラミング言語です。
それは遍在するプログラミング言語であるCから派生し、
そしてそれ程ではないけれども、
sed、awk、Unix のシェルおよび少なくともダース単位の他のツールや言語に
影響を受けています。Perlのプロセス、ファイル及びテキスト操作機能は、
クィックプロトタイピング、システムユーティリティ、ソフトウェアツール、
システム管理タスク、データベースアクセス、グラフィカルプログラミング、
ネットワーキング、そして world wide web プログラミングを含んだタスクに
特に適したものになっています。
これらの強みは、システム管理者やCGI スクリプトの作者に特に人気を博すもとと
なっていますが、数学者、遺伝学者、ジャーナリスト、そして管理者も
また Perl を利用しているのです。たぶんあなたもそうなるでしょう。

=head2 Who supports Perl?  Who develops it?  Why is it free?

(だれがPerlをサポートしているのですか? 誰が開発しているのですか? なぜフリーなのでしょうか?)

=begin original

The original culture of the pre-populist Internet and the deeply-held
beliefs of Perl's author, Larry Wall, gave rise to the free and open
distribution policy of perl.  Perl is supported by its users.  The
core, the standard Perl library, the optional modules, and the
documentation you're reading now were all written by volunteers.  See
the personal note at the end of the README file in the perl source
distribution for more details.  See L<perlhist> (new as of 5.005)
for Perl's milestone releases.

=end original

pre-populist なインターネットの独特の文化と、Perl の作者である Larry
Wall の強い信条が、perl のフリーでオープンな配布政策を生じさせました。
Perl はその利用者によってサポートされています。コア、Perl の標準
ライブラリ、オプションモジュール、そしてあなたが今読んでいる資料は
全てボランティアの手で書かれました。詳細は perl ソース配布セットの
README ファイルの最後にあるパーソナルノートを参照して下さい。
Perl のマイルストーンリリースについてはL<perlhist>(5.005で追加)
を参照してください

=begin original

In particular, the core development team (known as the Perl Porters)
are a rag-tag band of highly altruistic individuals committed to
producing better software for free than you could hope to purchase for
money.  You may snoop on pending developments via the archives at
http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/
and http://archive.develooper.com/perl5-porters@perl.org/
or the news gateway nntp://nntp.perl.org/perl.perl5.porters or
its web interface at http://nntp.perl.org/group/perl.perl5.porters ,
or read the faq at http://simon-cozens.org/writings/p5p-faq ,
or you can subscribe to the mailing list by sending
perl5-porters-request@perl.org a subscription request
(an empty message with no subject is fine).

=end original

特に、(Perl Porters として知られる)コア開発チームは、お金を出してで
も購入したいと思うレベルのものよりも、さらに良いソフトウェアを無
料で作り出すのだと誓っている、非常に利他的な人達の寄せ集め部隊です。
http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/
や
http://archive.develooper.com/perl5-porters@perl.org/
またはニュースゲートウェイ nntp://nntp.perl.org/perl.perl5.porters または
その web インターフェースである http://nntp.perl.org/group/perl.perl5.porters ,
または http://simon-cozens.org/writings/p5p-faq の FAQ を
通して延び延びとなっている開発についてかぎまわることもできます。
あるいは、perl5-porters-request@perl.org へ登録願いを出すことに
よってメイリングリストに参加することもできます
(タイトルなしの空メールでかまいません)。

=begin original

While the GNU project includes Perl in its distributions, there's no
such thing as "GNU Perl".  Perl is not produced nor maintained by the
Free Software Foundation.  Perl's licensing terms are also more open
than GNU software's tend to be.

=end original

GNU プロジェクトはその配布セットにPerlを含んでいますが、"GNU Perl"
のようなものはありません。Perl は Free Software Foundation による作成も
保守もされてはいません。Perl のライセンス条件は GNU ソフトウェアが
通常取っているよりもさらにオープンなものとなっています。

=begin original

You can get commercial support of Perl if you wish, although for most
users the informal support will more than suffice.  See the answer to
"Where can I buy a commercial version of perl?" for more information.

=end original

あなたが望むなら、Perl の商用サポートを受けることが出来ます。
けれども、大半の利用者にとっては、非公式のサポートは
期待水準以上のものでしょう。
詳しくは "Where can I buy a commercial version of perl?" 
(どこで商用版Perlを買うことが出来ますか?) の回答を参照してください。

=head2 Which version of Perl should I use?

(どのバージョンの Perl を使うべきなのでしょうか?)

=begin original

You should definitely use version 5.  Version 4 is old, limited, and
no longer maintained; its last patch (4.036) was in 1992, long ago and
far away.  Sure, it's stable, but so is anything that's dead; in fact,
perl4 had been called a dead, flea-bitten camel carcass.  The most
recent production release is 5.8.2 (although 5.005_03 and 5.6.2 are
still supported). The most cutting-edge development release is 5.9.
Further references to the Perl language in this document refer to the
production release unless otherwise specified.  There may be one or
more official bug fixes by the time you read this, and also perhaps
some experimental versions on the way to the next release.
All releases prior to 5.004 were subject to buffer overruns, a grave
security issue.

=end original

明らかにバージョン 5を使うべきです。バージョン 4は古く、機能も限定されていて、
もはや保守もされていません。その最後のパッチ(4.036)は 1992 年で、
そして長い時間が経っています。確かに perl4 は安定しているかもしれませんが、
もはやそれは死んだものなのです。
実際、perl4 はハエのたかったラクダの死骸と呼ばれていました。
最新の本番リリースは 5.8.2 です(5.005_03 と 5.6.2 もまだサポートされていますが)。
最も先頭をいっているのは開発リリース 5.9 です。本ドキュメントでは
特に断りのない限りこれらのバージョンのことを指します。あなたがこれを
読んでいる間にも、少なからぬバグフィックスが行われているでしょう。
そして、次のリリースに向けた試験バージョンが試されているでしょう。
5.004 より前のリリースは全てバッファオーバーランがあることが指摘されていて、
これはセキュリティ上問題です。

=head2 What are perl4 and perl5?

(perl4 と perl5 ってなんですか?)

=begin original

Perl4 and perl5 are informal names for different versions of the Perl
programming language.  It's easier to say "perl5" than it is to say
"the 5(.004) release of Perl", but some people have interpreted this
to mean there's a language called "perl5", which isn't the case.
Perl5 is merely the popular name for the fifth major release (October 1994),
while perl4 was the fourth major release (March 1991).  There was also a
perl1 (in January 1988), a perl2 (June 1988), and a perl3 (October 1989).

=end original

perl4 と perl5 は、perl プログラミング言語の異なったバージョンの
非公式な名称です。"Perl の 5(.004) リリース"というより、"perl5" と言う方が
簡単です。
しかし、ある人々は、大文字ではない"perl5"と呼ばれる言語があることを
意味するのだと解釈しました。
perl5 は単に五番目のメジャーリリース(1994 年 10 月)の普及した名称ですが、
一方 perl4 は四番目のメジャーリリース(1991 年 3 月)でした。
同様に、perl1(1988 年 1 月)、
perl2(1988 年 6 月) そしてperl3(1989 年 10 月)もありました。

=begin original

The 5.0 release is, essentially, a ground-up rewrite of the original
perl source code from releases 1 through 4.  It has been modularized,
object-oriented, tweaked, trimmed, and optimized until it almost doesn't
look like the old code.  However, the interface is mostly the same, and
compatibility with previous releases is very high.
See L<perltrap/"Perl4 to Perl5 Traps">.

=end original

5.0 のリリースは本質的に、リリース 1 からリリース 4 までの
perl ソースコードの完全な書き換えです。
それは、旧コードには似ても似つかなくなるまで、モジュール化され、
オブジェクト指向となり、微調整され、整備され、最適化されました。
しかしながら、インターフェースはほとんど同じであり、以前のバージョンとの
互換性は非常に高いです。
L<perltrap/"Perl4 to Perl5 Traps">を参照してください。

=begin original

To avoid the "what language is perl5?" confusion, some people prefer to
simply use "perl" to refer to the latest version of perl and avoid using
"perl5" altogether.  It's not really that big a deal, though.

=end original

「perl5 はどんな言語ですか？」という混乱を避けるため、ある人々は
perl の最新バージョンに言及するのに単に"perl"を使うのを好み、全体に
"perl5"を使うのを避けています。本当はたいした事ではないのですが。

=begin original

See L<perlhist> for a history of Perl revisions.

=end original

Perl の改訂の歴史に関しては L<perlhist> を参照してください。

=head2 What is Ponie?

=begin original

At The O'Reilly Open Source Software Convention in 2003, Artur
Bergman, Fotango, and The Perl Foundation announced a project to
run perl5 on the Parrot virtual machine named Ponie. Ponie stands for
Perl On New Internal Engine.  The Perl 5.10 language implementation
will be used for Ponie, and there will be no language level
differences between perl5 and ponie.  Ponie is not a complete rewrite
of perl5.

=end original

2003 年の O'Reilly Open Source Software Convention で、
Artur Bergman, Fotango, The Perl Foundation は perl5 を Parrot 仮想マシンで
動作させるプロジェクトである Ponie をアナウンスしました。
Ponie は Perl On New Internal Engine の略です。
Perl 5.10 の言語実装は Ponie が用いられ、perl5 と ponie は言語レベルでの
違いはない予定です。Ponie は perl5 の完全な書き換えではありません。

=begin original

For more details, see http://www.poniecode.org/

=end original

詳細については、http://www.poniecode.org/ を見てください。

=head2 What is perl6?

(perl6ってなんですか?)

=begin original

At The Second O'Reilly Open Source Software Convention, Larry Wall
announced Perl6 development would begin in earnest. Perl6 was an oft
used term for Chip Salzenberg's project to rewrite Perl in C++ named
Topaz. However, Topaz provided valuable insights to the next version
of Perl and its implementation, but was ultimately abandoned.

=end original

第 2 回 O'Reilly Open Source Software Convention において、 Larry Wall は
Perl6 の開発を本格的に開始するとアナウンスしました。
Perl6 は Chip Salzenberg による Topaz と呼ばれる Perl を C++ で書き直す
プロジェクトでしばしば使われていました。Topaz は Perl の次のバージョンと
その実装への価値ある知見をもたらしましたが、完全に中断しています。

=begin original

If you want to learn more about Perl6, or have a desire to help in
the crusade to make Perl a better place then peruse the Perl6 developers
page at http://dev.perl.org/perl6/ and get involved.

=end original

Perl6 についてもっと知りたい、または Perl をよりよき場所へと導く
十字軍を助けたいなら、Perl6 開発者ページ http://dev.perl.org/perl6/ を
熟読して、参加してください。

=begin original

Perl6 is not scheduled for release yet, and Perl5 will still be supported
for quite awhile after its release. Do not wait for Perl6 to do whatever
you need to do.

=end original

Perl6 はまだリリースの予定はなく、Perl5 は Perl6 がリリースされた後も
しばらくの間サポートされます。
何かをしようとする時に、Perl6を待つ必要はありません。

=begin original

"We're really serious about reinventing everything that needs reinventing."
--Larry Wall

=end original

"We're really serious about reinventing everything that needs reinventing."
--Larry Wall

=head2 How stable is Perl?

(Perlはどのくらい安定しているのでしょうか?)

=begin original

Production releases, which incorporate bug fixes and new functionality,
are widely tested before release.  Since the 5.000 release, we have
averaged only about one production release per year.

=end original

バグのフィックスと新機能を組み入れた本番リリースは、リリース前に
広くテストされます。平均すると、5.000 のリリースからはだいたい一年に一回の割で
本番リリースをしてきました。

=begin original

Larry and the Perl development team occasionally make changes to the
internal core of the language, but all possible efforts are made toward
backward compatibility.  While not quite all perl4 scripts run flawlessly
under perl5, an update to perl should nearly never invalidate a program
written for an earlier version of perl (barring accidental bug fixes
and the rare new keyword).

=end original

Larry と Perl 開発チームは時折言語内部のコアに対する変更を行いますが、
可能な限り旧版との互換性維持に努めています。全ての perl4 スクリプトが
perl5 の下で無傷で走るわけではありませんが、perl のアップデートによって、
(偶発的なバグフィックスの排除とまれな新しいキーワードがなければ)
以前のバージョンの perl 向けに書かれたプログラムを無効になってしまうことは
ほとんどありえないでしょう。

=head2 Is Perl difficult to learn?

(Perlは学ぶのが難しいのでしょうか?)

=begin original

No, Perl is easy to start learning--and easy to keep learning.  It looks
like most programming languages you're likely to have experience
with, so if you've ever written a C program, an awk script, a shell
script, or even a BASIC program, you're already partway there.

=end original

いいえ。Perlは学び始めるのが容易で -- しかも学び続けるのが容易なのです。
Perlはあなたが(たぶん)慣れ親しんできたたいていのプログラミング
言語のように見えます。ですから、C プログラムを、awk スクリプトを、
シェルスクリプトを、はたまたBASICのプログラムであろうと書いたことがあるのなら、
既に習得の途上にあるわけです。

=begin original

Most tasks only require a small subset of the Perl language.  One of
the guiding mottos for Perl development is "there's more than one way
to do it" (TMTOWTDI, sometimes pronounced "tim toady").  Perl's
learning curve is therefore shallow (easy to learn) and long (there's
a whole lot you can do if you really want).

=end original

たいていのタスクは Perl 言語の小さなサブセットを要求するだけです。
Perlの開発における指導的モットーのひとつは、「それを行うやり方は
一つではない」("there's more than one way to do it)というもので
す(TMTOWTDI、時々"tim toady"と発音される)。それ故、Perl の習得曲線は浅く
(学びやすく)長い(もしほんとうに望むのならできることは山ほどある)のです。

=begin original

Finally, because Perl is frequently (but not always, and certainly not by
definition) an interpreted language, you can write your programs and test
them without an intermediate compilation step, allowing you to experiment
and test/debug quickly and easily.  This ease of experimentation flattens
the learning curve even more.

=end original

最後に、Perl はしばしば(しかし常に、ではありません。定義によります)
言われるようにインタープリター型言語です。つまり、プログラムを書いたら、
中間コンパイルステップに入らずそのままテストでき、実験や、
テスト/デバッグをすばやく、かつ容易に行なえるようにしてくれるわけです。
この実験の容易さが、よりいっそう習得曲線を平らにします

=begin original

Things that make Perl easier to learn: Unix experience, almost any kind
of programming experience, an understanding of regular expressions, and
the ability to understand other people's code.  If there's something you
need to do, then it's probably already been done, and a working example is
usually available for free.  Don't forget the new perl modules, either.
They're discussed in Part 3 of this FAQ, along with CPAN, which is
discussed in Part 2.

=end original

Perl をより学びやすくするもの: UNIX の経験、ほとんどあらゆる種類の
プログラミング経験、正規表現の理解、そして他の人のコードを理解する力。
あなたが何か行う必要がある場合、たぶんそれは行われており、
通常その仕事の事例はフリーで利用することができます。新しい perl モジュールも
忘れてはなりません。それらは二章で議論されている CPAN と共に、
この FAQ の三章で議論されています。

=head2 How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?

(Java, Python, REXX, Scheme, Tcl といった他の言語と比べて Perl はどうなんでしょうか?)

=begin original

Favorably in some areas, unfavorably in others.  Precisely which areas
are good and bad is often a personal choice, so asking this question
on Usenet runs a strong risk of starting an unproductive Holy War.

=end original

いくつかの領域では優っていて、不利な部分もあるというところでしょう。
正確には、どの領域で有利でどの領域が不利かということは、個々人の好みの問題です。
ですから、この質問を Usenet で尋ねるのは非生産的な
聖戦を始めるという大きなリスクを伴います。

=begin original

Probably the best thing to do is try to write equivalent code to do a
set of tasks.  These languages have their own newsgroups in which you
can learn about (but hopefully not argue about) them.

=end original

たぶん最も良い方法は、等価な仕事をするひとそろいのコードを書いてみることです。
これらの言語とも、それらについて(願わくば言い争うためでなく)
習うためのニュースグループを持っています。 

=begin original

Some comparison documents can be found at http://language.perl.com/versus/
if you really can't stop yourself.

=end original

どうしても、というのなら http://language.perl.com/versus/ に
比較を行ったドキュメントが幾つかあります。

=head2 Can I do [task] in Perl?

(Perlで○○を行えますか?)

=begin original

Perl is flexible and extensible enough for you to use on virtually any
task, from one-line file-processing tasks to large, elaborate systems.
For many people, Perl serves as a great replacement for shell scripting.
For others, it serves as a convenient, high-level replacement for most of
what they'd program in low-level languages like C or C++.  It's ultimately
up to you (and possibly your management) which tasks you'll use Perl
for and which you won't.

=end original

Perlは、オンラインのファイル処理タスクから複雑なシステムまでほとんど
全てのタスクで使うのに十分な柔軟性があり、高い拡張性を持っています。
多くの人々にとっては、Perl はシェルスクリプティングに対する
偉大な代用品として仕えます。他の人々にとっては、C やC++ のような
低水準言語でプログラムしてきた大半のものに対する、便利で高水準な
代用品として仕えます。最終的には Perl をどのタスクに使ってどれに
使わないかはあなた(そしてたぶんあなたの管理)によります。

=begin original

If you have a library that provides an API, you can make any component
of it available as just another Perl function or variable using a Perl
extension written in C or C++ and dynamically linked into your main
perl interpreter.  You can also go the other direction, and write your
main program in C or C++, and then link in some Perl code on the fly,
to create a powerful application.  See L<perlembed>.

=end original

API を提供するライブラリがあれば、そこにあるコンポーネントをみんな、
ちょうどもうひとつの Perl 関数として、あるいはC やC++ で書かれ、
主要な perl インタープリタにダイナミックリンクされた Perl エクステンションを
使った変数として、利用することができます。また、他の方向に行って、
強力なアプリケーションを制作するために、主要なプログラムを
C や C++ で書いて、それをそのままちょっとした Perl コードにリンクさせることも
可能です。L<perlembed> を参照してください。

=begin original

That said, there will always be small, focused, special-purpose
languages dedicated to a specific problem domain that are simply more
convenient for certain kinds of problems.  Perl tries to be all things
to all people, but nothing special to anyone.  Examples of specialized
languages that come to mind include prolog and matlab.

=end original

ある種の問題に対しては単により便利で、特定の問題領域専用の、小型で、
集約された、特別な目的を持った言語は常にあるものだと言われています。
Perl はあらゆる人に対してあらゆるものであろうとしていますが、
誰かに対する何か特別なものではありません。特化した言語の例としては
prolog と matlab が思い浮かんできます。

=head2 When shouldn't I program in Perl?

(Perl でプログラムするべきではないのはどういう場合ですか?)

=begin original

When your manager forbids it--but do consider replacing them :-).

=end original

あなたのマネージャがそれを禁じた時です -- しかし、マネージャー達を
交代させることを熟考して下さい  :-)。

=begin original

Actually, one good reason is when you already have an existing
application written in another language that's all done (and done
well), or you have an application language specifically designed for a
certain task (e.g. prolog, make).

=end original

実際には、他の言語で記述されていてすでに使われているような(さらに
それがうまく動いている)アプリケーションがあるとか、
ある特定のタスクのために特別にデザインされたアプリケーション言語(prolog や
make など)があるというのが理由になるでしょう。

=begin original

For various reasons, Perl is probably not well-suited for real-time
embedded systems, low-level operating systems development work like
device drivers or context-switching code, complex multi-threaded
shared-memory applications, or extremely large applications.  You'll
notice that perl is not itself written in Perl.

=end original

様々な理由により、Perl はリアルタイム組込みシステムとかデバイスドライバや
コンテキスト切り替えなどの低レベルなオペレーティングシステムの開発作業、
複雑なマルチスレッド、共有メモリを使ったアプリケーション、
非常に大きなアプリケーションなどには向いていません。
あなたは perl が Perl それ自身で記述されてないということに気がつくかも知れません。

=begin original

The new, native-code compiler for Perl may eventually reduce the
limitations given in the previous statement to some degree, but understand
that Perl remains fundamentally a dynamically typed language, not
a statically typed one.  You certainly won't be chastised if you don't
trust nuclear-plant or brain-surgery monitoring code to it.  And Larry
will sleep easier, too--Wall Street programs not withstanding. :-)

=end original

Perl 用の新たなネイティブコードコンパイラーは上に挙げた幾つかの弱点を
改善してくれるかもしれません。
けれども、それでも Perl は基本的には動的に型付け(dynamically typed)される
言語であって、静的に型付け(statically typed)される言語ではないということを
理解してください。
原子力発電所で使うプログラムや脳外科手術モニタリングプログラムを
信用していないのであれば、懲らしめられることはありません。
そして、Larry もまた簡単に眠ってしまいます -- ウォール街は抵抗す
るようプログラムされてはいません :-)

=head2 What's the difference between "perl" and "Perl"?

(“perl”と“Perl”の違いはなんですか?)

=begin original

One bit.  Oh, you weren't talking ASCII? :-) Larry now uses "Perl" to
signify the language proper and "perl" the implementation of it,
i.e. the current interpreter.  Hence Tom's quip that "Nothing but perl
can parse Perl."  You may or may not choose to follow this usage.  For
example, parallelism means "awk and perl" and "Python and Perl" look
OK, while "awk and Perl" and "Python and perl" do not.  But never
write "PERL", because perl is not an acronym, apocryphal
folklore and post-facto expansions notwithstanding.

=end original

一ビット。ああ、ASCII のことを話してるんじゃないの? :-) 
Larry は現在“Perl”をその言語の特性を表わすために使い、
“perl”を言語の実装、たとえばインタープリターとして使っています。
Tom の「お言葉」では“違いはないが perl は Perl を解析できる”となります。
たとえば、“awkとperl”とか“PythonとPerl”といった比較は良いように
見えますが、“awkとPerl”とか“Pythonとperl”はそうではありません。
ただし、“PERL”と書いてはいけません。なぜなら、perlは何かの
頭字語ではないからです。
実際のところは後づけのものがあるのですが。

=head2 Is it a Perl program or a Perl script?

(Perl プログラム、それとも Perl スクリプト?)

=begin original

Larry doesn't really care.  He says (half in jest) that "a script is
what you give the actors.  A program is what you give the audience."

=end original

Larry は気にしてはいません。冗談交じりに彼がいうには、
“スクリプト(台本)はあなたを俳優にするもの。プログラムはあなたを
観衆にするもの”ということです。

=begin original

Originally, a script was a canned sequence of normally interactive
commands--that is, a chat script.  Something like a UUCP or PPP chat
script or an expect script fits the bill nicely, as do configuration
scripts run by a program at its start up, such F<.cshrc> or F<.ircrc>,
for example.  Chat scripts were just drivers for existing programs,
not stand-alone programs in their own right.

=end original

元々は、スクリプトとはチャットスクリプトのように、
通常の対話コマンドの羅列でした。
uucp とか ppp のチャットスクリプト、あるいは F<.cshrc> や F<.ircrc> のような
プログラムのスタートアップスクリプトがそうです。
チャットスクリプトは既にあるプログラムを
取り扱うためのドライバであり、独立したプログラムではありません。

=begin original

A computer scientist will correctly explain that all programs are
interpreted and that the only question is at what level.  But if you
ask this question of someone who isn't a computer scientist, they might
tell you that a I<program> has been compiled to physical machine code
once and can then be run multiple times, whereas a I<script> must be
translated by a program each time it's used.

=end original

コンピュータ科学者は全てのプログラムが解釈されることを正しく
説明しようとするでしょう。
しかしもしあなたがコンピュータ科学者ではない人にこの質問をしたならば、
彼らはI<プログラム>は物理的なマシンコードに一度コンパイルされて
何度もそれを実行することができるのに対して、I<スクリプト>は
使われる度毎に変換されるという回答をするかもしれません。

=begin original

Perl programs are (usually) neither strictly compiled nor strictly
interpreted.  They can be compiled to a byte-code form (something of a
Perl virtual machine) or to completely different languages, like C or
assembly language.  You can't tell just by looking at it whether the
source is destined for a pure interpreter, a parse-tree interpreter,
a byte-code interpreter, or a native-code compiler, so it's hard to give
a definitive answer here.

=end original

Perl プログラムは、通常は厳密な意味においてコンパイルされるということはなく、
さらに厳密な意味において解釈(interpret)されることもありません。
Perl プログラムはバイトコード形式(Perl の仮想機械に対するもの)へ
翻訳することができますし、あるいは C だとかアセンブラのような完全に別な言語へ
翻訳することもできます。
あなたはソースコードが純粋なインタープリターのためにデザインされたのか、
parse-tree インタープリターのためにデザインされたのか、バイトコード
インタープリターのためにデザインされたのか、
あるいはネイティブコードコンパイラーのためにデザインされたのかという区別を
その外見から判断することはできません。
ですから、ここでこの質問に完璧に答えるのは難しいのです。

=begin original

Now that "script" and "scripting" are terms that have been seized by
unscrupulous or unknowing marketeers for their own nefarious purposes,
they have begun to take on strange and often pejorative meanings,
like "non serious" or "not real programming".  Consequently, some Perl
programmers prefer to avoid them altogether.

=end original

今では"script"や"scripting"というのは、
悪徳な目的のために無遠慮な、あるいは無知な商人に捕らえられてしまった用語です。
これらは "non serious" や "not real programming" と同様、
不思議でしばしば軽蔑的な意味を持ち始めています。
そのようなわけで、これらの単語を使わないようにしている Perl プログラマもいます。

=head2 What is a JAPH?

(JAPHってなんですか?)

=begin original

These are the "just another perl hacker" signatures that some people
sign their postings with.  Randal Schwartz made these famous.  About
100 of the earlier ones are available from
http://www.cpan.org/misc/japh .

=end original

何人かの人が自分の投稿に“just another perl hacker”というシグネチャーを
つかっていました。なかでもRandal Schwartzのものが有名です。
初期のものから百個ばかりが
http://www.cpan.org/misc/japh
から入手できます。

=head2 Where can I get a list of Larry Wall witticisms?

(Larry Wallの「お言葉」(witticisms)はどこで手に入れられますか?)

=begin original

Over a hundred quips by Larry, from postings of his or source code,
can be found at http://www.cpan.org/misc/lwall-quotes.txt.gz .

=end original

投稿されたものとか、ソースコードにあった百個以上のLarryの「お言葉」が
http://www.cpan.org/misc/lwall-quotes.txt.gz
で見つけられます。

=head2 How can I convince my sysadmin/supervisor/employees to use version 5/5.6.1/Perl instead of some other language?

(私に関係するシステム管理者や、雇っている人々に、どうすれば他の言語ではなく Perl/Perl 5/Perl 5.6.1 を使うように説得できるでしょうか?)

=begin original

If your manager or employees are wary of unsupported software, or
software which doesn't officially ship with your operating system, you
might try to appeal to their self-interest.  If programmers can be
more productive using and utilizing Perl constructs, functionality,
simplicity, and power, then the typical manager/supervisor/employee
may be persuaded.  Regarding using Perl in general, it's also
sometimes helpful to point out that delivery times may be reduced
using Perl compared to other languages.

=end original

あなたのマネージャであるとかあなたが雇っている人々が、
サポートされていないソフトウェアやあなたの使っている
オペレーティングシステム用に公式に出荷されていないソフトウェアに対して
用心しているというのであれば、彼ら自身の興味に訴えかけることを
試せるかもしれません。
Perl の構成であるとか、機能性、単純さ、威力を使ったり活用することによって
プログラマーがより生産的になるのであれば、典型的な管理者(や雇っている人)などを
説得できるでしょう。
Perl の使用に関しては、同様に(Perl の使用によって)開発時間が
他の言語と比べたときに短縮されることが助けになることがあるかもしれません。

=begin original

If you have a project which has a bottleneck, especially in terms of
translation or testing, Perl almost certainly will provide a viable,
quick solution.  In conjunction with any persuasion effort, you
should not fail to point out that Perl is used, quite extensively, and
with extremely reliable and valuable results, at many large computer
software and hardware companies throughout the world.  In fact,
many Unix vendors now ship Perl by default.  Support is usually
just a news-posting away, if you can't find the answer in the
I<comprehensive> documentation, including this FAQ.

=end original

もしあなたが特に変換とかテストにおいてボトルネックを抱えたプロジェクトを
持っているのであれば、Perl はほぼ確実に明確、かつ迅速な解決策を提供するでしょう。
なんらかの説得の努力と組み合わせて、
あなたは Perl は非常に幅広く使われていて、世界中至る所のコンピューター
ソフトウェアやハードウェアの企業において非常に高い信頼と価値ある結果が
あることを説明することに失敗すべきでないでしょう。
現に、多くの UNIX ベンダーは現在デフォルトで Perl を出荷しています。
そしてサポートとは、あなたがこのFAQを含めて I<総合的な> ドキュメントに回答を
見つけることができなければ、通常は単に netnews に投稿することです。

=begin original

See http://www.perl.org/advocacy/ for more information.

=end original

詳しい情報は http://www.perl.org/advocacy/ を参照してください。

=begin original

If you face reluctance to upgrading from an older version of perl,
then point out that version 4 is utterly unmaintained and unsupported
by the Perl Development Team.  Another big sell for Perl5 is the large
number of modules and extensions which greatly reduce development time
for any given task.  Also mention that the difference between version
4 and version 5 of Perl is like the difference between awk and C++.
(Well, OK, maybe it's not quite that distinct, but you get the idea.)
If you want support and a reasonable guarantee that what you're
developing will continue to work in the future, then you have to run
the supported version.  As of December 2003 that means running either
5.8.2 (released in November 2003), or one of the older releases like
5.6.2 (also released in November 2003; a maintenance release to let perl
5.6 compile on newer systems as 5.6.1 was released in April 2001) or
5.005_03 (released in March 1999),
although 5.004_05 isn't that bad if you B<absolutely> need such an old
version (released in April 1999) for stability  reasons.
Anything older than 5.004_05 shouldn't be used.

=end original

もしあなたが、古いバージョンの perl からのアップグレードに対する不平・
不満に直面しているのであれば、(perl の)バージョン 4 はまったく
保守されていないことや、Perl 開発チームによるサポートも
されていないということを指摘しましょう。
もう一つの Perl5 の大きなウリは、なんらかの仕事をするための開発時間を
大きく削減するようなモジュールやエクステンションが数多くあるということでしょう。
同様に、Perl のバージョン 4 と 5 との間の違いはawkとC++との間にある違い
(うん、まあそんなには違ってないんだろうけどでも趣旨はわかるでしょ?)くらい
大きいということに言及しましょう。
もしあなたが将来に渡り開発し続けているものに対してのサポートや現実的な
利益というものを欲しているのであれば、サポートされているバージョンを
使うべきでしょう。
2003 年 12 月の時点では、これはリリース 5.8.2 (2003 年 11 月リリース)か
リリース 5.6.2 (これも2003 年 11 月リリース;
2001 年 4 月リリースのリリース 5.6.1 より新しいシステムで 5.6 をコンパイルするための
メンテナンスリリース)か
5.005_03(1999 年 3 月リリース)といった古いバージョンのひとつのことを意味しますが、
もしB<どうしても>安定性のために古いバージョンが必要なら、
5.004_05(1999 年 4 月リリース)でもそう悪くはありません。
5.004_05 より古いものは使うべきではありません。

=begin original

Of particular note is the massive bug hunt for buffer overflow
problems that went into the 5.004 release.  All releases prior to
that, including perl4, are considered insecure and should be upgraded
as soon as possible.

=end original

注意すべきことがらとして、5.004 に至るまでバッファーオーバーフローの
可能性がありました。
Perl4 も含めてこれ以前の全てのリリースは安全性に問題があります。
速やかにバージョンアップすべきです。

=begin original

In August 2000 in all Linux distributions a new security problem was
found in the optional 'suidperl' (not built or installed by default)
in all the Perl branches 5.6, 5.005, and 5.004, see
http://www.cpan.org/src/5.0/sperl-2000-08-05/
Perl maintenance releases 5.6.1 and 5.8.0 have this security hole closed.
Most, if not all, Linux distribution have patches for this
vulnerability available, see http://www.linuxsecurity.com/advisories/ ,
but the most recommendable way is to upgrade to at least Perl 5.6.1.

=end original

2000 年 8 月に、全ての Linux ディストリビューションは Perl 5.6, 5.005, 5.004 に
含まれる、オプションの 'suidperl' (デフォルトではビルドやインストールは
されません) に新しいセキュリティ問題があるのを発見しました。
http://www.cpan.org/src/5.0/sperl-2000-08-05/
を参照してください。
Perl のメンテナンスリリースである 5.6.1 と 5.8.0 ではこのセキュリティホールは
修正されています。全てではないものの、ほとんどの Linux ディストリビューションでは
この脆弱性のためのパッチを用意しています。
http://www.linuxsecurity.com/advisories/ を参照して下さい。
しかし、もっとも推奨されるのは少なくとも 5.6.1 にアップグレードすることです。

=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997, 1998, 1999, 2000, 2001 Tom Christiansen and Nathan
Torkington.  All rights reserved.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples here are in the public
domain.  You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit.  A simple comment in the code giving credit to the FAQ would
be courteous but is not required.
