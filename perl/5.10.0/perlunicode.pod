
=encoding euc-jp

=head1 NAME

=begin original

perlunicode - Unicode support in Perl

=end original

perlunicode - Perl における Unicode サポート

=head1 DESCRIPTION

=head2 Important Caveats

(重要な警告)

=begin original

Unicode support is an extensive requirement. While Perl does not
implement the Unicode standard or the accompanying technical reports
from cover to cover, Perl does support many Unicode features.

=end original

Uncode サポートは大規模な要求です。
Perl は標準 Unicode や付随する技術的なレポートを一つ残らず
実装しているわけではありませんが、多くの Unicode 機能を
サポートしています。

=begin original

People who want to learn to use Unicode in Perl, should probably read
L<the Perl Unicode tutorial|perlunitut> before reading this reference
document.

=end original

Perl で Unicode を使うことを学びたい人は、多分このリファレンスを読む前に
L<the Perl Unicode tutorial|perlunitut> を読んだ方がよいでしょう。

=over 4

=item Input and Output Layers

(入出力層)

=begin original

Perl knows when a filehandle uses Perl's internal Unicode encodings
(UTF-8, or UTF-EBCDIC if in EBCDIC) if the filehandle is opened with
the ":utf8" layer.  Other encodings can be converted to Perl's
encoding on input or from Perl's encoding on output by use of the
":encoding(...)"  layer.  See L<open>.

=end original

Perl は、ファイルハンドルが ":utf8" 層を指定してオープンされると、
ファイルハンドルが Perl の内部 Unicode エンコーディング
(UTF-8, または EBCDIC の時は UTF-EBCDIC) を使うことが分かります。 
その他のエンコーディングは、":encoding(...)" 層を使うことで、
入力時の Perl のエンコーディングへの変換や出力時の Perl の
エンコーディングからの変換を行えます。
L<open> を参照してください。

=begin original

To indicate that Perl source itself is in UTF-8, use C<use utf8;>.

=end original

Perl のソース自身が UTF-8 であることを示すには、C<use utf8;> を
使ってください。

=item Regular Expressions

(正規表現)

=begin original

The regular expression compiler produces polymorphic opcodes.  That is,
the pattern adapts to the data and automatically switches to the Unicode
character scheme when presented with data that is internally encoded in
UTF-8 -- or instead uses a traditional byte scheme when presented with
byte data.

=end original

正規表現コンパイラは多態的なオペコードを生成します。
つまり、パターンはデータに対して適用され、データが内部で UTF-8 で
エンコードされている場合には Unicode 文字スキームに自動的に
切り替わります -- さもなければ、バイトデータで表されている場合には
伝統的なバイトスキームが使われます。

=item C<use utf8> still needed to enable UTF-8/UTF-EBCDIC in scripts

=begin original

As a compatibility measure, the C<use utf8> pragma must be explicitly
included to enable recognition of UTF-8 in the Perl scripts themselves
(in string or regular expression literals, or in identifier names) on
ASCII-based machines or to recognize UTF-EBCDIC on EBCDIC-based
machines.  B<These are the only times when an explicit C<use utf8>
is needed.>  See L<utf8>.

=end original

互換性のために、ASCII ベースのマシンにおいて Perl スクリプトそれ自身の
中の UTF-8 を(文字列や正規表現リテラル、あるいは変数名で) 認識可能に
するためや、EBCDIC ベースのマシンで UTF-EBCDIC を認識させるために
C<use utf8> プラグマを明示的に含めなければなりません。
B<これらは明示的に C<use utf8> が必要な唯一の場合です。>
L<utf8> を参照してください。

=item BOM-marked scripts and UTF-16 scripts autodetected

=begin original

If a Perl script begins marked with the Unicode BOM (UTF-16LE, UTF16-BE,
or UTF-8), or if the script looks like non-BOM-marked UTF-16 of either
endianness, Perl will correctly read in the script as Unicode.
(BOMless UTF-8 cannot be effectively recognized or differentiated from
ISO 8859-1 or other eight-bit encodings.)

=end original

Unicode BOM (UTF-16LE, UTF16-BE, またはUTF-8)で Perl スクリプトが
始まっていたり、スクリプトが BOM がついていない
UTF-16(BE か LE のいずれか) であった場合、Perl はそのスクリプトを
Unicode であるとして正しく読み込みます(BOM がない UTF-8 は、
効率的に ISO 8859-1 などの 8 ビットエンコーディングと区別したり
認識することができません。)

=item C<use encoding> needed to upgrade non-Latin-1 byte strings

=begin original

By default, there is a fundamental asymmetry in Perl's Unicode model:
implicit upgrading from byte strings to Unicode strings assumes that
they were encoded in I<ISO 8859-1 (Latin-1)>, but Unicode strings are
downgraded with UTF-8 encoding.  This happens because the first 256
codepoints in Unicode happens to agree with Latin-1.  

=end original

デフォルトでは、Perl の Unicode モデルにおける基本的な非対称があります:
バイト文字列から Unicode 文字列への暗黙の昇格はその文字列が
I<ISO 8859-1 (Latin-1)> でエンコードされているものと仮定しますが、
Unicode 文字列からのダウングレードは
UTF-8 エンコーディングへと行われます。
これは Unicode の最初の 256 文字が Latin-1 と共通であるからです。

=begin original

See L</"Byte and Character Semantics"> for more details.

=end original

詳細は L</"Byte and Character Semantics"> を参照してください。

=back

=head2 Byte and Character Semantics

(バイトと文字のセマンティクス)

=begin original

Beginning with version 5.6, Perl uses logically-wide characters to
represent strings internally.

=end original

バージョン 5.6 から、Perl は論理的なワイド文字を内部的な文字列の
表現のために使っています。

=begin original

In future, Perl-level operations will be expected to work with
characters rather than bytes.

=end original

将来は、Perl レベルの操作はバイトではなく文字に対して働くことになるでしょう。

=begin original

However, as an interim compatibility measure, Perl aims to
provide a safe migration path from byte semantics to character
semantics for programs.  For operations where Perl can unambiguously
decide that the input data are characters, Perl switches to
character semantics.  For operations where this determination cannot
be made without additional information from the user, Perl decides in
favor of compatibility and chooses to use byte semantics.

=end original

しかしながら、一時的な互換性の措置として、Perl は
プログラムに対するバイトセマンティクスから文字セマンティクスへの
安全な移行パスを提供することを目指します。
入力データが文字であると Perl が曖昧さなく決定できる操作については、
Perl は文字セマンティクスに切り替えます。
ユーザーからの付加的な情報抜きに決定することができない操作については
Perl は互換性の観点からバイトセマンティクスを選択します。

=begin original

This behavior preserves compatibility with earlier versions of Perl,
which allowed byte semantics in Perl operations only if
none of the program's inputs were marked as being as source of Unicode
character data.  Such data may come from filehandles, from calls to
external programs, from information provided by the system (such as %ENV),
or from literals and constants in the source text.

=end original

この動作は Perl の以前のバージョンとの互換性を維持し、プログラムの
入力が Unicode の文字データのソースであるとマークされていない場合にのみ
Perl の操作でバイトセマンティクスを許可します。
そのようなデータは、ファイルハンドル、外部プログラムの呼び出し、
システムから提供される情報(%ENV のような)、ソーステキスト中のリテラルや
定数といったものからくるものです。

=begin original

The C<bytes> pragma will always, regardless of platform, force byte
semantics in a particular lexical scope.  See L<bytes>.

=end original

C<bytes> プラグマは常に、プラットフォームとは無関係に、特定の
レキシカルスコープにおいてバイトセマンティクスを強制します。
L<bytes> を参照してください。

=begin original

The C<utf8> pragma is primarily a compatibility device that enables
recognition of UTF-(8|EBCDIC) in literals encountered by the parser.
Note that this pragma is only required while Perl defaults to byte
semantics; when character semantics become the default, this pragma
may become a no-op.  See L<utf8>.

=end original

C<utf8> プラグマは主としてパーサが遭遇するリテラル中の UTF-(8|EBCDIC) の
認識を有効にする互換デバイス(compatibility device)です。
このプラグマは Perl のデフォルトがバイトセマンティクスであるときにのみ
必要であることに注意してください。
文字セマンティクスがデフォルトである場合には、
このプラグマは何もしません。
L<utf8> を参照してください。

=begin original

Unless explicitly stated, Perl operators use character semantics
for Unicode data and byte semantics for non-Unicode data.
The decision to use character semantics is made transparently.  If
input data comes from a Unicode source--for example, if a character
encoding layer is added to a filehandle or a literal Unicode
string constant appears in a program--character semantics apply.
Otherwise, byte semantics are in effect.  The C<bytes> pragma should
be used to force byte semantics on Unicode data.

=end original

明示的に指定されない限り、Perl の演算子は Unicode データに対しては
文字セマンティクスを用い、非 Unicode データに対しては
バイトセマンティクスを用います。
文字セマンティクスの使用の決定はトランスペアレントに行われます。
もし入力データが Unicode ソースから来たもの -- たとえば、
文字エンコーディング層がファイルハンドルに附加されているか
リテラルの Unicode 文字列定数がプログラムの中にある -- のであれば
文字セマンティクスが適用されます。
そうでなければ、バイトセマンティクスが有効になります。
C<bytes> プラグマは Unicode データに対してバイトセマンティクスを
強制するときに使うと良いでしょう。

=begin original

If strings operating under byte semantics and strings with Unicode
character data are concatenated, the new string will be created by
decoding the byte strings as I<ISO 8859-1 (Latin-1)>, even if the
old Unicode string used EBCDIC.  This translation is done without
regard to the system's native 8-bit encoding. 

=end original

バイトセマンティクスの元での文字列の操作で、Unicode 文字データが
連結された文字列であった場合、新たな文字列は、古い Unicode 文字列が
EBCDIC を使っていたとしても、バイト文字列を I<ISO 8859-1 (Latin-1)> として
デコードすることで作成されます。
この変換はシステムのネイティブな 8 ビットエンコーディングとは
無関係に行われます。

=begin original

Under character semantics, many operations that formerly operated on
bytes now operate on characters. A character in Perl is
logically just a number ranging from 0 to 2**31 or so. Larger
characters may encode into longer sequences of bytes internally, but
this internal detail is mostly hidden for Perl code.
See L<perluniintro> for more.

=end original

文字セマンティクスの元では、伝統的にバイトに対して働いていた操作の多くが
文字に対して働きます。
Perl における文字は論理的には 0 から 2**31 までの範囲の数値です。
大きな文字は内部的にはより長いシーケンスにエンコードされる可能性が
ありますが、この内部の詳細は Perl プログラムからほとんど隠されています。
詳細は L<perluniintro> を参照してください。

=head2 Effects of Character Semantics

(文字セマンティクスの効果)

=begin original

Character semantics have the following effects:

=end original

文字セマンティクスは以下の効果を持っています:

=over 4

=item *

=begin original

Strings--including hash keys--and regular expression patterns may
contain characters that have an ordinal value larger than 255.

=end original

文字列 -- ハッシュのキーを含め -- と正規表現パターンは序数値として 255 を
超える値を持つ文字を含めることができます。

=begin original

If you use a Unicode editor to edit your program, Unicode characters may
occur directly within the literal strings in UTF-8 encoding, or UTF-16.
(The former requires a BOM or C<use utf8>, the latter requires a BOM.)

=end original


プログラムを編集するのに Unicode エディタを使っているのであれば、Unicode の
文字 UTF-8 か UTF-16 のエンコーディングコーディングでリテラル文字列に
含めることができます。
(前者は BOM か C<use utf8> を必要とし、後者は BOM を必要とします。)

=begin original

Unicode characters can also be added to a string by using the C<\x{...}>
notation.  The Unicode code for the desired character, in hexadecimal,
should be placed in the braces. For instance, a smiley face is
C<\x{263A}>.  This encoding scheme only works for all characters, but
for characters under 0x100, note that Perl may use an 8 bit encoding
internally, for optimization and/or backward compatibility.

=end original

Unicode の文字は C<\x{...}> 表記を使うことにより文字列に
追加することもできます。
その表現される Unicode コードは、16 進でブレースに囲みます。
たとえば、smiley face は C<\x{263A}> です。
このエンコーディングスキームは 0x100 未満の全ての文字でのみ動作します;
Perl は最適化や後方互換性のために内部で 8 ビットエンコーディングを
使うかもしれないことに注意してください。

=begin original

Additionally, if you

=end original

これに加えて、

   use charnames ':full';

=begin original

you can use the C<\N{...}> notation and put the official Unicode
character name within the braces, such as C<\N{WHITE SMILING FACE}>.

=end original

とすると C<\N{...}> 表記を使うことができ、公式な Unicode 文字名を
C<\N{WHITE SMILING FACE}> のようにブレースの中に置くことができます。

=item *

=begin original

If an appropriate L<encoding> is specified, identifiers within the
Perl script may contain Unicode alphanumeric characters, including
ideographs.  Perl does not currently attempt to canonicalize variable
names.

=end original

適切な L<encoding> が指定されていれば、Perl スクリプトの中の識別子で
表意文字を含めた Unicode の英数字を含めることができます。
Perl は現在、変数名を正規化しようとはしません。

=item *

=begin original

Regular expressions match characters instead of bytes.  "." matches
a character instead of a byte.

=end original

正規表現はバイトではなく文字にマッチします。
"." は一バイトではなく、ひとつの文字にマッチします。

=item *

=begin original

Character classes in regular expressions match characters instead of
bytes and match against the character properties specified in the
Unicode properties database.  C<\w> can be used to match a Japanese
ideograph, for instance.

=end original

正規表現中の文字クラスはバイトではなく文字にマッチし、Unicode の
特性データベースで定義されている文字特性に対してマッチを行います。
たとえば、C<\w> は日本語の表意文字にマッチさせるために使うことができます。

=item *

=begin original

Named Unicode properties, scripts, and block ranges may be used like
character classes via the C<\p{}> "matches property" construct and
the C<\P{}> negation, "doesn't match property".

=end original

名前付けされた Unicode の特性、用字、ブロックの範囲は C<\p{}>
"matches property" 構造やその否定形の C<\P{}> "doesn't match property" を
使った文字クラスで使うことができます。

=begin original

See L</"Unicode Character Properties"> for more details.

=end original

さらなる詳細については L</"Unicode Character Properties"> を
参照してください。

=begin original

You can define your own character properties and use them
in the regular expression with the C<\p{}> or C<\P{}> construct.

=end original

独自の文字特性を定義でき、C<\p{}> や C<\P{}> 構造での正規表現で使えます。

=begin original

See L</"User-Defined Character Properties"> for more details.

=end original

更なる詳細については L</"User-Defined Character Properties"> を
参照してください。

=item *

=begin original

The special pattern C<\X> matches any extended Unicode
sequence--"a combining character sequence" in Standardese--where the
first character is a base character and subsequent characters are mark
characters that apply to the base character.  C<\X> is equivalent to
C<(?:\PM\pM*)>.

=end original

特殊なパターン C<\X> は拡張 Unicode シーケンス -- Standardese の
"a combining character sequence" -- 最初の文字が基本となる文字で
続く文字が基本文字に適用されるマーク文字にマッチします。
C<\X> は C<(?:\PM\pM*)> と等価です。

=item *

=begin original

The C<tr///> operator translates characters instead of bytes.  Note
that the C<tr///CU> functionality has been removed.  For similar
functionality see pack('U0', ...) and pack('C0', ...).

=end original

C<tr///> 演算子はバイトではなく文字で変換します。
C<tr///CU> は削除されたことに注意してください。
同様のことを行うには pack('U0', ...) と pack('C0', ...) を
参照してください。

=item *

=begin original

Case translation operators use the Unicode case translation tables
when character input is provided.  Note that C<uc()>, or C<\U> in
interpolated strings, translates to uppercase, while C<ucfirst>,
or C<\u> in interpolated strings, translates to titlecase in languages
that make the distinction.

=end original

大小文字の変換演算子は Unicode の大小文字変換テーブルを、文字の入力が
あったときに使用します。
C<uc()> や展開文字列中の C<\U> は大文字に変換し、C<ucfirst> や
展開文字列中の C<\u> はその言語で区別されているときに
タイトルケースに変換します。

=item *

=begin original

Most operators that deal with positions or lengths in a string will
automatically switch to using character positions, including
C<chop()>, C<chomp()>, C<substr()>, C<pos()>, C<index()>, C<rindex()>,
C<sprintf()>, C<write()>, and C<length()>.  An operator that
specifically does not switch is C<vec()>.  Operators that really don't 
care include operators that treat strings as a bucket of bits such as 
C<sort()>, and operators dealing with filenames.

=end original

文字列の位置や長さを取り扱う演算子の大部分は自動的に文字の位置を
使うように変更されました。
これには C<chop()>, C<chomp()>, C<substr()>, C<pos()>, C<index()>,
C<rindex()>, C<sprintf()>, C<write()>, C<length()> が含まれます。
C<vec()> は変更されていません。
文字列をビットのバケツのように扱う C<sort()>、ファイル名を取り扱う
演算子は文字かどうかを気にしません。

=item *

=begin original

The C<pack()>/C<unpack()> letter C<C> does I<not> change, since it is often 
used for byte-oriented formats.  Again, think C<char> in the C language.

=end original

C<pack()>/C<unpack()> の文字 C<C> は I<変更されていません>。
なぜなら、これらはしばしばバイト指向の書式のために使われるからです。
繰り返しますが、C 言語の C<char> を考えてください。

=begin original

There is a new C<U> specifier that converts between Unicode characters
and code points. There is also a C<W> specifier that is the equivalent of
C<chr>/C<ord> and properly handles character values even if they are above 255.

=end original

Unicode の文字と符号位置の間の変換を行う新たな C<U> 指定子があります。
C<chr>/C<ord> と等価で、文字の値が 255 を超えていても適切に扱える
C<W> 指定子もあります。

=item *

=begin original

The C<chr()> and C<ord()> functions work on characters, similar to
C<pack("W")> and C<unpack("W")>, I<not> C<pack("C")> and
C<unpack("C")>.  C<pack("C")> and C<unpack("C")> are methods for
emulating byte-oriented C<chr()> and C<ord()> on Unicode strings.
While these methods reveal the internal encoding of Unicode strings,
that is not something one normally needs to care about at all.

=end original

C<chr()> 関数と C<ord()> 関数は C<pack("W")> や C<unpack("W")> のように
文字に対して働き、C<pack("C")> や C<unpack("C")> のようには I<働きません>。
C<pack("C")> と C<unpack("C")> は Unicode 文字列においてバイト指向の
C<chr()> や C<ord()> をエミュレートするためのメソッドです。
これらのメソッドが Unicode 文字列の内部エンコーディングを明らかにするので、
通常はケアする必要はありません。

=item *

=begin original

The bit string operators, C<& | ^ ~>, can operate on character data.
However, for backward compatibility, such as when using bit string
operations when characters are all less than 256 in ordinal value, one
should not use C<~> (the bit complement) with characters of both
values less than 256 and values greater than 256.  Most importantly,
DeMorgan's laws (C<~($x|$y) eq ~$x&~$y> and C<~($x&$y) eq ~$x|~$y>)
will not hold.  The reason for this mathematical I<faux pas> is that
the complement cannot return B<both> the 8-bit (byte-wide) bit
complement B<and> the full character-wide bit complement.

=end original

ビット文字列演算子 C<& | ^ ~> は文字データを操作できます。
しかし、例えば全ての文字の値が 255 以下のときに
ビット文字列演算を使った場合の後方互換性のために、
256 以上の値の文字と 255 以下の値の文字の両方が含まれている文字列に
C<~> (ビット補数) を使うべきではありません。
最も重要なことは、ド・モルガンの法則 (C<~($x|$y) eq ~$x&~$y> と
C<~($x&$y) eq ~$x|~$y>) が成り立たないということです。
この数学的な I<過失> の理由は補数(complement)が 8 ビットのビット補数
B<および> 文字幅のビット補数の B<両方> を返すことができないためです。

=item *

=begin original

lc(), uc(), lcfirst(), and ucfirst() work for the following cases:

=end original

lc(), uc(), lcfirst(), ucfirst() は以下の場合に働きます:

=over 8

=item *

=begin original

the case mapping is from a single Unicode character to another
single Unicode character, or

=end original

ケースマッピングが単一の Unicode 文字から
別の単一の Unicode 文字へのものであるか、

=item *

=begin original

the case mapping is from a single Unicode character to more
than one Unicode character.

=end original

ケースマッピングが単一の Unicode 文字から
一文字以上の Unicode 文字へのものである。

=back

=begin original

Things to do with locales (Lithuanian, Turkish, Azeri) do B<not> work
since Perl does not understand the concept of Unicode locales.

=end original

ロケール(Lithuanian, Turkish, Azeri)に付随することは B<働きません>。
それは Perl が Unicode のロケールのコンセプトを理解しないからです。

=begin original

See the Unicode Technical Report #21, Case Mappings, for more details.

=end original

詳しくは Unicode Technical Report #21 の Case Mappings を参照してください。

=begin original

But you can also define your own mappings to be used in the lc(),
lcfirst(), uc(), and ucfirst() (or their string-inlined versions).

=end original

しかし lc(), lcfirst(), uc(), ucfirst() (およびこれらの
文字列インライン版) で使える独自のマッピングも定義できます。

=begin original

See L</"User-Defined Case Mappings"> for more details.

=end original

更なる詳細については L</"User-Defined Case Mappings"> を参照してください。

=back

=over 4

=item *

=begin original

And finally, C<scalar reverse()> reverses by character rather than by byte.

=end original

そして最後に、C<scalar reverse()> はバイト単位ではなく文字単位で
反転を行います。

=back

=head2 Unicode Character Properties

(Unicode 文字特性)

=begin original

Named Unicode properties, scripts, and block ranges may be used like
character classes via the C<\p{}> "matches property" construct and
the C<\P{}> negation, "doesn't match property".

=end original

名前付けされた Unicode の特性、用字、ブロックの範囲は C<\p{}>
"matches property" 構造やその否定形の C<\P{}> "doesn't match property" を
使った文字クラスで使うことができます。

=begin original

For instance, C<\p{Lu}> matches any character with the Unicode "Lu"
(Letter, uppercase) property, while C<\p{M}> matches any character
with an "M" (mark--accents and such) property.  Brackets are not
required for single letter properties, so C<\p{M}> is equivalent to
C<\pM>. Many predefined properties are available, such as
C<\p{Mirrored}> and C<\p{Tibetan}>.

=end original

たとえば、C<\p{Lu}> は Unicode の "Lu" (Letter, uppercase) 特性を持つ任意の
文字にマッチし、C<\p{M}> は "M" (mark -- アクセントなど) 特性を持つ任意の
文字にマッチします。
ブラケットは一文字の特性では省略することができるので、C<\p{M}> は
C<\PM> と等価です。
C<\p{Mirrored}> や C<\p{Tibetan}> など多くの特性が定義されています。

=begin original

The official Unicode script and block names have spaces and dashes as
separators, but for convenience you can use dashes, spaces, or
underbars, and case is unimportant. It is recommended, however, that
for consistency you use the following naming: the official Unicode
script, property, or block name (see below for the additional rules
that apply to block names) with whitespace and dashes removed, and the
words "uppercase-first-lowercase-rest". C<Latin-1 Supplement> thus
becomes C<Latin1Supplement>.

=end original

公式の Unicode 用字およびブロックの名前はスペースとダッシュを
セパレータとして使っていますが、便利のため、ダッシュ、スペース、
アンダーバーを使うことができ、また、大小文字の違いは重要ではありません。
しかしながら、以下のネーミングにしたがって、首尾一貫して使うことを
お勧めします: Unicode の用字、特性、ブロックの名前 (ブロック名に
適用される付加的なルールについて以下を参照してください) から
空白とダッシュを取り除き、単語の先頭を大文字にし残りを小文字にします。
したがって、C<Latin-1 Supplement> は C<Latin1Supplement> となります。

=begin original

You can also use negation in both C<\p{}> and C<\P{}> by introducing a caret
(^) between the first brace and the property name: C<\p{^Tamil}> is
equal to C<\P{Tamil}>.

=end original

C<\p{}> と C<\P{}> の両方で、キャレット(^) を最初のブレースと
特性名の間に置くことによって意味を反転することができます:
C<\p{^Tamil}> は C<\P{Tamil}> と等価です。

=begin original

B<NOTE: the properties, scripts, and blocks listed here are as of
Unicode 5.0.0 in July 2006.>

=end original

B<注意: ここでの特性、用字、ブロックは 2006 年 7 月の Unicode 5.0.0 に
従っています。>

=over 4

=item General Category

=begin original

Here are the basic Unicode General Category properties, followed by their
long form.  You can use either; C<\p{Lu}> and C<\p{UppercaseLetter}>,
for instance, are identical.

=end original

以下に挙げるのは、Unicode の一般カテゴリ特性(General Category properties) で、
長形式が並んでいます。
たとえば、C<\p{Lu}> と C<\p{UppercaseLetter}> は同じものとして
扱うことができます。

    Short       Long

    L           Letter
    LC          CasedLetter
    Lu          UppercaseLetter
    Ll          LowercaseLetter
    Lt          TitlecaseLetter
    Lm          ModifierLetter
    Lo          OtherLetter

    M           Mark
    Mn          NonspacingMark
    Mc          SpacingMark
    Me          EnclosingMark

    N           Number
    Nd          DecimalNumber
    Nl          LetterNumber
    No          OtherNumber

    P           Punctuation
    Pc          ConnectorPunctuation
    Pd          DashPunctuation
    Ps          OpenPunctuation
    Pe          ClosePunctuation
    Pi          InitialPunctuation
                (may behave like Ps or Pe depending on usage)
    Pf          FinalPunctuation
                (may behave like Ps or Pe depending on usage)
    Po          OtherPunctuation

    S           Symbol
    Sm          MathSymbol
    Sc          CurrencySymbol
    Sk          ModifierSymbol
    So          OtherSymbol

    Z           Separator
    Zs          SpaceSeparator
    Zl          LineSeparator
    Zp          ParagraphSeparator

    C           Other
    Cc          Control
    Cf          Format
    Cs          Surrogate   (not usable)
    Co          PrivateUse
    Cn          Unassigned

=begin original

Single-letter properties match all characters in any of the
two-letter sub-properties starting with the same letter.
C<LC> and C<L&> are special cases, which are aliases for the set of
C<Ll>, C<Lu>, and C<Lt>.

=end original

単一文字の特性は同じ文字で始まる二文字の任意のサブ特性に含まれる
すべての文字にマッチします。
C<LC> と C<L&> は特別なケースで、これは C<Ll>, C<Lu>, C<Lt> の別名です。

=begin original

Because Perl hides the need for the user to understand the internal
representation of Unicode characters, there is no need to implement
the somewhat messy concept of surrogates. C<Cs> is therefore not
supported.

=end original

Perl はユーザーが Unicode 文字の内部表現について理解する必要が
ないようにしているので、サロゲートの面倒なコンセプトについて
実装する必要はありません。
従って、C<Cs> はサポートされていません。

=item Bidirectional Character Types

=begin original

Because scripts differ in their directionality--Hebrew is
written right to left, for example--Unicode supplies these properties in
the BidiClass class:

=end original

用字はその方向性で異なるので--たとえばヘブライ語は右から左に書きます --
Unicode は以下の特性を BidiClass クラスで提供しています:

    Property    Meaning

    L           Left-to-Right
    LRE         Left-to-Right Embedding
    LRO         Left-to-Right Override
    R           Right-to-Left
    AL          Right-to-Left Arabic
    RLE         Right-to-Left Embedding
    RLO         Right-to-Left Override
    PDF         Pop Directional Format
    EN          European Number
    ES          European Number Separator
    ET          European Number Terminator
    AN          Arabic Number
    CS          Common Number Separator
    NSM         Non-Spacing Mark
    BN          Boundary Neutral
    B           Paragraph Separator
    S           Segment Separator
    WS          Whitespace
    ON          Other Neutrals

=begin original

For example, C<\p{BidiClass:R}> matches characters that are normally
written right to left.

=end original

たとえば、C<\p{BidiClass:R}> は通常右から左に書く文字にマッチします。

=item Scripts

=begin original

The script names which can be used by C<\p{...}> and C<\P{...}>,
such as in C<\p{Latin}> or C<\p{Cyrillic}>, are as follows:

=end original

C<\p{Latin}> や C<\p{Cyrillic}> のような、C<\p{...}> と C<\P{...}> で
使うことのできる用字名は以下の通り:

    Arabic
    Armenian
    Balinese
    Bengali
    Bopomofo
    Braille
    Buginese
    Buhid
    CanadianAboriginal
    Cherokee
    Coptic
    Cuneiform
    Cypriot
    Cyrillic
    Deseret
    Devanagari
    Ethiopic
    Georgian
    Glagolitic
    Gothic
    Greek
    Gujarati
    Gurmukhi
    Han
    Hangul
    Hanunoo
    Hebrew
    Hiragana
    Inherited
    Kannada
    Katakana
    Kharoshthi
    Khmer
    Lao
    Latin
    Limbu
    LinearB
    Malayalam
    Mongolian
    Myanmar
    NewTaiLue
    Nko
    Ogham
    OldItalic
    OldPersian
    Oriya
    Osmanya
    PhagsPa
    Phoenician
    Runic
    Shavian
    Sinhala
    SylotiNagri
    Syriac
    Tagalog
    Tagbanwa
    TaiLe
    Tamil
    Telugu
    Thaana
    Thai
    Tibetan
    Tifinagh
    Ugaritic
    Yi

=item Extended property classes

=begin original

Extended property classes can supplement the basic
properties, defined by the F<PropList> Unicode database:

=end original

拡張特性クラスは基本特性を補完し、Unicode データベースの 
F<PropList> で定義されています:

    ASCIIHexDigit
    BidiControl
    Dash
    Deprecated
    Diacritic
    Extender
    HexDigit
    Hyphen
    Ideographic
    IDSBinaryOperator
    IDSTrinaryOperator
    JoinControl
    LogicalOrderException
    NoncharacterCodePoint
    OtherAlphabetic
    OtherDefaultIgnorableCodePoint
    OtherGraphemeExtend
    OtherIDStart
    OtherIDContinue
    OtherLowercase
    OtherMath
    OtherUppercase
    PatternSyntax
    PatternWhiteSpace
    QuotationMark
    Radical
    SoftDotted
    STerm
    TerminalPunctuation
    UnifiedIdeograph
    VariationSelector
    WhiteSpace

=begin original

and there are further derived properties:

=end original

その他にも派生した特性があります:

    Alphabetic  =  Lu + Ll + Lt + Lm + Lo + Nl + OtherAlphabetic
    Lowercase   =  Ll + OtherLowercase
    Uppercase   =  Lu + OtherUppercase
    Math        =  Sm + OtherMath

    IDStart     =  Lu + Ll + Lt + Lm + Lo + Nl + OtherIDStart
    IDContinue  =  IDStart + Mn + Mc + Nd + Pc + OtherIDContinue

    DefaultIgnorableCodePoint
                =  OtherDefaultIgnorableCodePoint
                   + Cf + Cc + Cs + Noncharacters + VariationSelector
                   - WhiteSpace - FFF9..FFFB (Annotation Characters)

    Any         =  Any code points (i.e. U+0000 to U+10FFFF)
    Assigned    =  Any non-Cn code points (i.e. synonym for \P{Cn})
    Unassigned  =  Synonym for \p{Cn}
    ASCII       =  ASCII (i.e. U+0000 to U+007F)

    Common      =  Any character (or unassigned code point)
                   not explicitly assigned to a script

=item Use of "Is" Prefix

=begin original

For backward compatibility (with Perl 5.6), all properties mentioned
so far may have C<Is> prepended to their name, so C<\P{IsLu}>, for
example, is equal to C<\P{Lu}>.

=end original

(Perl 5.6 との)後方互換性のため、すべての特性はその名前の前に C<Is> を
置くことができます。
したがって、C<\P{IsLu}> は C<\P{Lu}> と等価です。

=item Blocks

=begin original

In addition to B<scripts>, Unicode also defines B<blocks> of
characters.  The difference between scripts and blocks is that the
concept of scripts is closer to natural languages, while the concept
of blocks is more of an artificial grouping based on groups of 256
Unicode characters. For example, the C<Latin> script contains letters
from many blocks but does not contain all the characters from those
blocks. It does not, for example, contain digits, because digits are
shared across many scripts. Digits and similar groups, like
punctuation, are in a category called C<Common>.

=end original

B<用字> に加え、Unicode では文字の B<ブロック> を定義しています。
用字とブロックの違いは、用字のコンセプトが自然言語に
密着したものであるのに対して、ブロックのコンセプトは 256 の
Unicode 文字のグループに基づいたより人工的なグループ分けであることです。
たとえば、C<Latin> 用字は多くのブロックからの文字を含んでいますが、
それらのブロックのすべての文字を含んではいません。
例を挙げると、数字は多くの用字を越えて共有されているので、
(Latin 用字は)数字を含みません。
数字と、句読点のような同様のグループは C<Common> と呼ばれる
カテゴリにあります。

=begin original

For more about scripts, see the UAX#24 "Script Names":

=end original

用字のより詳しい情報は UTR #24 "Script Names" を参照してください:

   http://www.unicode.org/reports/tr24/

=begin original

For more about blocks, see:

=end original

ブロックについてのより詳しい情報は:

   http://www.unicode.org/Public/UNIDATA/Blocks.txt

=begin original

Block names are given with the C<In> prefix. For example, the
Katakana block is referenced via C<\p{InKatakana}>.  The C<In>
prefix may be omitted if there is no naming conflict with a script
or any other property, but it is recommended that C<In> always be used
for block tests to avoid confusion.

=end original

ブロック名は C<In> 接頭辞とともに与えられます。
たとえば、カタカナブロックは C<\p{InKatakana}> として参照されます。
C<In> 接頭辞は用字や他のプロパティと衝突しなければ省略することも
可能ですが、混乱のないブロックテストのために常に C<In> を使うことを
お勧めします。

=begin original

These block names are supported:

=end original

以下のブロック名がサポートされています:

    InAegeanNumbers
    InAlphabeticPresentationForms
    InAncientGreekMusicalNotation
    InAncientGreekNumbers
    InArabic
    InArabicPresentationFormsA
    InArabicPresentationFormsB
    InArabicSupplement
    InArmenian
    InArrows
    InBalinese
    InBasicLatin
    InBengali
    InBlockElements
    InBopomofo
    InBopomofoExtended
    InBoxDrawing
    InBraillePatterns
    InBuginese
    InBuhid
    InByzantineMusicalSymbols
    InCJKCompatibility
    InCJKCompatibilityForms
    InCJKCompatibilityIdeographs
    InCJKCompatibilityIdeographsSupplement
    InCJKRadicalsSupplement
    InCJKStrokes
    InCJKSymbolsAndPunctuation
    InCJKUnifiedIdeographs
    InCJKUnifiedIdeographsExtensionA
    InCJKUnifiedIdeographsExtensionB
    InCherokee
    InCombiningDiacriticalMarks
    InCombiningDiacriticalMarksSupplement
    InCombiningDiacriticalMarksforSymbols
    InCombiningHalfMarks
    InControlPictures
    InCoptic
    InCountingRodNumerals
    InCuneiform
    InCuneiformNumbersAndPunctuation
    InCurrencySymbols
    InCypriotSyllabary
    InCyrillic
    InCyrillicSupplement
    InDeseret
    InDevanagari
    InDingbats
    InEnclosedAlphanumerics
    InEnclosedCJKLettersAndMonths
    InEthiopic
    InEthiopicExtended
    InEthiopicSupplement
    InGeneralPunctuation
    InGeometricShapes
    InGeorgian
    InGeorgianSupplement
    InGlagolitic
    InGothic
    InGreekExtended
    InGreekAndCoptic
    InGujarati
    InGurmukhi
    InHalfwidthAndFullwidthForms
    InHangulCompatibilityJamo
    InHangulJamo
    InHangulSyllables
    InHanunoo
    InHebrew
    InHighPrivateUseSurrogates
    InHighSurrogates
    InHiragana
    InIPAExtensions
    InIdeographicDescriptionCharacters
    InKanbun
    InKangxiRadicals
    InKannada
    InKatakana
    InKatakanaPhoneticExtensions
    InKharoshthi
    InKhmer
    InKhmerSymbols
    InLao
    InLatin1Supplement
    InLatinExtendedA
    InLatinExtendedAdditional
    InLatinExtendedB
    InLatinExtendedC
    InLatinExtendedD
    InLetterlikeSymbols
    InLimbu
    InLinearBIdeograms
    InLinearBSyllabary
    InLowSurrogates
    InMalayalam
    InMathematicalAlphanumericSymbols
    InMathematicalOperators
    InMiscellaneousMathematicalSymbolsA
    InMiscellaneousMathematicalSymbolsB
    InMiscellaneousSymbols
    InMiscellaneousSymbolsAndArrows
    InMiscellaneousTechnical
    InModifierToneLetters
    InMongolian
    InMusicalSymbols
    InMyanmar
    InNKo
    InNewTaiLue
    InNumberForms
    InOgham
    InOldItalic
    InOldPersian
    InOpticalCharacterRecognition
    InOriya
    InOsmanya
    InPhagspa
    InPhoenician
    InPhoneticExtensions
    InPhoneticExtensionsSupplement
    InPrivateUseArea
    InRunic
    InShavian
    InSinhala
    InSmallFormVariants
    InSpacingModifierLetters
    InSpecials
    InSuperscriptsAndSubscripts
    InSupplementalArrowsA
    InSupplementalArrowsB
    InSupplementalMathematicalOperators
    InSupplementalPunctuation
    InSupplementaryPrivateUseAreaA
    InSupplementaryPrivateUseAreaB
    InSylotiNagri
    InSyriac
    InTagalog
    InTagbanwa
    InTags
    InTaiLe
    InTaiXuanJingSymbols
    InTamil
    InTelugu
    InThaana
    InThai
    InTibetan
    InTifinagh
    InUgaritic
    InUnifiedCanadianAboriginalSyllabics
    InVariationSelectors
    InVariationSelectorsSupplement
    InVerticalForms
    InYiRadicals
    InYiSyllables
    InYijingHexagramSymbols

=back

=head2 User-Defined Character Properties

(ユーザ定義文字特性)

=begin original

You can define your own character properties by defining subroutines
whose names begin with "In" or "Is".  The subroutines can be defined in
any package.  The user-defined properties can be used in the regular
expression C<\p> and C<\P> constructs; if you are using a user-defined
property from a package other than the one you are in, you must specify
its package in the C<\p> or C<\P> construct.

=end original

あなた自身の文字特性を、"In" または "Is" で始まる名前のサブルーチンを
定義することによって持つことができます。
そのサブルーチンは任意のパッケージで定義することができます。
ユーザー定義特性は正規表現の C<\p> 構造や C<\P> 構造で使うことができます。
もしユーザー定義特性をそれがあるパッケージ以外で使いたいのであれば、
パッケージ名を C<\p> (もしくは C<\P>)のために指定する必要があります。

    # assuming property IsForeign defined in Lang::
    package main;  # property package name required
    if ($txt =~ /\p{Lang::IsForeign}+/) { ... }

    package Lang;  # property package name not required
    if ($txt =~ /\p{IsForeign}+/) { ... }


=begin original

Note that the effect is compile-time and immutable once defined.

=end original

この効果はコンパイル時のもので、一度定義してしまったら
変更できないことに注意してください。

=begin original

The subroutines must return a specially-formatted string, with one
or more newline-separated lines.  Each line must be one of the following:

=end original

サブルーチンは、ひとつ以上の改行で区切られた特定の形式の文字列を
返さなければなりません。
各行は以下のいずれかの形式でなければなりません:

=over 4

=item *

=begin original

A single hexadecimal number denoting a Unicode code point to include.

=end original

含まれる Unicode 符号位置を示す 1 つの 16 進数。

=item *

=begin original

Two hexadecimal numbers separated by horizontal whitespace (space or
tabular characters) denoting a range of Unicode code points to include.

=end original

含まれる Unicode の符号位置の範囲を示す、
水平的空白(スペースもしくはタブ)によって区切られる 2 つの 16 進数。

=item *

=begin original

Something to include, prefixed by "+": a built-in character
property (prefixed by "utf8::") or a user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.

=end original

("+" を前置して) その特性に含めるもの:
("utf8::" が前置された) 組み込みの文字特性もしくはユーザー定義の文字特性;
範囲のための 2 つの 16 進符号位置; あるいは単一の 16 進符号位置。

=item *

=begin original

Something to exclude, prefixed by "-": an existing character
property (prefixed by "utf8::") or a user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.

=end original

("-" を前置して) その特性から除外するもの:
("utf8::" が前置された) 組み込みの文字特性もしくはユーザー定義の文字特性;
範囲のための 2 つの 16 進符号位置; あるいは単一の 16 進符号位置。

=item *

=begin original

Something to negate, prefixed "!": an existing character
property (prefixed by "utf8::") or a user-defined character property,
to represent all the characters in that property; two hexadecimal code
points for a range; or a single hexadecimal code point.

=end original

("!" を前置して)否定を取るもの:
("utf8::" が前置された) 組み込みの文字特性もしくはユーザー定義の文字特性;
範囲のための 2 つの 16 進符号位置; あるいは単一の 16 進符号位置。

=item *

=begin original

Something to intersect with, prefixed by "&": an existing character
property (prefixed by "utf8::") or a user-defined character property,
for all the characters except the characters in the property; two
hexadecimal code points for a range; or a single hexadecimal code point.

=end original

("&" を前置して)共通集合を取るもの:
特性にある文字以外の全ての文字のための
("utf8::" が前置された) 既に存在する文字特性またはユーザー定義文字特性;
範囲のための 2 つの 16 進符号位置; あるいは単一の 16 進符号位置。

=back

=begin original

For example, to define a property that covers both the Japanese
syllabaries (hiragana and katakana), you can define

=end original

例えば、両方の日本語の音節(ひらがなとカタカナ)を対象とする特性を
定義するには、以下のように定義します

    sub InKana {
	return <<END;
    3040\t309F
    30A0\t30FF
    END
    }

=begin original

Imagine that the here-doc end marker is at the beginning of the line.
Now you can use C<\p{InKana}> and C<\P{InKana}>.

=end original

ヒアドキュメントの終端マーカーは行の先頭に置かれることを思い出してください。
これで、C<\p{InKana}> や C<\P{InKana}> を使うことができます。

=begin original

You could also have used the existing block property names:

=end original

すでに存在しているブロック特性名を使うこともできます:

    sub InKana {
	return <<'END';
    +utf8::InHiragana
    +utf8::InKatakana
    END
    }

=begin original

Suppose you wanted to match only the allocated characters,
not the raw block ranges: in other words, you want to remove
the non-characters:

=end original

生のブロック範囲ではなく、割り当てられた文字のみにマッチさせたいと
考えているとしましょう: 言い換えれば、文字以外のものを
取り除きたいということです:

    sub InKana {
	return <<'END';
    +utf8::InHiragana
    +utf8::InKatakana
    -utf8::IsCn
    END
    }

=begin original

The negation is useful for defining (surprise!) negated classes.

=end original

否定は否定クラスを定義するのに便利です。

    sub InNotKana {
	return <<'END';
    !utf8::InHiragana
    -utf8::InKatakana
    +utf8::IsCn
    END
    }

=begin original

Intersection is useful for getting the common characters matched by
two (or more) classes.

=end original

共通集合(intersection)は二つ以上のクラスにマッチする共通の文字を得るのに
便利です。

    sub InFooAndBar {
        return <<'END';
    +main::Foo
    &main::Bar
    END
    }

=begin original

It's important to remember not to use "&" for the first set -- that
would be intersecting with nothing (resulting in an empty set).

=end original

最初の集合に "&" を使わないということを忘れないでください --
そうしてしまうと空との共通集合を取ってしまいます(結果は空集合です)。

=head2 User-Defined Case Mappings

(ユーザ定義の大文字・小文字の対応関係)

=begin original

You can also define your own mappings to be used in the lc(),
lcfirst(), uc(), and ucfirst() (or their string-inlined versions).
The principle is similar to that of user-defined character
properties: to define subroutines in the C<main> package
with names like C<ToLower> (for lc() and lcfirst()), C<ToTitle> (for
the first character in ucfirst()), and C<ToUpper> (for uc(), and the
rest of the characters in ucfirst()).

=end original

同様に、lc()、lcfirst()、uc()、ucfirst() (あるいはその文字列組み込み版)で
あなた自身の対応関係を定義することもできます。
原則は
ユーザー定義文字特性の場合と似ています: C<ToLower> (lc() と lcfirst()用), 
C<ToTitle> (ucfirst() の最初の文字用), C<ToUpper> (uc() 用と ucfirst() の
残りの文字用) のような名前のサブルーチンを C<main> パッケージで定義します。

=begin original

The string returned by the subroutines needs now to be three
hexadecimal numbers separated by tabulators: start of the source
range, end of the source range, and start of the destination range.
For example:

=end original

サブルーチンから返される文字列はタブで区切られた 3 つの 16 進数を
必要とします: ソースの範囲の始まり、ソースの範囲の終わり、そして
デスティネーション範囲の始まりです。
例を挙げましょう:

    sub ToUpper {
	return <<END;
    0061\t0063\t0041
    END
    }

=begin original

defines an uc() mapping that causes only the characters "a", "b", and
"c" to be mapped to "A", "B", "C", all other characters will remain
unchanged.

=end original

これは、"a", "b", "c" の文字のみを "A", "B", "C" にマッピングして
その他のすべての文字は変更しないという uc() のマッピングを定義しています。

=begin original

If there is no source range to speak of, that is, the mapping is from
a single character to another single character, leave the end of the
source range empty, but the two tabulator characters are still needed.
For example:

=end original

もしソースの範囲に言及することがなければ、つまり、対応関係が単一の
文字から別の単一の文字に変換するものであったならば、ソースの範囲の
終わりは空のままでよいけれども二つのタブは必要です。
例を挙げましょう:

    sub ToLower {
	return <<END;
    0041\t\t0061
    END
    }

=begin original

defines a lc() mapping that causes only "A" to be mapped to "a", all
other characters will remain unchanged.

=end original

"A" を "a" にマッピングしてその他のすべての文字は変更しない lc() の
マッピングを定義しています。

=begin original

(For serious hackers only)  If you want to introspect the default
mappings, you can find the data in the directory
C<$Config{privlib}>/F<unicore/To/>.  The mapping data is returned as
the here-document, and the C<utf8::ToSpecFoo> are special exception
mappings derived from <$Config{privlib}>/F<unicore/SpecialCasing.txt>.
The C<Digit> and C<Fold> mappings that one can see in the directory
are not directly user-accessible, one can use either the
C<Unicode::UCD> module, or just match case-insensitively (that's when
the C<Fold> mapping is used).

=end original

(真剣なハッカー専用) デフォルトのマッピングを内省したいのなら、
C<$Config{privlib}>/F<unicore/To/> というディレクトリにデータを
見つけ出すことができます。
マッピングデータはヒアドキュメントとして返され、C<utf8::ToSpecFoo> は
C<$Config{privlib}>/F<unicore/SpecialCasing.txt> から派生した特殊な
例外マッピングです。
そのディレクトリで見つけることのできる C<Digit> と C<Fold> のマッピングは
ユーザーがダイレクトにアクセスできず、C<Unicode::UCD> モジュールを使うか
大小文字を無視してマッピングします(C<Fold> マッピングが使われているとき)。

=begin original

A final note on the user-defined case mappings: they will be used
only if the scalar has been marked as having Unicode characters.
Old byte-style strings will not be affected.

=end original

ユーザー定義の大文字・小文字の対応関係に関する最後の注意: これらはスカラが
Unicode 文字としてマークされているときにのみ使われます。
古いバイト形式の文字列には影響を及ぼしません。

=head2 Character Encodings for Input and Output

(入出力のための文字エンコーディング)

=begin original

See L<Encode>.

=end original

L<Encode> を参照してください。

=head2 Unicode Regular Expression Support Level

(Unicode 正規表現対応レベル)

=begin original

The following list of Unicode support for regular expressions describes
all the features currently supported.  The references to "Level N"
and the section numbers refer to the Unicode Technical Standard #18,
"Unicode Regular Expressions", version 11, in May 2005.

=end original

以下に挙げるリストは、現在対応している全ての機能を記述する、
正規表現のための Unicode 対応のリストです。
"Level N" に対する参照とセクション番号は
Unicode Technical Standard #18,
"Unicode Regular Expressions", version 11, in May 2005
を参照しています。

=over 4

=item *

Level 1 - Basic Unicode Support

        RL1.1   Hex Notation                        - done          [1]
        RL1.2   Properties                          - done          [2][3]
        RL1.2a  Compatibility Properties            - done          [4]
        RL1.3   Subtraction and Intersection        - MISSING       [5]
        RL1.4   Simple Word Boundaries              - done          [6]
        RL1.5   Simple Loose Matches                - done          [7]
        RL1.6   Line Boundaries                     - MISSING       [8]
        RL1.7   Supplementary Code Points           - done          [9]

        [1]  \x{...}
        [2]  \p{...} \P{...}
        [3]  supports not only minimal list (general category, scripts,
             Alphabetic, Lowercase, Uppercase, WhiteSpace,
             NoncharacterCodePoint, DefaultIgnorableCodePoint, Any,
             ASCII, Assigned), but also bidirectional types, blocks, etc.
             (see L</"Unicode Character Properties">)
        [4]  \d \D \s \S \w \W \X [:prop:] [:^prop:]
        [5]  can use regular expression look-ahead [a] or
             user-defined character properties [b] to emulate set operations
        [6]  \b \B
        [7]  note that Perl does Full case-folding in matching, not Simple:
             for example U+1F88 is equivalent with U+1F00 U+03B9,
             not with 1F80.  This difference matters for certain Greek
             capital letters with certain modifiers: the Full case-folding
             decomposes the letter, while the Simple case-folding would map
             it to a single character.
        [8]  should do ^ and $ also on U+000B (\v in C), FF (\f), CR (\r),
             CRLF (\r\n), NEL (U+0085), LS (U+2028), and PS (U+2029);
             should also affect <>, $., and script line numbers;
             should not split lines within CRLF [c] (i.e. there is no empty
             line between \r and \n)
        [9]  UTF-8/UTF-EBDDIC used in perl allows not only U+10000 to U+10FFFF
             but also beyond U+10FFFF [d]

=begin original

[a] You can mimic class subtraction using lookahead.
For example, what UTS#18 might write as

=end original

[a] class subtraction を先読みを使って模倣することができます。
たとえば、以下の UTR #18 は

    [{Greek}-[{UNASSIGNED}]]

=begin original

in Perl can be written as:

=end original

以下のように Perl で記述できます:

    (?!\p{Unassigned})\p{InGreekAndCoptic}
    (?=\p{Assigned})\p{InGreekAndCoptic}

=begin original

But in this particular example, you probably really want

=end original

しかし、この特定の例では、あなたが実際に望んでいたのは次のものでしょう

    \p{GreekAndCoptic}

=begin original

which will match assigned characters known to be part of the Greek script.

=end original

これは Greek 用字の一部として知られている assigned character にマッチします。

=begin original

Also see the Unicode::Regex::Set module, it does implement the full
UTS#18 grouping, intersection, union, and removal (subtraction) syntax.

=end original

同様に Unicode::Regex::Set モジュールを参照してください。
これは UTR #18のグルーピング、intersection、union, removal(substraction)構文を
フルに実装しています。

=begin original

[b] '+' for union, '-' for removal (set-difference), '&' for intersection
(see L</"User-Defined Character Properties">)

=end original

[b] 結合のためには '+'、除去(差集合)のためには '-'、
共通集合のためには '&' です
(L</"User-Defined Character Properties"> を参照してください)

=begin original

[c] Try the C<:crlf> layer (see L<PerlIO>).

=end original

[c] C<:crlf> 層を試してください (L<PerlIO> を参照してください)。

=begin original

[d] Avoid C<use warning 'utf8';> (or say C<no warning 'utf8';>) to allow
U+FFFF (C<\x{FFFF}>).

=end original

[d] U+FFFF (C<\x{FFFF}>) を許可するために、C<use warning 'utf8';> を
しないでください (または C<no warning 'utf8';> としてください)。

=item *

Level 2 - Extended Unicode Support

        RL2.1   Canonical Equivalents           - MISSING       [10][11]
        RL2.2   Default Grapheme Clusters       - MISSING       [12][13]
        RL2.3   Default Word Boundaries         - MISSING       [14]
        RL2.4   Default Loose Matches           - MISSING       [15]
        RL2.5   Name Properties                 - MISSING       [16]
        RL2.6   Wildcard Properties             - MISSING

        [10] see UAX#15 "Unicode Normalization Forms"
        [11] have Unicode::Normalize but not integrated to regexes
        [12] have \X but at this level . should equal that
        [13] UAX#29 "Text Boundaries" considers CRLF and Hangul syllable
             clusters as a single grapheme cluster.
        [14] see UAX#29, Word Boundaries
        [15] see UAX#21 "Case Mappings"
        [16] have \N{...} but neither compute names of CJK Ideographs
             and Hangul Syllables nor use a loose match [e]

=begin original

[e] C<\N{...}> allows namespaces (see L<charnames>).

=end original

[e] C<\N{...}> は名前空間を許可します (L<charnames> を参照してください)。

=item *

Level 3 - Tailored Support

        RL3.1   Tailored Punctuation            - MISSING
        RL3.2   Tailored Grapheme Clusters      - MISSING       [17][18]
        RL3.3   Tailored Word Boundaries        - MISSING
        RL3.4   Tailored Loose Matches          - MISSING
        RL3.5   Tailored Ranges                 - MISSING
        RL3.6   Context Matching                - MISSING       [19]
        RL3.7   Incremental Matches             - MISSING
      ( RL3.8   Unicode Set Sharing )
        RL3.9   Possible Match Sets             - MISSING
        RL3.10  Folded Matching                 - MISSING       [20]
        RL3.11  Submatchers                     - MISSING

        [17] see UAX#10 "Unicode Collation Algorithms"
        [18] have Unicode::Collate but not integrated to regexes
        [19] have (?<=x) and (?=x), but look-aheads or look-behinds should see
             outside of the target substring
        [20] need insensitive matching for linguistic features other than case;
             for example, hiragana to katakana, wide and narrow, simplified Han
             to traditional Han (see UTR#30 "Character Foldings")

=back

=head2 Unicode Encodings

(Unicode のエンコーディング)

=begin original

Unicode characters are assigned to I<code points>, which are abstract
numbers.  To use these numbers, various encodings are needed.

=end original

Unicode 文字は抽象的な数値である I<符号位置> にアサインされています。
これらの数値を使うために、さまざまなエンコーディングが必要となります。

=over 4

=item *

UTF-8

=begin original

UTF-8 is a variable-length (1 to 6 bytes, current character allocations
require 4 bytes), byte-order independent encoding. For ASCII (and we
really do mean 7-bit ASCII, not another 8-bit encoding), UTF-8 is
transparent.

=end original

UTF-8 は可変長(1 から 6 バイト; 現在の文字配置では 4 バイトを要求します)で、
バイトの並び順に依存しないエンコーディングです。
ASCII(ここでは 7-bit ASCII のことで、他の 8-bit エンコーディングのことでは
ありません)と UTF-8 は透過です。

=begin original

The following table is from Unicode 3.2.

=end original

以下のテーブルは Unicode 3.2 のものです。

 Code Points            1st Byte  2nd Byte  3rd Byte  4th Byte

   U+0000..U+007F       00..7F
   U+0080..U+07FF       C2..DF    80..BF
   U+0800..U+0FFF       E0        A0..BF    80..BF
   U+1000..U+CFFF       E1..EC    80..BF    80..BF
   U+D000..U+D7FF       ED        80..9F    80..BF
   U+D800..U+DFFF       ******* ill-formed *******
   U+E000..U+FFFF       EE..EF    80..BF    80..BF
  U+10000..U+3FFFF      F0        90..BF    80..BF    80..BF
  U+40000..U+FFFFF      F1..F3    80..BF    80..BF    80..BF
 U+100000..U+10FFFF     F4        80..8F    80..BF    80..BF

=begin original

Note the C<A0..BF> in C<U+0800..U+0FFF>, the C<80..9F> in
C<U+D000...U+D7FF>, the C<90..B>F in C<U+10000..U+3FFFF>, and the
C<80...8F> in C<U+100000..U+10FFFF>.  The "gaps" are caused by legal
UTF-8 avoiding non-shortest encodings: it is technically possible to
UTF-8-encode a single code point in different ways, but that is
explicitly forbidden, and the shortest possible encoding should always
be used.  So that's what Perl does.

=end original

C<U+0800..U+0FFF> の中の C<A0..BF>、C<U+D000...U+D7FF> の中の C<80..9F>、
C<U+10000..U+3FFFF> の中の C<90..BF>、C<U+100000..U+10FFFF> の中の
C<80...8F> に注意してください。
この「隙間」は、正当な UTF-8 が最短でないエンコードを避けるために
あります: 技術的には UTF-8 エンコードは一つの符号位置を複数の方法で
表すことができますが、これは明示的に禁止されていて、可能な限り最短の
エンコードが常に使われます。
従って、Perl もそうします。

=begin original

Another way to look at it is via bits:

=end original

これを見るもう一つの方法はビット単位で見ることです:

 Code Points                    1st Byte   2nd Byte  3rd Byte  4th Byte

                    0aaaaaaa     0aaaaaaa
            00000bbbbbaaaaaa     110bbbbb  10aaaaaa
            ccccbbbbbbaaaaaa     1110cccc  10bbbbbb  10aaaaaa
  00000dddccccccbbbbbbaaaaaa     11110ddd  10cccccc  10bbbbbb  10aaaaaa

=begin original

As you can see, the continuation bytes all begin with C<10>, and the
leading bits of the start byte tell how many bytes the are in the
encoded character.

=end original

見ての通り、後続バイトはすべて C<10> から始まっていて、開始バイトの
先行ビットはエンコードされた文字がどのくらいの長さであるかを示しています。

=item *

UTF-EBCDIC

=begin original

Like UTF-8 but EBCDIC-safe, in the way that UTF-8 is ASCII-safe.

=end original

UTF-8 と似ていますが、UTF-8 が ASCII-safe であるように EBCDIC-safe です。

=item *

=begin original

UTF-16, UTF-16BE, UTF-16LE, Surrogates, and BOMs (Byte Order Marks)

=end original

UTF-16, UTF-16BE, UTF-16LE, サロゲート, BOM (Byte Order Marks)

=begin original

The followings items are mostly for reference and general Unicode
knowledge, Perl doesn't use these constructs internally.

=end original

以下の項目はほとんど参照および一般的な Unicode 知識のためのもので、
Perl はこれらの構造を内部で使っていません。

=begin original

UTF-16 is a 2 or 4 byte encoding.  The Unicode code points
C<U+0000..U+FFFF> are stored in a single 16-bit unit, and the code
points C<U+10000..U+10FFFF> in two 16-bit units.  The latter case is
using I<surrogates>, the first 16-bit unit being the I<high
surrogate>, and the second being the I<low surrogate>.

=end original

UTF-16 は 2 バイトもしくは 4 バイトのエンコーディングです。
C<U+0000..U+FFFF> の範囲の Unicode の符号位置はひとつの 16 ビット
ユニットに収められ、C<U+10000..U+10FFFF> の範囲の符号位置は 2 つの
16 ビットユニットに収められます。
後者をサロゲート(surrogates) と呼びます。
最初の 16 ビットユニットは I<high surrogate> で、二番目は
I<low surrogate> となります。

=begin original

Surrogates are code points set aside to encode the C<U+10000..U+10FFFF>
range of Unicode code points in pairs of 16-bit units.  The I<high
surrogates> are the range C<U+D800..U+DBFF>, and the I<low surrogates>
are the range C<U+DC00..U+DFFF>.  The surrogate encoding is

=end original

サロゲートは Unicode の符号位置の C<U+10000..U+10FFFF> の範囲を
16 ビットユニットのペアで表現する集合です。
I<high surrogates> は C<U+D800..U+DBFF> の範囲で、I<low surrogates> は
C<U+DC00..U+DFFF> の範囲です。
サロゲートのエンコーディングは

	$hi = ($uni - 0x10000) / 0x400 + 0xD800;
	$lo = ($uni - 0x10000) % 0x400 + 0xDC00;

=begin original

and the decoding is

=end original

であり、デコードは以下のようなものです

	$uni = 0x10000 + ($hi - 0xD800) * 0x400 + ($lo - 0xDC00);

=begin original

If you try to generate surrogates (for example by using chr()), you
will get a warning if warnings are turned on, because those code
points are not valid for a Unicode character.

=end original

(たとえば chr() を使って)サロゲートを生成しようとしたならば、
警告が有効であれば警告が発生するでしょう。
なぜなら、そういった符号位置は Unicode 文字としては正しいものではないからです。

=begin original

Because of the 16-bitness, UTF-16 is byte-order dependent.  UTF-16
itself can be used for in-memory computations, but if storage or
transfer is required either UTF-16BE (big-endian) or UTF-16LE
(little-endian) encodings must be chosen.

=end original

16-bitness のため、UTF-16 はバイトの並び順に依存します。
UTF-16 それ自身はメモリ内の計算に使うことができますが、格納や転送の際には
UTF-16BE (ビッグエンディアン)か UTF-16LE (リトルエンディアン)の
いずれかのエンコーディングを選択しなければなりません。

=begin original

This introduces another problem: what if you just know that your data
is UTF-16, but you don't know which endianness?  Byte Order Marks, or
BOMs, are a solution to this.  A special character has been reserved
in Unicode to function as a byte order marker: the character with the
code point C<U+FEFF> is the BOM.

=end original

このことは別の問題を引き起こします: あなたのデータが UTF-16 であることだけを
知っていて、そのバイト並び順を知らなかったとしたら?
バイト順マーク (Byte Order Marks)、略して BOM はこれを解決します。
バイト並びのマーカーとしての機能のために Unicode では特殊な文字が
予約されています: その文字は符号位置の C<U+FEFF> です。

=begin original

The trick is that if you read a BOM, you will know the byte order,
since if it was written on a big-endian platform, you will read the
bytes C<0xFE 0xFF>, but if it was written on a little-endian platform,
you will read the bytes C<0xFF 0xFE>.  (And if the originating platform
was writing in UTF-8, you will read the bytes C<0xEF 0xBB 0xBF>.)

=end original

このトリックは、BOM を読み込んだときにバイト順がわかるということです。
ビッグエンディアンのプラットフォームで書かれたものならなら
C<0xFE 0xFF> を読み出し、リトルエンディガンのプラットフォームで
書かれたものなら C<0xFF 0xFE> を読み出します。
(そしてもし元のプラットフォームで UTF-8 で書かれたものならば
C<0xEF 0xBB 0xBF> というバイト列を読むことになるでしょう。)

=begin original

The way this trick works is that the character with the code point
C<U+FFFE> is guaranteed not to be a valid Unicode character, so the
sequence of bytes C<0xFF 0xFE> is unambiguously "BOM, represented in
little-endian format" and cannot be C<U+FFFE>, represented in big-endian
format".

=end original

このトリックがうまくいくのは符号位置 C<U+FFFE> の文字は正当な
Unicode 文字でないということによって、C<0xFF 0xFE> という並びは紛れなく
"リトルエンディアンフォーマットの BOM" であって
"ビッグエンディアンの C<U+FFFE>" とはならないのです。

=item *

UTF-32, UTF-32BE, UTF-32LE

=begin original

The UTF-32 family is pretty much like the UTF-16 family, expect that
the units are 32-bit, and therefore the surrogate scheme is not
needed.  The BOM signatures will be C<0x00 0x00 0xFE 0xFF> for BE and
C<0xFF 0xFE 0x00 0x00> for LE.

=end original

UTF-32 ファミリーは UTF-16 ファミリーと良く似ていますが、ユニットが
32 ビットで、そのためサロゲート方式の必要がないという点が異なります。
BOM シグネチャは BE では C<0x00 0x00 0xFE 0xFF> に、
LE では C<0xFF 0xFE 0x00 0x00> になります。

=item *

UCS-2, UCS-4

=begin original

Encodings defined by the ISO 10646 standard.  UCS-2 is a 16-bit
encoding.  Unlike UTF-16, UCS-2 is not extensible beyond C<U+FFFF>,
because it does not use surrogates.  UCS-4 is a 32-bit encoding,
functionally identical to UTF-32.

=end original

ISO 10646 標準で定義されているエンコーディングです。
UCS-2 は 16 ビットエンコーディングです。
UTF-16 とは異なり、UCS-2 は C<U+FFFF> を超えた範囲に拡張できません。
これはサロゲートを使わないためです。
UCS-4 は 32 ビットエンコーディングで、機能的には UTF-32 と同じです。

=item *

UTF-7

=begin original

A seven-bit safe (non-eight-bit) encoding, which is useful if the
transport or storage is not eight-bit safe.  Defined by RFC 2152.

=end original

7 ビットセーフ(非 8 ビット)エンコーディングで、8 ビットセーフでない
転送や格納に便利です。
RFC 2152 によって定義されています。

=back

=head2 Security Implications of Unicode

(Unicode のセキュリティへの影響)

=over 4

=item *

=begin original

Malformed UTF-8

=end original

不正な UTF-8

=begin original

Unfortunately, the specification of UTF-8 leaves some room for
interpretation of how many bytes of encoded output one should generate
from one input Unicode character.  Strictly speaking, the shortest
possible sequence of UTF-8 bytes should be generated,
because otherwise there is potential for an input buffer overflow at
the receiving end of a UTF-8 connection.  Perl always generates the
shortest length UTF-8, and with warnings on Perl will warn about
non-shortest length UTF-8 along with other malformations, such as the
surrogates, which are not real Unicode code points.

=end original

残念ながら、UTF-8 の仕様ではひとつの Unicode 文字の入力から
何バイトのエンコードされた出力として解釈するのかについていくらかの
余地があります。
厳密にいえば、可能な限り最も短い UTF-8 バイト列が生成されるべきです。
なぜなら、そうしないと UTF-8 コネクションの終わりにおいて、入力バッファが
オーバーフローする可能性があるからです。
Perl は常に最も短い長さの UTF-8 を生成し、本当の Unicode の符号位置でない
サロゲートのような不正な形式の最短でない UTF-8 に関して警告を発します。

=item *

=begin original

Regular expressions behave slightly differently between byte data and
character (Unicode) data.  For example, the "word character" character
class C<\w> will work differently depending on if data is eight-bit bytes
or Unicode.

=end original

正規表現はバイトデータと文字(Unicode)データとでまったく異なる
振る舞いをします。
たとえば、単語文字("word character")クラス C<\w> はそのデータが
8 ビットバイトか Unicode かに依存して異なる働きをします。

=begin original

In the first case, the set of C<\w> characters is either small--the
default set of alphabetic characters, digits, and the "_"--or, if you
are using a locale (see L<perllocale>), the C<\w> might contain a few
more letters according to your language and country.

=end original

第一の場合、C<\w> 文字の集合は相対的に小さいものです -- アルファベット、
数字、そして "_" のデフォルト集合 -- もしくはロケール(L<perllocale> を参照)を
使っているのであれば、C<\w> はあなたの使っている言語や国に応じていくつかの
文字が増えているかもしれません。

=begin original

In the second case, the C<\w> set of characters is much, much larger.
Most importantly, even in the set of the first 256 characters, it will
probably match different characters: unlike most locales, which are
specific to a language and country pair, Unicode classifies all the
characters that are letters I<somewhere> as C<\w>.  For example, your
locale might not think that LATIN SMALL LETTER ETH is a letter (unless
you happen to speak Icelandic), but Unicode does.

=end original

第二の場合、C<\w> の文字集合は相対的に大きなものになります。
最も重要なことは、最初の 256 文字の集合にあってさえ異なる文字と
マッチする可能性があるということです: 言語と国のペアで指定される
大部分のロケールと異なり、Unicode のクラス分けは I<どこかにある>
すべての文字を C<\w> に属するものとします。
たとえば、あなたの使っているロケールは LATIN SMALL LETTER ETH が
(アイスランド語を使っていない限り)属していないとみなしているでしょうが、
Unicode は属するものとしてみなすのです。

=begin original

As discussed elsewhere, Perl has one foot (two hooves?) planted in
each of two worlds: the old world of bytes and the new world of
characters, upgrading from bytes to characters when necessary.
If your legacy code does not explicitly use Unicode, no automatic
switch-over to characters should happen.  Characters shouldn't get
downgraded to bytes, either.  It is possible to accidentally mix bytes
and characters, however (see L<perluniintro>), in which case C<\w> in
regular expressions might start behaving differently.  Review your
code.  Use warnings and the C<strict> pragma.

=end original

すでに述べている通り、Perl は二つの世界のそれぞれに片方の足
(二つのひづめ?) を突っ込んでいます: 古いバイトの世界と新しい文字の世界で、
必要に応じてバイトから文字に昇格します。
もしあなたの古いコードが明示的に Unicode を使っていないのなら、文字への
切り替えが自動的になされることはありません。
文字はバイトにダウングレードされるべきではありません。
偶発的にバイトと文字が混じる可能性がありますが(L<perluniintro> を参照)、
そのような場合正規表現中の C<\w> は異なるふるまいをするかもしれません。
あなたのコードをレビューしてください。
warnings と C<strict> プラグマを使ってください。

=back

=head2 Unicode in Perl on EBCDIC

(EBCDIC 上の Perl での Unicode)

=begin original

The way Unicode is handled on EBCDIC platforms is still
experimental.  On such platforms, references to UTF-8 encoding in this
document and elsewhere should be read as meaning the UTF-EBCDIC
specified in Unicode Technical Report 16, unless ASCII vs. EBCDIC issues
are specifically discussed. There is no C<utfebcdic> pragma or
":utfebcdic" layer; rather, "utf8" and ":utf8" are reused to mean
the platform's "natural" 8-bit encoding of Unicode. See L<perlebcdic>
for more discussion of the issues.

=end original

EBCDIC プラットフォームでの Unicode の扱い方は未だ実験的です。
このようなプラットフォームでは、この文書やその他での
UTF-8 エンコーディングへの言及は、特に ASCII 対 EBCDIC 問題について
議論されている場合でない限りは、Unicode Technical Report 16 で
定義されている UTF-EBCDIC を意味するものとして読むべきです。
C<utfebcdic> プラグマや ":utfebcdic" 層はありません;
代わりに、"utf8" と ":utf8" が、そのプラットフォームの「自然な」
Unicode の 8 ビットエンコーディングを意味するように再利用されています。
この問題に関する更なる議論については L<perlebcdic> を参照してください。

=head2 Locales

(ロケール)

=begin original

Usually locale settings and Unicode do not affect each other, but
there are a couple of exceptions:

=end original

通常ロケールの設定と Unicode は互いに影響を及ぼすことはありませんが、
いくつかの例外があります:

=over 4

=item *

=begin original

You can enable automatic UTF-8-ification of your standard file
handles, default C<open()> layer, and C<@ARGV> by using either
the C<-C> command line switch or the C<PERL_UNICODE> environment
variable, see L<perlrun> for the documentation of the C<-C> switch.

=end original

デフォルトの C<open()> 層や C<@ARGV> の標準ファイルハンドルの
自動的な UTF-8 化を、C<-C> コマンドラインスイッチか
環境変数 C<PERL_UNICODE> によって有効にできます。
C<-C> スイッチについての説明は L<perlrun> を参照してください。

=item *

=begin original

Perl tries really hard to work both with Unicode and the old
byte-oriented world. Most often this is nice, but sometimes Perl's
straddling of the proverbial fence causes problems.

=end original

Perl は Unicode と古いバイト指向の世界の両方で働くために苦労しています。
ほとんどの場合はうまくいきますが、ときには Perl が二股をかけていることが
問題を引き起こすこともあります。

=back

=head2 When Unicode Does Not Happen

(Unicode ではない場合)

=begin original

While Perl does have extensive ways to input and output in Unicode,
and few other 'entry points' like the @ARGV which can be interpreted
as Unicode (UTF-8), there still are many places where Unicode (in some
encoding or another) could be given as arguments or received as
results, or both, but it is not.

=end original

Perl には入出力を Unicode で行うための多数の方法があり、
@ARGV のように Unicode (UTF-8) として解釈できるようなその他の
「エントリポイント」はほとんどない一方、(何らかのエンコーディングで)
Unicode が引数として与えられたり結果として返されるべきにも関わらず、
そうなっていない場所も未だ多くあります。

=begin original

The following are such interfaces.  For all of these interfaces Perl
currently (as of 5.8.3) simply assumes byte strings both as arguments
and results, or UTF-8 strings if the C<encoding> pragma has been used.

=end original

以下に挙げるのはそのようなインターフェースです。
これらすべてが現在の Perl(5.8.3) では単純に引数と戻り値の両方が
バイト文字列か、C<encoding> プラグマが使われていれば UTF-8 文字列で
あると仮定しています。

=begin original

One reason why Perl does not attempt to resolve the role of Unicode in
this cases is that the answers are highly dependent on the operating
system and the file system(s).  For example, whether filenames can be
in Unicode, and in exactly what kind of encoding, is not exactly a
portable concept.  Similarly for the qx and system: how well will the
'command line interface' (and which of them?) handle Unicode?

=end original

このようなケースにおいて、Perl がなぜ Unicode による解決を
しないのかの理由の一つは、答えがオペレーティングシステムや
ファイルシステムに強く依存しているからです。
たとえば、ファイル名が Unicode で記述できてエンコーディングが
合っていたとしてもそれは移植性のあるコンセプトではないのです。
同様なことが qx や system にも言えます:
「コマンドラインインターフェース」は Unicode をどのように
扱うのでしょうか?

=over 4

=item *

chdir, chmod, chown, chroot, exec, link, lstat, mkdir, 
rename, rmdir, stat, symlink, truncate, unlink, utime, -X

=item *

%ENV

=item *

=begin original

glob (aka the <*>)

=end original

glob (または <*>)

=item *

open, opendir, sysopen

=item *

=begin original

qx (aka the backtick operator), system

=end original

qx (または逆クォート演算子), system

=item *

readdir, readlink

=back

=head2 Forcing Unicode in Perl (Or Unforcing Unicode in Perl)

(Unicode を Perl に強制する (あるいは Unicode でないことを Perl に強制する))

=begin original

Sometimes (see L</"When Unicode Does Not Happen">) there are
situations where you simply need to force Perl to believe that a byte
string is UTF-8, or vice versa.  The low-level calls
utf8::upgrade($bytestring) and utf8::downgrade($utf8string) are
the answers.

=end original

ときとして(L</When Unicode Does Not Happen> を参照)、Perl にバイト列を
UTF-8 であるように強制したりその逆を行う場合があるかもしれません。
低レベルの呼び出し utf8::upgrade($bytestring) と
utf8::downgrade($utf8string) がその回答です。

=begin original

Do not use them without careful thought, though: Perl may easily get
very confused, angry, or even crash, if you suddenly change the 'nature'
of scalar like that.  Especially careful you have to be if you use the
utf8::upgrade(): any random byte string is not valid UTF-8.

=end original

しかし、これらを使うときには十分注意しなければなりません: あなたが突然
スカラのような'性質'(nature)を突然変えたりしたら、Perl は簡単に混乱し、
怒り、クラッシュしてしまいます。
utf8::upgrade() を使うときには特に注意が必要です: 任意のランダムな
バイト列は正当な UTF-8 ではありません。

=head2 Using Unicode in XS

(XS で Unicode を使う)

=begin original

If you want to handle Perl Unicode in XS extensions, you may find the
following C APIs useful.  See also L<perlguts/"Unicode Support"> for an
explanation about Unicode at the XS level, and L<perlapi> for the API
details.

=end original

Perl の Unicode を XS 拡張で取り扱いたいと思うのなら、以下に挙げる
API 群が便利かも知れません。
XS レベルでの Unicode に関しての説明は L<perlguts/"Unicode Support"> を、
API の詳細については L<perlapi> を参照してください。

=over 4

=item *

=begin original

C<DO_UTF8(sv)> returns true if the C<UTF8> flag is on and the bytes
pragma is not in effect.  C<SvUTF8(sv)> returns true is the C<UTF8>
flag is on; the bytes pragma is ignored.  The C<UTF8> flag being on
does B<not> mean that there are any characters of code points greater
than 255 (or 127) in the scalar or that there are even any characters
in the scalar.  What the C<UTF8> flag means is that the sequence of
octets in the representation of the scalar is the sequence of UTF-8
encoded code points of the characters of a string.  The C<UTF8> flag
being off means that each octet in this representation encodes a
single character with code point 0..255 within the string.  Perl's
Unicode model is not to use UTF-8 until it is absolutely necessary.

=end original

C<DO_UTF8(sv)> は C<UTF8> フラグがオンでバイトプラグマが効果を
もっていないときに真を返します。
C<SvUTF8(sv)> は C<UTF8> がオンのとき、バイトプラグマの状態には
関係なく真を返します。
C<UTF8> フラグはスカラの中で 255(もしくは127)を超える符号位置の文字が
あるということを I<意味しません>。
C<UTF8> フラグの意味するところは、スカラ中のそのオクテットの並びが
文字列としてUTF-8でエンコードされた符号位置の並びだということです。
C<UTF8> フラグがオフであるということは文字列の中のエンコードされた
文字が 0..255 の範囲でエンコードされたオクテットであることを意味します。
Perl の Unicode モデルは本当に必要となるまで UTF-8 を使用しません。

=item *

=begin original

C<uvuni_to_utf8(buf, chr)> writes a Unicode character code point into
a buffer encoding the code point as UTF-8, and returns a pointer
pointing after the UTF-8 bytes.

=end original

C<uvuni_to_utf8(buf, chr)> は Unicode の文字符号位置を UTF-8 で
エンコードされたの符号位置としてバッファに書き込みます。
そして、その UTF-8 バイトの後を指し示すポインタを返します。

=item *

=begin original

C<utf8_to_uvuni(buf, lenp)> reads UTF-8 encoded bytes from a buffer and
returns the Unicode character code point and, optionally, the length of
the UTF-8 byte sequence.

=end original

C<utf8_to_uvuni(buf, lenp)> はバッファから UTF-8 エンコードされたバイトを
読み出し、Unicode の文字符号位置と、オプションでその
UTF-8 バイトシーケンスの長さを返します。

=item *

=begin original

C<utf8_length(start, end)> returns the length of the UTF-8 encoded buffer
in characters.  C<sv_len_utf8(sv)> returns the length of the UTF-8 encoded
scalar.

=end original

C<utf8_length(start, end)> は UTF-8 エンコードされたバッファの長さを
文字で返します。
C<sv_len_utf8(sv)> は UTF-8 エンコードされたスカラの長さを返します。

=item *

=begin original

C<sv_utf8_upgrade(sv)> converts the string of the scalar to its UTF-8
encoded form.  C<sv_utf8_downgrade(sv)> does the opposite, if
possible.  C<sv_utf8_encode(sv)> is like sv_utf8_upgrade except that
it does not set the C<UTF8> flag.  C<sv_utf8_decode()> does the
opposite of C<sv_utf8_encode()>.  Note that none of these are to be
used as general-purpose encoding or decoding interfaces: C<use Encode>
for that.  C<sv_utf8_upgrade()> is affected by the encoding pragma
but C<sv_utf8_downgrade()> is not (since the encoding pragma is
designed to be a one-way street).

=end original

C<sv_utf8_upgrade(sv)> はスカラの文字列をその UTF-8 エンコードされた
形式に変換します。
C<sv_utf8_downgrade(sv)> は(可能であれば)その反対の動作をします。
C<sv_utf8_encode(sv)> は C<sv_utf8_upgrade> に似ていますが、
C<UTF8> フラグをセットしない点が異なります。
これらの欠如が一般的な目的のエンコーディングやデコーディングの
インターフェースとして使われていることに注意してください:
C<use Encode> がそのためにあります。
C<sv_utf8_upgrade()> はエンコーディングプラグマに影響を受けますが、
C<sv_utf8_downgrade()> はそうではありません(なぜならエンコーディング
プラグマは一方通行にデザインされているからです)。

=item *

=begin original

C<is_utf8_char(s)> returns true if the pointer points to a valid UTF-8
character.

=end original

C<is_utf8_char(s)> はポインタが正しい UTF-8 文字を指し示しているときに
真を返します。

=item *

=begin original

C<is_utf8_string(buf, len)> returns true if C<len> bytes of the buffer
are valid UTF-8.

=end original

C<is_utf8_string(buf, len)> はバッファの C<len> バイトが正しい
UTF-8 文字であるときに真を返します。

=item *

=begin original

C<UTF8SKIP(buf)> will return the number of bytes in the UTF-8 encoded
character in the buffer.  C<UNISKIP(chr)> will return the number of bytes
required to UTF-8-encode the Unicode character code point.  C<UTF8SKIP()>
is useful for example for iterating over the characters of a UTF-8
encoded buffer; C<UNISKIP()> is useful, for example, in computing
the size required for a UTF-8 encoded buffer.

=end original

C<UTF8SKIP(buf)> はバッファの中にある UTF-8 エンコードされた文字の
バイト数を返します。
C<UNISKIP(chr)> は UTF-8 エンコードする Unicode 文字の符号位置が要求する
バイト数を返します。
C<UTF8SKIP()> は UTF-8 エンコードされたバッファの文字に対して繰り返しを
行うような例に便利です。
C<UNISKIP()> はたとえば、UTF-8 エンコードされたバッファの要求する大きさを
計算するのに便利です。

=item *

=begin original

C<utf8_distance(a, b)> will tell the distance in characters between the
two pointers pointing to the same UTF-8 encoded buffer.

=end original

C<utf8_distance(a, b)> は同じ UTF-8 エンコードされたバッファをさす
二つのポインタの間の文字単位の距離を返します。

=item *

=begin original

C<utf8_hop(s, off)> will return a pointer to an UTF-8 encoded buffer
that is C<off> (positive or negative) Unicode characters displaced
from the UTF-8 buffer C<s>.  Be careful not to overstep the buffer:
C<utf8_hop()> will merrily run off the end or the beginning of the
buffer if told to do so.

=end original

C<utf8_hop(s, off)> は、UTF-8 バッファ C<s> から Unicode で C<off> 文字分
(正数でも負数でも) 移動した UTF-8 エンコーディングバッファへの
ポインタを返します。
バッファを超えないように注意してください: C<utf8_hop()> は、そう
指示されれば何も気にせずにバッファの先頭や末尾を踏み越えます。

=item *

=begin original

C<pv_uni_display(dsv, spv, len, pvlim, flags)> and
C<sv_uni_display(dsv, ssv, pvlim, flags)> are useful for debugging the
output of Unicode strings and scalars.  By default they are useful
only for debugging--they display B<all> characters as hexadecimal code
points--but with the flags C<UNI_DISPLAY_ISPRINT>,
C<UNI_DISPLAY_BACKSLASH>, and C<UNI_DISPLAY_QQ> you can make the
output more readable.

=end original

C<pv_uni_display(dsv, spv, len, pvlim, flags)> と
C<sv_uni_display(dsv, ssv, pvlim, flags)> は Unicode の文字列やスカラの
出力をデバッグするのに便利です。
デフォルトではデバッグのみに便利です -- B<すべての> 文字を
16 進の符号位置として表示します -- しかし C<UNI_DISPLAY_ISPRINT>,
C<UNI_DISPLAY_BACKSLASH>, C<UNI_DISPLAY_QQ> というフラグを
与えることによって、出力を読みやすくできます。

=item *

=begin original

C<ibcmp_utf8(s1, pe1, u1, l1, u1, s2, pe2, l2, u2)> can be used to
compare two strings case-insensitively in Unicode.  For case-sensitive
comparisons you can just use C<memEQ()> and C<memNE()> as usual.

=end original

C<ibcmp_utf8(s1, pe1, u1, l1, u1, s2, pe2, l2, u2)> は Unicode に
おいて大小文字を無視した文字列比較に使うことができます。
大小文字を意識した比較には通常どおり C<memEQ()> や C<memNE()> を
使うことができます。

=back

=begin original

For more information, see L<perlapi>, and F<utf8.c> and F<utf8.h>
in the Perl source code distribution.

=end original

もっと詳しい情報は、L<perlapi> と、Perl のソースコード配布の
F<utf8.c> と F<utf8.h> を参照してください。

=head1 BUGS

=head2 Interaction with Locales

(ロケールとの相互作用)

=begin original

Use of locales with Unicode data may lead to odd results.  Currently,
Perl attempts to attach 8-bit locale info to characters in the range
0..255, but this technique is demonstrably incorrect for locales that
use characters above that range when mapped into Unicode.  Perl's
Unicode support will also tend to run slower.  Use of locales with
Unicode is discouraged.

=end original

Unicode データと共にロケールを使うことはおかしな結果を
もたらすことになりやすいです。
現在のところ、Perl は文字に 0..255 の範囲の 8 ビットロケールを
割り当てようとしていますが、このテクニックは Unicode に
マップしようとしたときに先の範囲の文字を使用するロケールに対して
明らかに正しくありません。
Perl の Unicode サポートはまた、遅くなりがちです。
Unicode といっしょにロケールを使うことはお勧めできません。

=head2 Interaction with Extensions

(エクステンションとの相互作用)

=begin original

When Perl exchanges data with an extension, the extension should be
able to understand the UTF8 flag and act accordingly. If the
extension doesn't know about the flag, it's likely that the extension
will return incorrectly-flagged data.

=end original

Perl がエクステンションとデータをやり取りするとき、そのエクステンションは
UTF8 フラグを理解し、また、それに従った振る舞いをすべきです。
エクステンションがこのフラグについて何も知らなければ、そのエクステンションは
正しくないフラグがついたデータを返す可能性があります。

=begin original

So if you're working with Unicode data, consult the documentation of
every module you're using if there are any issues with Unicode data
exchange. If the documentation does not talk about Unicode at all,
suspect the worst and probably look at the source to learn how the
module is implemented. Modules written completely in Perl shouldn't
cause problems. Modules that directly or indirectly access code written
in other programming languages are at risk.

=end original

そのため、もし Unicode データを扱おうというのであれば、 Unicode データの
交換に関して何らかの記述があるのなら使うモジュールすべてのドキュメントを
調べてください。
ドキュメントが Unicode に関して何の言及もしていないのなら、最悪のケースを
考慮し、そしてそのモジュールがどのように実装されているかを知るために
ソースを見ることになるかもしれません。
完全に Perl で書かれたモジュールは問題を引き起こしません。
他のプログラミング言語で書かれている直接または間接にアクセスするコードに
リスクがあるのです。

=begin original

For affected functions, the simple strategy to avoid data corruption is
to always make the encoding of the exchanged data explicit. Choose an
encoding that you know the extension can handle. Convert arguments passed
to the extensions to that encoding and convert results back from that
encoding. Write wrapper functions that do the conversions for you, so
you can later change the functions when the extension catches up.

=end original

影響を受けた関数のための、データの劣化(data corruption)を防ぐ単純な
戦略とは、交換するデータのエンコーディングを常に明確にするということです。
エクステンションが取り扱うことができると知っているエンコーディングを
選択してください。
エクステンションに渡す引数を選択したエンコーディングに変換し、
エクステンションから返ってきた結果をそのエンコーディングから
逆方向に変換します。
変換を行ってくれるラッパ関数を書いておいて、
エクステンションが追いついた時に関数を変更できるようにしておきます。

=begin original

To provide an example, let's say the popular Foo::Bar::escape_html
function doesn't deal with Unicode data yet. The wrapper function
would convert the argument to raw UTF-8 and convert the result back to
Perl's internal representation like so:

=end original

例として、まだ Unicode データを取り扱うようにはできていない、
有名なな Foo::Bar::escape_html について述べましょう。
ラッパ関数は引数を生の UTF-8 に変換し、結果を Perl の内部表現に
逆変換します:

    sub my_escape_html ($) {
      my($what) = shift;
      return unless defined $what;
      Encode::decode_utf8(Foo::Bar::escape_html(Encode::encode_utf8($what)));
    }

=begin original

Sometimes, when the extension does not convert data but just stores
and retrieves them, you will be in a position to use the otherwise
dangerous Encode::_utf8_on() function. Let's say the popular
C<Foo::Bar> extension, written in C, provides a C<param> method that
lets you store and retrieve data according to these prototypes:

=end original

エクステンションがデータを変換しないけれども格納したり取り出したりするときに、
ときとして危険な Encode::_utf8_on() 関数以外のものを
使うことがあるかもしれません。
C で書かれていて、データを以下のプロトタイプに従って格納したり
取り出したりする C<param> メソッドを持っている
有名な C<Foo::Bar> エクステンションについて述べてみましょう:

    $self->param($name, $value);            # set a scalar
    $value = $self->param($name);           # retrieve a scalar

=begin original

If it does not yet provide support for any encoding, one could write a
derived class with such a C<param> method:

=end original

どのエンコーディングもまだサポートしていないのなら、
以下のような C<param> メソッドを持った派生クラスを
記述することができるでしょう:

    sub param {
      my($self,$name,$value) = @_;
      utf8::upgrade($name);     # make sure it is UTF-8 encoded
      if (defined $value) {
        utf8::upgrade($value);  # make sure it is UTF-8 encoded
        return $self->SUPER::param($name,$value);
      } else {
        my $ret = $self->SUPER::param($name);
        Encode::_utf8_on($ret); # we know, it is UTF-8 encoded
        return $ret;
      }
    }

=begin original

Some extensions provide filters on data entry/exit points, such as
DB_File::filter_store_key and family. Look out for such filters in
the documentation of your extensions, they can make the transition to
Unicode data much easier.

=end original

一部のエクステンションはデータのエントリ/脱出ポイントでフィルターを
提供しています。
たとえば DB_File::filter_store_keyとその仲間です。
あなた使うエクステンションのドキュメントにあるそのようなフィルターに
注意してください。
それらは Unicode データの変化をより容易にします。

=head2 Speed

(速度)

=begin original

Some functions are slower when working on UTF-8 encoded strings than
on byte encoded strings.  All functions that need to hop over
characters such as length(), substr() or index(), or matching regular
expressions can work B<much> faster when the underlying data are
byte-encoded.

=end original

一部の関数は UTF-8 でエンコードされた文字列に対して適用したときにバイト
エンコードされた文字列に対するときよりも遅くなります。
文字に対して働く必要のある length()、substr()、index()のような関数のすべてと
正規表現マッチングは、データが
バイトエンコードされているときには B<かなり> 早く動作できます。

=begin original

In Perl 5.8.0 the slowness was often quite spectacular; in Perl 5.8.1
a caching scheme was introduced which will hopefully make the slowness
somewhat less spectacular, at least for some operations.  In general,
operations with UTF-8 encoded strings are still slower. As an example,
the Unicode properties (character classes) like C<\p{Nd}> are known to
be quite a bit slower (5-20 times) than their simpler counterparts
like C<\d> (then again, there 268 Unicode characters matching C<Nd>
compared with the 10 ASCII characters matching C<d>).

=end original

Perl 5.8.0 ではこの遅さはしばしば目立つものでした。
Perl 5.8.1 では少なくとも一部の操作については、遅さを改善することを
期待するキャッシングスキーム(caching scheme)が導入されました。
一般的には、UTF-8 エンコードされた文字列に対する操作はまだ遅いものです。
たとえば、C<\p{Nd}> のような Unicode の特性(文字クラス)は対応する
C<\d> のような単純なものよりも目立って遅い(5 倍から10 倍)ことが
知られています(繰り返しますが、C<d> は 10 の ASCII 文字に対して
マッチするのに対して C<Nd> は 268 の Unicode 文字にマッチします)。

=head2 Porting code from perl-5.6.X

(perl 5.6.X からコードを移植する)

=begin original

Perl 5.8 has a different Unicode model from 5.6. In 5.6 the programmer
was required to use the C<utf8> pragma to declare that a given scope
expected to deal with Unicode data and had to make sure that only
Unicode data were reaching that scope. If you have code that is
working with 5.6, you will need some of the following adjustments to
your code. The examples are written such that the code will continue
to work under 5.6, so you should be safe to try them out.

=end original

Perl 5.8 は 5.6 とは異なる Unicode モデルを持っています。
5.6 ではプログラマは、ある与えられたスコープが Unicode データを
取り扱うのと Unicode データだけがそのスコープにあることを宣言するのに
C<utf8> プラグマの使用を要求されていました。
5.6 で動いていたプログラムを持っているのなら、以下に挙げる微調整を施す
必要があるでしょう。
例は 5.6 でも動くように書かれているので、安心して試すことができます。

=over 4

=item *

=begin original

A filehandle that should read or write UTF-8

=end original

UTF-8 で読み書きすべきファイルハンドル

  if ($] > 5.007) {
    binmode $fh, ":encoding(utf8)";
  }

=item *

=begin original

A scalar that is going to be passed to some extension

=end original

何らかのエクステンションに渡そうとするスカラ

=begin original

Be it Compress::Zlib, Apache::Request or any extension that has no
mention of Unicode in the manpage, you need to make sure that the
UTF8 flag is stripped off. Note that at the time of this writing
(October 2002) the mentioned modules are not UTF-8-aware. Please
check the documentation to verify if this is still true.

=end original

Compress::Zlib、Apache::Request などの、マニュアルページに Unicode に
関する記載がない何らかのエクステンションで、確実に UTF8 フラグが
オフにする必要があります。
これを書いている時点(2002 年 10 月)では、上記のモジュールは
UTF-8 対応でないことに注意してください。
これがまだ真であるのなら、ドキュメントをチェックして確かめてください。

  if ($] > 5.007) {
    require Encode;
    $val = Encode::encode_utf8($val); # make octets
  }

=item *

=begin original

A scalar we got back from an extension

=end original

エクステンションから返ってきたスカラ

=begin original

If you believe the scalar comes back as UTF-8, you will most likely
want the UTF8 flag restored:

=end original

そのスカラが UTF-8 として返ってきたものだと信じているのなら、
UTF-8 フラグをリストアしたいと考えるでしょう:

  if ($] > 5.007) {
    require Encode;
    $val = Encode::decode_utf8($val);
  }

=item *

=begin original

Same thing, if you are really sure it is UTF-8

=end original

同様に、UTF-8 だと確信しているのなら

  if ($] > 5.007) {
    require Encode;
    Encode::_utf8_on($val);
  }

=item *

=begin original

A wrapper for fetchrow_array and fetchrow_hashref

=end original

fetchrow_array と fetchrow_hashref へのラッパ

=begin original

When the database contains only UTF-8, a wrapper function or method is
a convenient way to replace all your fetchrow_array and
fetchrow_hashref calls. A wrapper function will also make it easier to
adapt to future enhancements in your database driver. Note that at the
time of this writing (October 2002), the DBI has no standardized way
to deal with UTF-8 data. Please check the documentation to verify if
that is still true.

=end original

データベースが UTF-8 のみから構成されているとき、ラッパ関数や
ラッパメソッドはあなたの fetchrow_array や fetchrow_hashref の呼び出しを
置き換えるのに便利な方法でしょう。
ラッパ関数はまた、あなたの使っているデータベースドライバが
将来拡張されたときに適用しやすくするでしょう。
このドキュメントを書いている時点(2002 年 10 月)では、DBI は UTF-8 のデータを
扱う標準的な方法を持っていません。
これがまだ真ならドキュメントをチェックして確かめてください。

  sub fetchrow {
    my($self, $sth, $what) = @_; # $what is one of fetchrow_{array,hashref}
    if ($] < 5.007) {
      return $sth->$what;
    } else {
      require Encode;
      if (wantarray) {
        my @arr = $sth->$what;
        for (@arr) {
          defined && /[^\000-\177]/ && Encode::_utf8_on($_);
        }
        return @arr;
      } else {
        my $ret = $sth->$what;
        if (ref $ret) {
          for my $k (keys %$ret) {
            defined && /[^\000-\177]/ && Encode::_utf8_on($_) for $ret->{$k};
          }
          return $ret;
        } else {
          defined && /[^\000-\177]/ && Encode::_utf8_on($_) for $ret;
          return $ret;
        }
      }
    }
  }

=item *

=begin original

A large scalar that you know can only contain ASCII

=end original

ASCII だけが含まれていると分かっている大きなスカラ

=begin original

Scalars that contain only ASCII and are marked as UTF-8 are sometimes
a drag to your program. If you recognize such a situation, just remove
the UTF8 flag:

=end original

ASCII だけから構成されているのに UTF8 として印付けされているスカラが
あなたのプログラムへ引きずりこまれることがあります。
そのような場合を認識したならば、単に UTF-8 フラグを取り除いてください:

  utf8::downgrade($val) if $] > 5.007;

=back

=head1 SEE ALSO

L<perlunitut>, L<perluniintro>, L<Encode>, L<open>, L<utf8>, L<bytes>,
L<perlretut>, L<perlvar/"${^UNICODE}">

=begin meta

Created: KIMURA Koichi (-5.8.5)
Updated: Kentaro Shirakata <argrath@ub32.org> (5.10.0-)

=end meta

=cut
