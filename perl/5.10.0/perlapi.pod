
=encoding euc-jp

-*- buffer-read-only: t -*-

!!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
This file is built by autodoc.pl extracting documentation from the C source
files.

=head1 NAME

=begin original

perlapi - autogenerated documentation for the perl public API

=end original

perlapi - perl public API の自動生成ドキュメント

=head1 DESCRIPTION
X<Perl API> X<API> X<api>

=begin original

This file contains the documentation of the perl public API generated by
embed.pl, specifically a listing of functions, macros, flags, and variables
that may be used by extension writers.  The interfaces of any functions that
are not listed here are subject to change without notice.  For this reason,
blindly using functions listed in proto.h is to be avoided when writing
extensions.

=end original

このファイルは embed.pl で生成された perl の公式な API のドキュメントです;
特にエクステンションの作者が使うかもしれない関数、マクロ、フラグ、変数の
一覧です。
ここに挙げられていないどの関数のインターフェースも予告なしに
変更されることがあります。
この理由により、エクステンションを書くときに proto.h に挙げられている
関数を盲目的に使うことは避けるべきです。

=begin original

Note that all Perl API global variables must be referenced with the C<PL_>
prefix.  Some macros are provided for compatibility with the older,
unadorned names, but this support may be disabled in a future release.

=end original

全ての Perl API グローバル変数は C<PL_> というプリフィックスをつけて
参照しなければならないということに注意してください。
一部のマクロは以前のものとの互換性を確保していてはいますが、それは将来の
リリースにおいては無効になるかもしれません。

=begin original

The listing is alphabetical, case insensitive.

=end original

リストは大文字小文字を無視したアルファベット順です。

=head1 "Gimme" Values

=over 8

=item GIMME
X<GIMME>

=begin original

A backward-compatible version of C<GIMME_V> which can only return
C<G_SCALAR> or C<G_ARRAY>; in a void context, it returns C<G_SCALAR>.
Deprecated.  Use C<GIMME_V> instead.

=end original

C<G_SCALAR> か C<G_ARRAY> しか返さないような C<GIMME_V> の、
過去互換性のためのものです。
無効コンテキストでは、これは C<G_SCALAR> を返します。
非推奨です。
代わりに C<GIMME_V> を使ってください。

	U32	GIMME

=for hackers
Found in file op.h

=item GIMME_V
X<GIMME_V>

=begin original

The XSUB-writer's equivalent to Perl's C<wantarray>.  Returns C<G_VOID>,
C<G_SCALAR> or C<G_ARRAY> for void, scalar or list context,
respectively.

=end original

XSUB 作成者のための、Perl の C<wantarray> に透過なものです。
C<G_VOID>、
C<G_SCALAR>、C<G_ARRAY> をそれぞれ、無効コンテキスト、スカラ
コンテキスト、リストコンテキストのときに返します。

	U32	GIMME_V

=for hackers
Found in file op.h

=item G_ARRAY
X<G_ARRAY>

=begin original

Used to indicate list context.  See C<GIMME_V>, C<GIMME> and
L<perlcall>.

=end original

リストコンテキストを示すために使われます。
C<GIMME_V>、C<GIMME>、L<perlcall> を参照してください。

=for hackers
Found in file cop.h

=item G_DISCARD
X<G_DISCARD>

=begin original

Indicates that arguments returned from a callback should be discarded.  See
L<perlcall>.

=end original

コールバックから返される引数が破棄されるべきものであることを示します。
L<perlcall> を参照してください。

=for hackers
Found in file cop.h

=item G_EVAL
X<G_EVAL>

=begin original

Used to force a Perl C<eval> wrapper around a callback.  See
L<perlcall>.

=end original

コールバックを Perl の C<eval> で囲むのを強制するために使われます。
L<perlcall> を参照してください。

=for hackers
Found in file cop.h

=item G_NOARGS
X<G_NOARGS>

=begin original

Indicates that no arguments are being sent to a callback.  See
L<perlcall>.

=end original

コールバックに渡す引数がないことを示します。
L<perlcall> を参照してください。

=for hackers
Found in file cop.h

=item G_SCALAR
X<G_SCALAR>

=begin original

Used to indicate scalar context.  See C<GIMME_V>, C<GIMME>, and
L<perlcall>.

=end original

スカラコンテキストを示すのに使われます。
C<GIMME_V>, C<GIMME>, L<perlcall> を参照してください。

=for hackers
Found in file cop.h

=item G_VOID
X<G_VOID>

=begin original

Used to indicate void context.  See C<GIMME_V> and L<perlcall>.

=end original

無効コンテキストを示すために使われます。
C<GIMME_V> と L<perlcall> を参照してください。

=for hackers
Found in file cop.h

=back

=head1 Array Manipulation Functions

=over 8

=item AvFILL
X<AvFILL>

=begin original

Same as C<av_len()>.  Deprecated, use C<av_len()> instead.

=end original

C<av_len()> と同様です。
非推奨なので、代わりに C<av_len()> を使ってください。

	int	AvFILL(AV* av)

=for hackers
Found in file av.h

=item av_clear
X<av_clear>

=begin original

Clears an array, making it empty.  Does not free the memory used by the
array itself.

=end original

配列をクリアし、空にします。
配列自身が使っているメモリの解放はしません。

	void	av_clear(AV* ar)

=for hackers
Found in file av.c

=item av_create_and_push
X<av_create_and_push>

=begin original

Push an SV onto the end of the array, creating the array if necessary.
A small internal helper function to remove a commonly duplicated idiom.

=end original

SV を配列の最後にプッシュします; もし必要なら配列を作ります。
一般的に複製された慣用句を削除するための小さい内部ヘルパーです。

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	void	av_create_and_push(AV **const avp, SV *const val)

=for hackers
Found in file av.c

=item av_create_and_unshift_one
X<av_create_and_unshift_one>

=begin original

Unshifts an SV onto the beginning of the array, creating the array if
necessary.
A small internal helper function to remove a commonly duplicated idiom.

=end original

SV を配列の最初に unshift します; もし必要なら配列を作ります。
一般的に複製された慣用句を削除するための小さい内部ヘルパーです。

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	SV**	av_create_and_unshift_one(AV **const avp, SV *const val)

=for hackers
Found in file av.c

=item av_delete
X<av_delete>

=begin original

Deletes the element indexed by C<key> from the array.  Returns the
deleted element. If C<flags> equals C<G_DISCARD>, the element is freed
and null is returned.

=end original

配列から、添え字が C<key> の要素を削除します。
削除された要素を返します。
もし C<flags> が C<G_DISCARD> なら、要素は解放されて NULL が返されます。

	SV*	av_delete(AV* ar, I32 key, I32 flags)

=for hackers
Found in file av.c

=item av_exists
X<av_exists>

=begin original

Returns true if the element indexed by C<key> has been initialized.

=end original

添え字が C<key> の要素が既に初期化されているなら真を返します。

=begin original

This relies on the fact that uninitialized array elements are set to
C<&PL_sv_undef>.

=end original

これは、初期化されていない配列要素は C<&PL_sv_undef> が
セットされているという事実に依存しています。

	bool	av_exists(AV* ar, I32 key)

=for hackers
Found in file av.c

=item av_extend
X<av_extend>

=begin original

Pre-extend an array.  The C<key> is the index to which the array should be
extended.

=end original

配列を事前拡張します。
C<key> は、拡張された後の配列の添え字です。

	void	av_extend(AV* ar, I32 key)

=for hackers
Found in file av.c

=item av_fetch
X<av_fetch>

=begin original

Returns the SV at the specified index in the array.  The C<key> is the
index.  If C<lval> is set then the fetch will be part of a store.  Check
that the return value is non-null before dereferencing it to a C<SV*>.

=end original

配列中の指定された添え字にあるSVを返します。
C<key> は添え字です。
C<lval> がセットされている場合、このフェッチはストアの一部となります。
戻り値の C<SV*> に対して参照外しをする場合にそれがナルでないかを
チェックしてください。

=begin original

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for
more information on how to use this function on tied arrays. 

=end original

この関数をtieされた配列に対して使う場合の説明は
L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> を
参照してください。

	SV**	av_fetch(AV* ar, I32 key, I32 lval)

=for hackers
Found in file av.c

=item av_fill
X<av_fill>

=begin original

Set the highest index in the array to the given number, equivalent to
Perl's C<$#array = $fill;>.

=end original

配列の最大の添え字を与えられた数値にセットします; Perl の
C<$#array = $fill;> と等価です。

=begin original

The number of elements in the an array will be C<fill + 1> after
av_fill() returns.  If the array was previously shorter then the
additional elements appended are set to C<PL_sv_undef>.  If the array
was longer, then the excess elements are freed.  C<av_fill(av, -1)> is
the same as C<av_clear(av)>.

=end original

av_fill() から返った後、配列の要素数は C<fill + 1> になります。
配列が以前より短くなった場合は、追加された要素は C<PL_sv_undef> が
セットされます。
配列がより長くなった場合は、超過した要素は解放されます。
C<av_fill(av, -1)> は C<av_clear(av)> と同じです。

	void	av_fill(AV* ar, I32 fill)

=for hackers
Found in file av.c

=item av_len
X<av_len>

=begin original

Returns the highest index in the array.  The number of elements in the
array is C<av_len(av) + 1>.  Returns -1 if the array is empty.

=end original

配列中で最大の添え字を返します。
配列の要素数は C<av_len(av) + 1> です。
配列が空である場合には -1 を返します。

	I32	av_len(const AV* ar)

=for hackers
Found in file av.c

=item av_make
X<av_make>

=begin original

Creates a new AV and populates it with a list of SVs.  The SVs are copied
into the array, so they may be freed after the call to av_make.  The new AV
will have a reference count of 1.

=end original

新しい AV を生成して、SV のリストで埋めます。
その SV は配列へとコピーされるので、av_make を呼び出した後で
解放することもできます。
新たな AV はその参照カウントとして 1 を持ちます。

	AV*	av_make(I32 size, SV** svp)

=for hackers
Found in file av.c

=item av_pop
X<av_pop>

=begin original

Pops an SV off the end of the array.  Returns C<&PL_sv_undef> if the array
is empty.

=end original

配列の最後にある SV をポップします。
配列が空である場合には C<&PL_sv_undef> を返します。

	SV*	av_pop(AV* ar)

=for hackers
Found in file av.c

=item av_push
X<av_push>

=begin original

Pushes an SV onto the end of the array.  The array will grow automatically
to accommodate the addition.

=end original

配列の末尾に SV をプッシュします。
追加に対応するため、配列は自動的に拡張されます。

	void	av_push(AV* ar, SV* val)

=for hackers
Found in file av.c

=item av_shift
X<av_shift>

=begin original

Shifts an SV off the beginning of the array.

=end original

配列の先頭にある SV をシフトして取り出します。

	SV*	av_shift(AV* ar)

=for hackers
Found in file av.c

=item av_store
X<av_store>

=begin original

Stores an SV in an array.  The array index is specified as C<key>.  The
return value will be NULL if the operation failed or if the value did not
need to be actually stored within the array (as in the case of tied
arrays). Otherwise it can be dereferenced to get the original C<SV*>.  Note
that the caller is responsible for suitably incrementing the reference
count of C<val> before the call, and decrementing it if the function
returned NULL.

=end original

SV を配列に格納します。
配列の添え字は C<key> で指定します。
戻り値は操作が失敗したり、(tie されている配列の場合のように)値を実際に
配列に格納する必要がないような場合には NULL になります。
そうでなければ、取得したオリジナルの C<SV*> の参照外しを
することができます。
呼び出し側は、呼び出しを行う前に C<val> の参照カウントが
インクリメントされる原因であり、関数が NULL を返したときには参照カウントの
デクリメントを行うということに注意してください。

=begin original

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for
more information on how to use this function on tied arrays.

=end original

この関数を tie された配列に対して使う場合の説明は
L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> を
参照してください。

	SV**	av_store(AV* ar, I32 key, SV* val)

=for hackers
Found in file av.c

=item av_undef
X<av_undef>

=begin original

Undefines the array.  Frees the memory used by the array itself.

=end original

配列を undefine します。
配列自身が使っていたメモリーを解放します。

	void	av_undef(AV* ar)

=for hackers
Found in file av.c

=item av_unshift
X<av_unshift>

=begin original

Unshift the given number of C<undef> values onto the beginning of the
array.  The array will grow automatically to accommodate the addition.  You
must then use C<av_store> to assign values to these new elements.

=end original

配列の先頭に、与えられた数だけの C<undef> 値を unsfhit します。
追加されたものにあわせて、配列は自動的に大きくなります。
追加された新しい要素に対して値を代入するには、この後で C<av_store> を
使わなければなりません。

	void	av_unshift(AV* ar, I32 num)

=for hackers
Found in file av.c

=item get_av
X<get_av>

=begin original

Returns the AV of the specified Perl array.  If C<create> is set and the
Perl variable does not exist then it will be created.  If C<create> is not
set and the variable does not exist then NULL is returned.

=end original

指定された Perl 配列の AV を返します。
C<create> がセットされていて、
指定された変数が存在していなければ AV が生成されます。
C<create> がセットされておらず、かつ、指定された変数がなかった場合には
NULL が返されます。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	AV*	get_av(const char* name, I32 create)

=for hackers
Found in file perl.c

=item newAV
X<newAV>

=begin original

Creates a new AV.  The reference count is set to 1.

=end original

新たな AV を生成します。
参照カウントは 1 に設定されます。

	AV*	newAV()

=for hackers
Found in file av.c

=item sortsv
X<sortsv>

=begin original

Sort an array. Here is an example:

=end original

配列をソートします。
以下は例です:

    sortsv(AvARRAY(av), av_len(av)+1, Perl_sv_cmp_locale);

=begin original

Currently this always uses mergesort. See sortsv_flags for a more
flexible routine.

=end original

現在のところ、これは常にマージソートを使います。
さらに柔軟なルーチンのためには sortsv_flags を参照してください。

	void	sortsv(SV** array, size_t num_elts, SVCOMPARE_t cmp)

=for hackers
Found in file pp_sort.c

=item sortsv_flags
X<sortsv_flags>

=begin original

Sort an array, with various options.

=end original

様々なオプション付きで配列をソートします。

	void	sortsv_flags(SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags)

=for hackers
Found in file pp_sort.c

=back

=head1 Callback Functions

=over 8

=item call_argv
X<call_argv>

=begin original

Performs a callback to the specified Perl sub.  See L<perlcall>.

=end original

指定された Perl サブルーチンに対するコールバックを呼び出します。
L<perlcall> を参照してください。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	I32	call_argv(const char* sub_name, I32 flags, char** argv)

=for hackers
Found in file perl.c

=item call_method
X<call_method>

=begin original

Performs a callback to the specified Perl method.  The blessed object must
be on the stack.  See L<perlcall>.

=end original

指定された Perl サブルーチンに対するコールバックを呼び出します。
bless されたオブジェクトがスタック上になければなりません。
L<perlcall> を参照してください。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	I32	call_method(const char* methname, I32 flags)

=for hackers
Found in file perl.c

=item call_pv
X<call_pv>

=begin original

Performs a callback to the specified Perl sub.  See L<perlcall>.

=end original

指定された Perl サブルーチンに対するコールバックを呼び出します。
L<perlcall> を参照してください。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	I32	call_pv(const char* sub_name, I32 flags)

=for hackers
Found in file perl.c

=item call_sv
X<call_sv>

=begin original

Performs a callback to the Perl sub whose name is in the SV.  See
L<perlcall>.

=end original

SV にある名前を持った
Perl サブルーチンに対するコールバックを呼び出します。
L<perlcall> を参照してください。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	I32	call_sv(SV* sv, I32 flags)

=for hackers
Found in file perl.c

=item ENTER
X<ENTER>

=begin original

Opening bracket on a callback.  See C<LEAVE> and L<perlcall>.

=end original

コールバックにあるブラケットを開きます。
C<LEAVE> と L<perlcall> を参照してください。

		ENTER;

=for hackers
Found in file scope.h

=item eval_pv
X<eval_pv>

=begin original

Tells Perl to C<eval> the given string and return an SV* result.

=end original

Perl に対して、与えられた文字列を C<eval> してその結果をSV* に返すように
指示します。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	SV*	eval_pv(const char* p, I32 croak_on_error)

=for hackers
Found in file perl.c

=item eval_sv
X<eval_sv>

=begin original

Tells Perl to C<eval> the string in the SV.

=end original

Perl に対し、SV にある文字列を C<eval> するように指示します。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	I32	eval_sv(SV* sv, I32 flags)

=for hackers
Found in file perl.c

=item FREETMPS
X<FREETMPS>

=begin original

Closing bracket for temporaries on a callback.  See C<SAVETMPS> and
L<perlcall>.

=end original

コールバックにある一時変数のためのブラケットを閉じます。
C<SAVETMPS> と L<perlcall> を参照してください。

		FREETMPS;

=for hackers
Found in file scope.h

=item LEAVE
X<LEAVE>

=begin original

Closing bracket on a callback.  See C<ENTER> and L<perlcall>.

=end original

コールバック上のブラケットを閉じます。
C<ENTER> と L<perlcall> を参照してください。

		LEAVE;

=for hackers
Found in file scope.h

=item SAVETMPS
X<SAVETMPS>

=begin original

Opening bracket for temporaries on a callback.  See C<FREETMPS> and
L<perlcall>.

=end original

コールバックにある一時変数のためにブラケットを開けます。
C<FREETMPS> と L<perlcall> を参照してください。

		SAVETMPS;

=for hackers
Found in file scope.h

=back

=head1 Character classes

=over 8

=item isALNUM
X<isALNUM>

=begin original

Returns a boolean indicating whether the C C<char> is an ASCII alphanumeric
character (including underscore) or digit.

=end original

C<char> がアスキーのアルファベット文字(下線を含む)、もしくは数字で
あるかどうかを表わすブール値を返します。

	bool	isALNUM(char ch)

=for hackers
Found in file handy.h

=item isALPHA
X<isALPHA>

=begin original

Returns a boolean indicating whether the C C<char> is an ASCII alphabetic
character.

=end original

C<char> がアスキーのアルファベット文字であるかどうかを表わす
ブール値を返します。

	bool	isALPHA(char ch)

=for hackers
Found in file handy.h

=item isDIGIT
X<isDIGIT>

=begin original

Returns a boolean indicating whether the C C<char> is an ASCII
digit.

=end original

C<char> がアスキーの数字であるかどうかを表わすブール値を返します。

	bool	isDIGIT(char ch)

=for hackers
Found in file handy.h

=item isLOWER
X<isLOWER>

=begin original

Returns a boolean indicating whether the C C<char> is a lowercase
character.

=end original

C<char> が小文字の文字であるかどうかを表わすブール値を返します。

	bool	isLOWER(char ch)

=for hackers
Found in file handy.h

=item isSPACE
X<isSPACE>

=begin original

Returns a boolean indicating whether the C C<char> is whitespace.

=end original

C<char> が空白であるかどうかを表わすブール値を返します。

	bool	isSPACE(char ch)

=for hackers
Found in file handy.h

=item isUPPER
X<isUPPER>

=begin original

Returns a boolean indicating whether the C C<char> is an uppercase
character.

=end original

C<char> が大文字の文字であるかどうかを表わすブール値を返します。

	bool	isUPPER(char ch)

=for hackers
Found in file handy.h

=item toLOWER
X<toLOWER>

=begin original

Converts the specified character to lowercase.

=end original

指定された文字を小文字に変換します。

	char	toLOWER(char ch)

=for hackers
Found in file handy.h

=item toUPPER
X<toUPPER>

=begin original

Converts the specified character to uppercase.

=end original

指定された文字を大文字に変換します。

	char	toUPPER(char ch)

=for hackers
Found in file handy.h

=back

=head1 Cloning an interpreter

=over 8

=item perl_clone
X<perl_clone>

=begin original

Create and return a new interpreter by cloning the current one.

=end original

現在のものをクローン化することによって新しいインタプリタを作成し、
それを返します。

=begin original

perl_clone takes these flags as parameters:

=end original

perl_clone は以下のフラグを引数として受け取ります:

=begin original

CLONEf_COPY_STACKS - is used to, well, copy the stacks also,
without it we only clone the data and zero the stacks,
with it we copy the stacks and the new perl interpreter is
ready to run at the exact same point as the previous one.
The pseudo-fork code uses COPY_STACKS while the
threads->create doesn't.

=end original

CLONEf_COPY_STACKS - is used to, well, copy the stacks also,
without it we only clone the data and zero the stacks,
with it we copy the stacks and the new perl interpreter is
ready to run at the exact same point as the previous one.
The pseudo-fork code uses COPY_STACKS while the
threads->create doesn't.
(TBT)

=begin original

CLONEf_KEEP_PTR_TABLE
perl_clone keeps a ptr_table with the pointer of the old
variable as a key and the new variable as a value,
this allows it to check if something has been cloned and not
clone it again but rather just use the value and increase the
refcount. If KEEP_PTR_TABLE is not set then perl_clone will kill
the ptr_table using the function
C<ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;>,
reason to keep it around is if you want to dup some of your own
variable who are outside the graph perl scans, example of this
code is in threads.xs create

=end original

CLONEf_KEEP_PTR_TABLE
perl_clone keeps a ptr_table with the pointer of the old
variable as a key and the new variable as a value,
this allows it to check if something has been cloned and not
clone it again but rather just use the value and increase the
refcount. If KEEP_PTR_TABLE is not set then perl_clone will kill
the ptr_table using the function
C<ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;>,
reason to keep it around is if you want to dup some of your own
variable who are outside the graph perl scans, example of this
code is in threads.xs create
(TBT)

=begin original

CLONEf_CLONE_HOST
This is a win32 thing, it is ignored on unix, it tells perls
win32host code (which is c++) to clone itself, this is needed on
win32 if you want to run two threads at the same time,
if you just want to do some stuff in a separate perl interpreter
and then throw it away and return to the original one,
you don't need to do anything.

=end original

CLONEf_CLONE_HOST
This is a win32 thing, it is ignored on unix, it tells perls
win32host code (which is c++) to clone itself, this is needed on
win32 if you want to run two threads at the same time,
if you just want to do some stuff in a separate perl interpreter
and then throw it away and return to the original one,
you don't need to do anything.
(TBT)

	PerlInterpreter*	perl_clone(PerlInterpreter* interp, UV flags)

=for hackers
Found in file sv.c

=back

=head1 CV Manipulation Functions

=over 8

=item CvSTASH
X<CvSTASH>

=begin original

Returns the stash of the CV.

=end original

CV のスタッシュを返します。

	HV*	CvSTASH(CV* cv)

=for hackers
Found in file cv.h

=item get_cv
X<get_cv>

=begin original

Uses C<strlen> to get the length of C<name>, then calls C<get_cvn_flags>.

=end original

C<name> の長さを得るために C<strlen> を使い、それから C<get_cvn_flags> を
呼び出します。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	CV*	get_cv(const char* name, I32 flags)

=for hackers
Found in file perl.c

=item get_cvn_flags
X<get_cvn_flags>

=begin original

Returns the CV of the specified Perl subroutine.  C<flags> are passed to
C<gv_fetchpvn_flags>. If C<GV_ADD> is set and the Perl subroutine does not
exist then it will be declared (which has the same effect as saying
C<sub name;>).  If C<GV_ADD> is not set and the subroutine does not exist
then NULL is returned.

=end original

指定された Perl サブルーチンの CV を返します。
C<flags> は C<gv_fetchpvn_flags> に渡されます。
C<GV_ADD> がセットされ、Perl サブルーチンが存在しない場合は、
これが宣言されます(これは C<sub name;> と同じ効果です)。
C<GV_ADD> がセットされず、Perl サブルーチンが存在しない場合は、NULL が
返されます。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	CV*	get_cvn_flags(const char* name, STRLEN len, I32 flags)

=for hackers
Found in file perl.c

=back

=head1 Embedding Functions

=over 8

=item cv_undef
X<cv_undef>

=begin original

Clear out all the active components of a CV. This can happen either
by an explicit C<undef &foo>, or by the reference count going to zero.
In the former case, we keep the CvOUTSIDE pointer, so that any anonymous
children can still follow the full lexical scope chain.

=end original

CV の全ての有効な要素を片付けます。
これは明示的な C<undef &foo> によってか、参照カウントが 0 になることによって
起こります。
前者の場合、CvOUTSIDE ポインタは維持するので、全ての無名の子は完全な
レキシカルスコープチェーンに従ったままです。

	void	cv_undef(CV* cv)

=for hackers
Found in file op.c

=item load_module
X<load_module>

=begin original

Loads the module whose name is pointed to by the string part of name.
Note that the actual module name, not its filename, should be given.
Eg, "Foo::Bar" instead of "Foo/Bar.pm".  flags can be any of
PERL_LOADMOD_DENY, PERL_LOADMOD_NOIMPORT, or PERL_LOADMOD_IMPORT_OPS
(or 0 for no flags). ver, if specified, provides version semantics
similar to C<use Foo::Bar VERSION>.  The optional trailing SV*
arguments can be used to specify arguments to the module's import()
method, similar to C<use Foo::Bar VERSION LIST>.

=end original

Loads the module whose name is pointed to by the string part of name.
Note that the actual module name, not its filename, should be given.
Eg, "Foo::Bar" instead of "Foo/Bar.pm".  flags can be any of
PERL_LOADMOD_DENY, PERL_LOADMOD_NOIMPORT, or PERL_LOADMOD_IMPORT_OPS
(or 0 for no flags). ver, if specified, provides version semantics
similar to C<use Foo::Bar VERSION>.  The optional trailing SV*
arguments can be used to specify arguments to the module's import()
method, similar to C<use Foo::Bar VERSION LIST>.
(TBT)

	void	load_module(U32 flags, SV* name, SV* ver, ...)

=for hackers
Found in file op.c

=item nothreadhook
X<nothreadhook>

=begin original

Stub that provides thread hook for perl_destruct when there are
no threads.

=end original

スレッドがないときの perl_destruct のためのスレッドフックを提供する
スタブです。

	int	nothreadhook()

=for hackers
Found in file perl.c

=item perl_alloc
X<perl_alloc>

=begin original

Allocates a new Perl interpreter.  See L<perlembed>.

=end original

新たなPerl インタプリタを割り付けます。
L<perlembed> を参照してください。

	PerlInterpreter*	perl_alloc()

=for hackers
Found in file perl.c

=item perl_construct
X<perl_construct>

=begin original

Initializes a new Perl interpreter.  See L<perlembed>.

=end original

新しいPerl インタプリタの初期化を行います。
L<perlembed> を参照してください。

	void	perl_construct(PerlInterpreter* interp)

=for hackers
Found in file perl.c

=item perl_destruct
X<perl_destruct>

=begin original

Shuts down a Perl interpreter.  See L<perlembed>.

=end original

Perl インタプリタをシャットダウンします。
L<perlembed> を参照してください。

	int	perl_destruct(PerlInterpreter* interp)

=for hackers
Found in file perl.c

=item perl_free
X<perl_free>

=begin original

Releases a Perl interpreter.  See L<perlembed>.

=end original

Perl インタプリタを解放します。
L<perlembed> を参照してください。

	void	perl_free(PerlInterpreter* interp)

=for hackers
Found in file perl.c

=item perl_parse
X<perl_parse>

=begin original

Tells a Perl interpreter to parse a Perl script.  See L<perlembed>.

=end original

Perl インタプリタに Perl スクリプトを解析するよう指示します。
L<perlembed> を参照してください。

	int	perl_parse(PerlInterpreter* interp, XSINIT_t xsinit, int argc, char** argv, char** env)

=for hackers
Found in file perl.c

=item perl_run
X<perl_run>

=begin original

Tells a Perl interpreter to run.  See L<perlembed>.

=end original

Perl インタプリタに実行するよう指示します。
L<perlembed> を参照してください。

	int	perl_run(PerlInterpreter* interp)

=for hackers
Found in file perl.c

=item require_pv
X<require_pv>

=begin original

Tells Perl to C<require> the file named by the string argument.  It is
analogous to the Perl code C<eval "require '$file'">.  It's even
implemented that way; consider using load_module instead.

=end original

Tells Perl to C<require> the file named by the string argument.  It is
analogous to the Perl code C<eval "require '$file'">.  It's even
implemented that way; consider using load_module instead.
(TBT)

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	void	require_pv(const char* pv)

=for hackers
Found in file perl.c

=back

=head1 Functions in file dump.c

=over 8

=item pv_display
X<pv_display>

  char *pv_display(SV *dsv, const char *pv, STRLEN cur, STRLEN len,
                   STRLEN pvlim, U32 flags)

=begin original

Similar to

=end original

以下と似ています:

  pv_escape(dsv,pv,cur,pvlim,PERL_PV_ESCAPE_QUOTE);

=begin original

except that an additional "\0" will be appended to the string when
len > cur and pv[cur] is "\0".

=end original

except that an additional "\0" will be appended to the string when
len > cur and pv[cur] is "\0".
(TBT)

=begin original

Note that the final string may be up to 7 chars longer than pvlim.

=end original

最終的な文字列は pvlim より最大 7 文字長くなる可能性があることに
注意してください。

	char*	pv_display(SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim)

=for hackers
Found in file dump.c

=item pv_escape
X<pv_escape>

               |const STRLEN count|const STRLEN max
               |STRLEN const *escaped, const U32 flags

=begin original

Escapes at most the first "count" chars of pv and puts the results into
dsv such that the size of the escaped string will not exceed "max" chars
and will not contain any incomplete escape sequences.

=end original

Escapes at most the first "count" chars of pv and puts the results into
dsv such that the size of the escaped string will not exceed "max" chars
and will not contain any incomplete escape sequences.
(TBT)

=begin original

If flags contains PERL_PV_ESCAPE_QUOTE then any double quotes in the string
will also be escaped.

=end original

If flags contains PERL_PV_ESCAPE_QUOTE then any double quotes in the string
will also be escaped.
(TBT)

=begin original

Normally the SV will be cleared before the escaped string is prepared,
but when PERL_PV_ESCAPE_NOCLEAR is set this will not occur.

=end original

Normally the SV will be cleared before the escaped string is prepared,
but when PERL_PV_ESCAPE_NOCLEAR is set this will not occur.
(TBT)

=begin original

If PERL_PV_ESCAPE_UNI is set then the input string is treated as Unicode,
if PERL_PV_ESCAPE_UNI_DETECT is set then the input string is scanned
using C<is_utf8_string()> to determine if it is Unicode.

=end original

If PERL_PV_ESCAPE_UNI is set then the input string is treated as Unicode,
if PERL_PV_ESCAPE_UNI_DETECT is set then the input string is scanned
using C<is_utf8_string()> to determine if it is Unicode.
(TBT)

=begin original

If PERL_PV_ESCAPE_ALL is set then all input chars will be output
using C<\x01F1> style escapes, otherwise only chars above 255 will be
escaped using this style, other non printable chars will use octal or
common escaped patterns like C<\n>. If PERL_PV_ESCAPE_NOBACKSLASH
then all chars below 255 will be treated as printable and 
will be output as literals.

=end original

If PERL_PV_ESCAPE_ALL is set then all input chars will be output
using C<\x01F1> style escapes, otherwise only chars above 255 will be
escaped using this style, other non printable chars will use octal or
common escaped patterns like C<\n>. If PERL_PV_ESCAPE_NOBACKSLASH
then all chars below 255 will be treated as printable and 
will be output as literals.
(TBT)

=begin original

If PERL_PV_ESCAPE_FIRSTCHAR is set then only the first char of the
string will be escaped, regardles of max. If the string is utf8 and 
the chars value is >255 then it will be returned as a plain hex 
sequence. Thus the output will either be a single char, 
an octal escape sequence, a special escape like C<\n> or a 3 or 
more digit hex value. 

=end original

If PERL_PV_ESCAPE_FIRSTCHAR is set then only the first char of the
string will be escaped, regardles of max. If the string is utf8 and 
the chars value is >255 then it will be returned as a plain hex 
sequence. Thus the output will either be a single char, 
an octal escape sequence, a special escape like C<\n> or a 3 or 
more digit hex value. 
(TBT)

=begin original

If PERL_PV_ESCAPE_RE is set then the escape char used will be a '%' and
not a '\\'. This is because regexes very often contain backslashed
sequences, whereas '%' is not a particularly common character in patterns.

=end original

If PERL_PV_ESCAPE_RE is set then the escape char used will be a '%' and
not a '\\'. This is because regexes very often contain backslashed
sequences, whereas '%' is not a particularly common character in patterns.
(TBT)

=begin original

Returns a pointer to the escaped text as held by dsv.

=end original

dsv によって保持されている、エスケープされたテキストへのポインタを返します。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	char*	pv_escape(SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags)

=for hackers
Found in file dump.c

=item pv_pretty
X<pv_pretty>

           |const STRLEN count|const STRLEN max\
           |const char const *start_color| const char const *end_color\
           |const U32 flags

=begin original

Converts a string into something presentable, handling escaping via
pv_escape() and supporting quoting and ellipses.

=end original

Converts a string into something presentable, handling escaping via
pv_escape() and supporting quoting and ellipses.
(TBT)

=begin original

If the PERL_PV_PRETTY_QUOTE flag is set then the result will be 
double quoted with any double quotes in the string escaped. Otherwise
if the PERL_PV_PRETTY_LTGT flag is set then the result be wrapped in
angle brackets. 

=end original

If the PERL_PV_PRETTY_QUOTE flag is set then the result will be 
double quoted with any double quotes in the string escaped. Otherwise
if the PERL_PV_PRETTY_LTGT flag is set then the result be wrapped in
angle brackets. 
(TBT)

=begin original

If the PERL_PV_PRETTY_ELLIPSES flag is set and not all characters in
string were output then an ellipsis C<...> will be appended to the
string. Note that this happens AFTER it has been quoted.

=end original

If the PERL_PV_PRETTY_ELLIPSES flag is set and not all characters in
string were output then an ellipsis C<...> will be appended to the
string. Note that this happens AFTER it has been quoted.
(TBT)

=begin original

If start_color is non-null then it will be inserted after the opening
quote (if there is one) but before the escaped text. If end_color
is non-null then it will be inserted after the escaped text but before
any quotes or ellipses.

=end original

If start_color is non-null then it will be inserted after the opening
quote (if there is one) but before the escaped text. If end_color
is non-null then it will be inserted after the escaped text but before
any quotes or ellipses.
(TBT)

=begin original

Returns a pointer to the prettified text as held by dsv.

=end original

dsv によって保持されている、飾り付けられたテキストへのポインタを返します。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	char*	pv_pretty(SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags)

=for hackers
Found in file dump.c

=back

=head1 Functions in file mathoms.c

=over 8

=item gv_fetchmethod
X<gv_fetchmethod>

=begin original

See L<gv_fetchmethod_autoload>.

=end original

L<gv_fetchmethod_autoload> を参照してください。

	GV*	gv_fetchmethod(HV* stash, const char* name)

=for hackers
Found in file mathoms.c

=item pack_cat
X<pack_cat>

=begin original

The engine implementing pack() Perl function. Note: parameters next_in_list and
flags are not used. This call should not be used; use packlist instead.

=end original

Perl 関数 unpack() を実装しているエンジンです。
注意: 引数 next_in_list と flags は使われません。
この呼び出しは使うべきではなりません; 代わりに packlist を使ってください。

	void	pack_cat(SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags)

=for hackers
Found in file mathoms.c

=item sv_2pvbyte_nolen
X<sv_2pvbyte_nolen>

=begin original

Return a pointer to the byte-encoded representation of the SV.
May cause the SV to be downgraded from UTF-8 as a side-effect.

=end original

SV のバイトエンコードされた表現へのポインタを返します。
副作用として、SV が UTF-8 から降格するかもしれません。

=begin original

Usually accessed via the C<SvPVbyte_nolen> macro.

=end original

通常は C<SvPVbyte_nolen> マクロ経由でアクセスします。

	char*	sv_2pvbyte_nolen(SV* sv)

=for hackers
Found in file mathoms.c

=item sv_2pvutf8_nolen
X<sv_2pvutf8_nolen>

=begin original

Return a pointer to the UTF-8-encoded representation of the SV.
May cause the SV to be upgraded to UTF-8 as a side-effect.

=end original

SV の UTF-8 エンコードされた表現へのポインタを返します。
副作用として、SV が UTF-8 へ昇格するかもしれません。

=begin original

Usually accessed via the C<SvPVutf8_nolen> macro.

=end original

通常は C<SvPVutf8_nolen> マクロ経由でアクセスします。

	char*	sv_2pvutf8_nolen(SV* sv)

=for hackers
Found in file mathoms.c

=item sv_2pv_nolen
X<sv_2pv_nolen>

=begin original

Like C<sv_2pv()>, but doesn't return the length too. You should usually
use the macro wrapper C<SvPV_nolen(sv)> instead.

=end original

Like C<sv_2pv()>, but doesn't return the length too. You should usually
use the macro wrapper C<SvPV_nolen(sv)> instead.
(TBT)

	char*	sv_2pv_nolen(SV* sv)

=for hackers
Found in file mathoms.c

=item sv_catpvn_mg
X<sv_catpvn_mg>

=begin original

Like C<sv_catpvn>, but also handles 'set' magic.

=end original

C<sv_catpvn> に似ていますが、'set' magic もハンドルします。

	void	sv_catpvn_mg(SV *sv, const char *ptr, STRLEN len)

=for hackers
Found in file mathoms.c

=item sv_catsv_mg
X<sv_catsv_mg>

=begin original

Like C<sv_catsv>, but also handles 'set' magic.

=end original

C<sv_catsv> に似ていますが、'set' magic もハンドルします。

	void	sv_catsv_mg(SV *dstr, SV *sstr)

=for hackers
Found in file mathoms.c

=item sv_force_normal
X<sv_force_normal>

=begin original

Undo various types of fakery on an SV: if the PV is a shared string, make
a private copy; if we're a ref, stop refing; if we're a glob, downgrade to
an xpvmg. See also C<sv_force_normal_flags>.

=end original

Undo various types of fakery on an SV: if the PV is a shared string, make
a private copy; if we're a ref, stop refing; if we're a glob, downgrade to
an xpvmg. See also C<sv_force_normal_flags>.
(TBT)

	void	sv_force_normal(SV *sv)

=for hackers
Found in file mathoms.c

=item sv_iv
X<sv_iv>

=begin original

A private implementation of the C<SvIVx> macro for compilers which can't
cope with complex macro expressions. Always use the macro instead.

=end original

複雑なマクロ式を扱えないコンパイラのための、C<SvIVx> マクロの
プライベート実装です。
代わりに、常にマクロを使ってください。

	IV	sv_iv(SV* sv)

=for hackers
Found in file mathoms.c

=item sv_nolocking
X<sv_nolocking>

=begin original

Dummy routine which "locks" an SV when there is no locking module present.
Exists to avoid test for a NULL function pointer and because it could
potentially warn under some level of strict-ness.

=end original

ロックモジュールがないときに SV を「ロックする」ダミールーチンです。
NULL 関数をテストして、あるレベルでの strict での潜在的な警告を
回避するために存在します。

=begin original

"Superseded" by sv_nosharing().

=end original

sv_nosharing() で「置き換え」られました。

	void	sv_nolocking(SV *sv)

=for hackers
Found in file mathoms.c

=item sv_nounlocking
X<sv_nounlocking>

=begin original

Dummy routine which "unlocks" an SV when there is no locking module present.
Exists to avoid test for a NULL function pointer and because it could
potentially warn under some level of strict-ness.

=end original

ロックモジュールがないときに SV を「アンロックする」ダミールーチンです。
NULL 関数をテストして、あるレベルでの strict での潜在的な警告を
回避するために存在します。

=begin original

"Superseded" by sv_nosharing().

=end original

sv_nosharing() で「置き換え」られました。

	void	sv_nounlocking(SV *sv)

=for hackers
Found in file mathoms.c

=item sv_nv
X<sv_nv>

=begin original

A private implementation of the C<SvNVx> macro for compilers which can't
cope with complex macro expressions. Always use the macro instead.

=end original

複雑なマクロ式を扱えないコンパイラのための、C<SvNVx> マクロの
プライベート実装です。
代わりに、常にマクロを使ってください。

	NV	sv_nv(SV* sv)

=for hackers
Found in file mathoms.c

=item sv_pv
X<sv_pv>

=begin original

Use the C<SvPV_nolen> macro instead

=end original

代わりに C<SvPV_nolen> マクロを使ってください。

	char*	sv_pv(SV *sv)

=for hackers
Found in file mathoms.c

=item sv_pvbyte
X<sv_pvbyte>

=begin original

Use C<SvPVbyte_nolen> instead.

=end original

代わりに C<SvPVbyte_nolen> マクロを使ってください。

	char*	sv_pvbyte(SV *sv)

=for hackers
Found in file mathoms.c

=item sv_pvbyten
X<sv_pvbyten>

=begin original

A private implementation of the C<SvPVbyte> macro for compilers
which can't cope with complex macro expressions. Always use the macro
instead.

=end original

複雑なマクロ式を扱えないコンパイラのための、C<SvPVbyte> マクロの
プライベート実装です。
代わりに、常にマクロを使ってください。

	char*	sv_pvbyten(SV *sv, STRLEN *len)

=for hackers
Found in file mathoms.c

=item sv_pvn
X<sv_pvn>

=begin original

A private implementation of the C<SvPV> macro for compilers which can't
cope with complex macro expressions. Always use the macro instead.

=end original

複雑なマクロ式を扱えないコンパイラのための、C<SvPV> マクロの
プライベート実装です。
代わりに、常にマクロを使ってください。

	char*	sv_pvn(SV *sv, STRLEN *len)

=for hackers
Found in file mathoms.c

=item sv_pvutf8
X<sv_pvutf8>

=begin original

Use the C<SvPVutf8_nolen> macro instead

=end original

代わりに C<SvPVutf8_nolen> マクロを使ってください。

	char*	sv_pvutf8(SV *sv)

=for hackers
Found in file mathoms.c

=item sv_pvutf8n
X<sv_pvutf8n>

=begin original

A private implementation of the C<SvPVutf8> macro for compilers
which can't cope with complex macro expressions. Always use the macro
instead.

=end original

複雑なマクロ式を扱えないコンパイラのための、C<SvPVutf8> マクロの
プライベート実装です。
代わりに、常にマクロを使ってください。

	char*	sv_pvutf8n(SV *sv, STRLEN *len)

=for hackers
Found in file mathoms.c

=item sv_taint
X<sv_taint>

=begin original

Taint an SV. Use C<SvTAINTED_on> instead.

=end original

SV を汚染します。
代わりに C<SvTAINTED_on> を使ってください。

	void	sv_taint(SV* sv)

=for hackers
Found in file mathoms.c

=item sv_unref
X<sv_unref>

=begin original

Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of C<newSVrv>.  This is C<sv_unref_flags> with the C<flag>
being zero.  See C<SvROK_off>.

=end original

SV の RV ステータスをアンセットし、RV によって参照されているものの
参照カウントを減じます。
これは C<newSVrv> の反転したものであると考えられます。
これは、C<flag> がゼロのときの C<sv_unref_flags> です。
C<SvROK_off> を参照してください。

	void	sv_unref(SV* sv)

=for hackers
Found in file mathoms.c

=item sv_usepvn
X<sv_usepvn>

=begin original

Tells an SV to use C<ptr> to find its string value. Implemented by
calling C<sv_usepvn_flags> with C<flags> of 0, hence does not handle 'set'
magic. See C<sv_usepvn_flags>.

=end original

SV に対して、C<ptr> にある文字列を探し出すように指示します。
Implemented by
calling C<sv_usepvn_flags> with C<flags> of 0, hence does not handle 'set'
magic.
C<sv_usepvn_mg> を参照してください。

	void	sv_usepvn(SV* sv, char* ptr, STRLEN len)

=for hackers
Found in file mathoms.c

=item sv_usepvn_mg
X<sv_usepvn_mg>

=begin original

Like C<sv_usepvn>, but also handles 'set' magic.

=end original

C<sv_usepvn> に似ていますが、'set' magic をハンドルします。

	void	sv_usepvn_mg(SV *sv, char *ptr, STRLEN len)

=for hackers
Found in file mathoms.c

=item sv_uv
X<sv_uv>

=begin original

A private implementation of the C<SvUVx> macro for compilers which can't
cope with complex macro expressions. Always use the macro instead.

=end original

複雑なマクロ式を扱えないコンパイラのための、C<SvUVx> マクロの
プライベート実装です。
代わりに、常にマクロを使ってください。

	UV	sv_uv(SV* sv)

=for hackers
Found in file mathoms.c

=item unpack_str
X<unpack_str>

=begin original

The engine implementing unpack() Perl function. Note: parameters strbeg, new_s
and ocnt are not used. This call should not be used, use unpackstring instead.

=end original

Perl 関数 unpack() を実装しているエンジンです。
注意: 引数 strbeg, new_s, ocnt は使われません。
この呼び出しは使うべきではなりません; 代わりに unpackstring を使ってください。

	I32	unpack_str(const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags)

=for hackers
Found in file mathoms.c

=back


=head1 Functions in file pp_ctl.c

=over 8

=item find_runcv
X<find_runcv>

=begin original

Locate the CV corresponding to the currently executing sub or eval.
If db_seqp is non_null, skip CVs that are in the DB package and populate
*db_seqp with the cop sequence number at the point that the DB:: code was
entered. (allows debuggers to eval in the scope of the breakpoint rather
than in the scope of the debugger itself).

=end original

Locate the CV corresponding to the currently executing sub or eval.
If db_seqp is non_null, skip CVs that are in the DB package and populate
*db_seqp with the cop sequence number at the point that the DB:: code was
entered. (allows debuggers to eval in the scope of the breakpoint rather
than in the scope of the debugger itself).
(TBT)

	CV*	find_runcv(U32 *db_seqp)

=for hackers
Found in file pp_ctl.c

=back

=head1 Functions in file pp_pack.c

=over 8

=item packlist
X<packlist>

=begin original

The engine implementing pack() Perl function.

=end original

Perl 関数 pack() を実装しているエンジンです。

	void	packlist(SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist)

=for hackers
Found in file pp_pack.c

=item unpackstring
X<unpackstring>

=begin original

The engine implementing unpack() Perl function. C<unpackstring> puts the
extracted list items on the stack and returns the number of elements.
Issue C<PUTBACK> before and C<SPAGAIN> after the call to this function.

=end original

Perl 関数 unpack() を実装しているエンジンです。
C<unpackstring> puts the extracted list items on the stack and returns the number of elements.
Issue C<PUTBACK> before and C<SPAGAIN> after the call to this function.
(TBT)

	I32	unpackstring(const char *pat, const char *patend, const char *s, const char *strend, U32 flags)

=for hackers
Found in file pp_pack.c

=back

=head1 GV Functions

=over 8

=item GvSV
X<GvSV>

=begin original

Return the SV from the GV.

=end original

GV から SV を返します。

	SV*	GvSV(GV* gv)

=for hackers
Found in file gv.h

=item gv_const_sv
X<gv_const_sv>

=begin original

If C<gv> is a typeglob whose subroutine entry is a constant sub eligible for
inlining, or C<gv> is a placeholder reference that would be promoted to such
a typeglob, then returns the value returned by the sub.  Otherwise, returns
NULL.

=end original

If C<gv> is a typeglob whose subroutine entry is a constant sub eligible for
inlining, or C<gv> is a placeholder reference that would be promoted to such
a typeglob, then returns the value returned by the sub.  Otherwise, returns
NULL.
(TBT)

	SV*	gv_const_sv(GV* gv)

=for hackers
Found in file gv.c

=item gv_fetchmeth
X<gv_fetchmeth>

=begin original

Returns the glob with the given C<name> and a defined subroutine or
C<NULL>.  The glob lives in the given C<stash>, or in the stashes
accessible via @ISA and UNIVERSAL::.

=end original

与えられた C<name> と、定義されたサブルーチンか C<NULL> を使った
glob を返します。
このglobは、与えられた C<stash> か、
@ISA や UNIVERSAL:: を通じてアクセスできるスタッシュにあります。

=begin original

The argument C<level> should be either 0 or -1.  If C<level==0>, as a
side-effect creates a glob with the given C<name> in the given C<stash>
which in the case of success contains an alias for the subroutine, and sets
up caching info for this glob.

=end original

引数 C<level> は 0 か -1 であるべきです。
C<level==0> の場合、副作用として(サブルーチンに対するエイリアスを
含むことに成功した場合に)与えられた C<stash> にある C<name> に対する
glob を生成し、さらにこの glob に対するキャッシュ情報のセットアップを
行います。

=begin original

This function grants C<"SUPER"> token as a postfix of the stash name. The
GV returned from C<gv_fetchmeth> may be a method cache entry, which is not
visible to Perl code.  So when calling C<call_sv>, you should not use
the GV directly; instead, you should use the method's CV, which can be
obtained from the GV with the C<GvCV> macro.

=end original

この関数はスタッシュ名のポストフィックスとして、
トークン C<"SUPER"> を受け付けます。
C<gv_fetchmeth> から返された GV は、Perl プログラムからは参照することの
できないような、メソッドキャッシュのエントリーである可能性が
あります。
このため、C<perl_call_sv> を呼び出したとき、GV を直接
使うべきではありません。
その代わりに、GV に対して C<GvCV> マクロを使って得ることのできる、
メソッドの CV を使うべきなのです。

	GV*	gv_fetchmeth(HV* stash, const char* name, STRLEN len, I32 level)

=for hackers
Found in file gv.c

=item gv_fetchmethod_autoload
X<gv_fetchmethod_autoload>

=begin original

Returns the glob which contains the subroutine to call to invoke the method
on the C<stash>.  In fact in the presence of autoloading this may be the
glob for "AUTOLOAD".  In this case the corresponding variable $AUTOLOAD is
already setup.

=end original

C<stash> にあるメソッドを起動するために呼び出すサブルーチンを含む
glob を返します。
事実、オートローディングの直前でこれは "AUTOLOAD" に対する glob となる
可能性があります。
その場合、$AUTOLOAD に対応する変数が既にセットアップされています。

=begin original

The third parameter of C<gv_fetchmethod_autoload> determines whether
AUTOLOAD lookup is performed if the given method is not present: non-zero
means yes, look for AUTOLOAD; zero means no, don't look for AUTOLOAD.
Calling C<gv_fetchmethod> is equivalent to calling C<gv_fetchmethod_autoload>
with a non-zero C<autoload> parameter.

=end original

C<gv_fetchmethod_autoload> の第三引数は、与えられたメソッドが
存在していなかった場合に AUTLOAD のルックアップをするかしないかを
決定します。
ゼロでないときは AUTOLOAD の検索を行い、ゼロのときには行いません。
C<gv_fetchmethod> の呼び出しは C<gv_fetchmethod_autoload> に
ゼロでない C<autoload> パラメーターを渡したときと等価です。

=begin original

These functions grant C<"SUPER"> token as a prefix of the method name. Note
that if you want to keep the returned glob for a long time, you need to
check for it being "AUTOLOAD", since at the later time the call may load a
different subroutine due to $AUTOLOAD changing its value. Use the glob
created via a side effect to do this.

=end original

これらの関数は、トークン C<"SUPER"> をメソッド名のプリフィックスとして
許します。
返された glob を長い間保存しておきたいのなら、"AUTOLOAD" の存在を
チェックする必要があるということに注意してください。
これは、後での呼び出しが $AUTOALOD の値が変化したことによって、異なる
サブルーチンをロードしてしまうかもしれないからです。

=begin original

These functions have the same side-effects and as C<gv_fetchmeth> with
C<level==0>.  C<name> should be writable if contains C<':'> or C<'
''>. The warning against passing the GV returned by C<gv_fetchmeth> to
C<call_sv> apply equally to these functions.

=end original

これらの関数は、C<gv_fetchmeth> に C<level==0> を渡したときと同じ
副作用を持っています。
C<name> は、その内容に C<':'> か C<'\''> が含まれている場合には書き込み
可能であるべきです。
C<gv_fetchmeth> から返された GV を C<call_sv> に渡したことに対する警告は、
これらの関数についても同じく適用されます。

	GV*	gv_fetchmethod_autoload(HV* stash, const char* name, I32 autoload)

=for hackers
Found in file gv.c

=item gv_fetchmeth_autoload
X<gv_fetchmeth_autoload>

=begin original

Same as gv_fetchmeth(), but looks for autoloaded subroutines too.
Returns a glob for the subroutine.

=end original

Same as gv_fetchmeth(), but looks for autoloaded subroutines too.
Returns a glob for the subroutine.
(TBT)

=begin original

For an autoloaded subroutine without a GV, will create a GV even
if C<level < 0>.  For an autoloaded subroutine without a stub, GvCV()
of the result may be zero.

=end original

For an autoloaded subroutine without a GV, will create a GV even
if C<level < 0>.  For an autoloaded subroutine without a stub, GvCV()
of the result may be zero.
(TBT)

	GV*	gv_fetchmeth_autoload(HV* stash, const char* name, STRLEN len, I32 level)

=for hackers
Found in file gv.c

=item gv_stashpv
X<gv_stashpv>

=begin original

Returns a pointer to the stash for a specified package.  Uses C<strlen> to
determine the length of C<name>, then calls C<gv_stashpvn()>.

=end original

指定されたパッケージに対するスタッシュへのポインタを返します。
C<name> の長さを決定するために C<strlen> を使い、それから
C<gv_stashpvn()> を呼び出します。

	HV*	gv_stashpv(const char* name, I32 flags)

=for hackers
Found in file gv.c

=item gv_stashpvn
X<gv_stashpvn>

=begin original

Returns a pointer to the stash for a specified package.  The C<namelen>
parameter indicates the length of the C<name>, in bytes.  C<flags> is passed
to C<gv_fetchpvn_flags()>, so if set to C<GV_ADD> then the package will be
created if it does not already exist.  If the package does not exist and
C<flags> is 0 (or any other setting that does not create packages) then NULL
is returned.

=end original

Returns a pointer to the stash for a specified package.  The C<namelen>
parameter indicates the length of the C<name>, in bytes.  C<flags> is passed
to C<gv_fetchpvn_flags()>, so if set to C<GV_ADD> then the package will be
created if it does not already exist.  If the package does not exist and
C<flags> is 0 (or any other setting that does not create packages) then NULL
is returned.
(TBT)


	HV*	gv_stashpvn(const char* name, U32 namelen, I32 flags)

=for hackers
Found in file gv.c

=item gv_stashpvs
X<gv_stashpvs>

=begin original

Like C<gv_stashpvn>, but takes a literal string instead of a string/length pair.

=end original

C<gv_stashpvn> と同様ですが、文字列/長さの組ではなく、リテラルな文字列を
取ります。

	HV*	gv_stashpvs(const char* name, I32 create)

=for hackers
Found in file handy.h

=item gv_stashsv
X<gv_stashsv>

=begin original

Returns a pointer to the stash for a specified package.  See C<gv_stashpvn>.

=end original

指定したパッケージに対するスタッシュへのポインタを返します。
C<gv_stashpvn> を参照してください。

	HV*	gv_stashsv(SV* sv, I32 flags)

=for hackers
Found in file gv.c

=back

=head1 Handy Values

=over 8

=item Nullav
X<Nullav>

=begin original

Null AV pointer.

=end original

AVのナルポインタ。

=for hackers
Found in file av.h

=item Nullch
X<Nullch>

=begin original

Null character pointer.

=end original

文字のナルポインタ。

=for hackers
Found in file handy.h

=item Nullcv
X<Nullcv>

=begin original

Null CV pointer.

=end original

CVのナルポインタ。

=for hackers
Found in file cv.h

=item Nullhv
X<Nullhv>

=begin original

Null HV pointer.

=end original

HVのナルポインタ。

=for hackers
Found in file hv.h

=item Nullsv
X<Nullsv>

=begin original

Null SV pointer.

=end original

SVのナルポインタ。

=for hackers
Found in file handy.h

=back

=head1 Hash Manipulation Functions

=over 8

=item get_hv
X<get_hv>

=begin original

Returns the HV of the specified Perl hash.  If C<create> is set and the
Perl variable does not exist then it will be created.  If C<create> is not
set and the variable does not exist then NULL is returned.

=end original

指定された Perl ハッシュの HV を返します。
C<create> がセットされていて、指定された変数が存在していなければ
HV が生成されます。
C<create> がセットされておらず、かつ、指定された変数がなかった場合には
NULL が返されます。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	HV*	get_hv(const char* name, I32 create)

=for hackers
Found in file perl.c

=item HEf_SVKEY
X<HEf_SVKEY>

=begin original

This flag, used in the length slot of hash entries and magic structures,
specifies the structure contains an C<SV*> pointer where a C<char*> pointer
is to be expected. (For information only--not to be used).

=end original

このフラグは、ハッシュエントリーのlength slotや magic structures
で使われ、C<char*> ポインタであることを期待されている C<SV*> ポインタを
含む構造体を指定します(情報のみ -- 使われません)。

=for hackers
Found in file hv.h

=item HeHASH
X<HeHASH>

=begin original

Returns the computed hash stored in the hash entry.

=end original

ハッシュエントリーに格納されている計算済みハッシュを返します。

	U32	HeHASH(HE* he)

=for hackers
Found in file hv.h

=item HeKEY
X<HeKEY>

=begin original

Returns the actual pointer stored in the key slot of the hash entry. The
pointer may be either C<char*> or C<SV*>, depending on the value of
C<HeKLEN()>.  Can be assigned to.  The C<HePV()> or C<HeSVKEY()> macros are
usually preferable for finding the value of a key.

=end original

ハッシュエントリーのキー スロットにあるポインタを返します。
このポインタは C<char*> か C<SV*> のいずれかで、これは C<HeKLEN()> の
値に依存します。
これは代入することができます。
C<HePV()> や C<HeSVKEY()> といったマクロはキーの値を検索するために、
通常望ましいものです。

	void*	HeKEY(HE* he)

=for hackers
Found in file hv.h

=item HeKLEN
X<HeKLEN>

=begin original

If this is negative, and amounts to C<HEf_SVKEY>, it indicates the entry
holds an C<SV*> key.  Otherwise, holds the actual length of the key.  Can
be assigned to. The C<HePV()> macro is usually preferable for finding key
lengths.

=end original

これが負であり、かつ C<HEf_SVKEY> に等しければ、エントリーが C<SV*> キーを
保持していることを示します。
そうでなければ、これはキーの実際の長さを保持しています。
これは代入することができます。
マクロ C<HePV()> はキーの長さを検出するのに、通常望ましいものです。

	STRLEN	HeKLEN(HE* he)

=for hackers
Found in file hv.h

=item HePV
X<HePV>

=begin original

Returns the key slot of the hash entry as a C<char*> value, doing any
necessary dereferencing of possibly C<SV*> keys.  The length of the string
is placed in C<len> (this is a macro, so do I<not> use C<&len>).  If you do
not care about what the length of the key is, you may use the global
variable C<PL_na>, though this is rather less efficient than using a local
variable.  Remember though, that hash keys in perl are free to contain
embedded nulls, so using C<strlen()> or similar is not a good way to find
the length of hash keys. This is very similar to the C<SvPV()> macro
described elsewhere in this document.

=end original

C<char *> としてのハッシュエントリーのキースロットを返し、C<SV*>
キーで必要となるような参照外しなどを行います。
文字列の長さは C<len> に置かれます(これはマクロなので、C<&len> を
使ってはいけません)。
キーの長さがどうなのかを気にしないのであれば、グローバル変数 C<PL_na> を
使うことができますが、これはローカル変数を使うよりも非効率的です。
しかし忘れないで欲しいのは、そういった perl に
おけるハッシュのキーは埋め込まれているナル文字に対して
自由であり、そのため C<strlen()> などを使ってハッシュキーの長さを
調べるのは良い方法ではないということです。
これは他の場所で説明している C<SvPV()> マクロについても同様です。

	char*	HePV(HE* he, STRLEN len)

=for hackers
Found in file hv.h

=item HeSVKEY
X<HeSVKEY>

=begin original

Returns the key as an C<SV*>, or C<NULL> if the hash entry does not
contain an C<SV*> key.

=end original

C<SV*> としてのキー、もしくはハッシュエントリーに
C<SV*> キーがない場合には C<NULL> を返します。

	SV*	HeSVKEY(HE* he)

=for hackers
Found in file hv.h

=item HeSVKEY_force
X<HeSVKEY_force>

=begin original

Returns the key as an C<SV*>.  Will create and return a temporary mortal
C<SV*> if the hash entry contains only a C<char*> key.

=end original

C<SV*> としてのキーを返します。
ハッシュエントリーに C<char*> キーしかない場合には、一時的な揮発性
C<SV*> が生成されて返されます。

	SV*	HeSVKEY_force(HE* he)

=for hackers
Found in file hv.h

=item HeSVKEY_set
X<HeSVKEY_set>

=begin original

Sets the key to a given C<SV*>, taking care to set the appropriate flags to
indicate the presence of an C<SV*> key, and returns the same
C<SV*>.

=end original

与えられた C<SV*> にキーをセットし、C<SV*> キーの存在を表わす適切な
フラグを注意深くセットします。
そして、同じ C<SV*> を返します。

	SV*	HeSVKEY_set(HE* he, SV* sv)

=for hackers
Found in file hv.h

=item HeVAL
X<HeVAL>

=begin original

Returns the value slot (type C<SV*>) stored in the hash entry.

=end original

ハッシュエントリーに格納されている(型 C<SV*> の)値スロットを返します。

	SV*	HeVAL(HE* he)

=for hackers
Found in file hv.h

=item HvNAME
X<HvNAME>

=begin original

Returns the package name of a stash, or NULL if C<stash> isn't a stash.
See C<SvSTASH>, C<CvSTASH>.

=end original

スタッシュのパッケージ名を返します; C<stash> がスタッシュでない場合は
NULL を返します。
C<SvSTASH>, C<CvSTASH> を参照してください。

	char*	HvNAME(HV* stash)

=for hackers
Found in file hv.h

=item hv_assert
X<hv_assert>

=begin original

Check that a hash is in an internally consistent state.

=end original

ハッシュが内部的に一貫した状態であるかを調べます。

	void	hv_assert(HV* tb)

=for hackers
Found in file hv.c

=item hv_clear
X<hv_clear>

=begin original

Clears a hash, making it empty.

=end original

ハッシュをクリアーし、空にします。

	void	hv_clear(HV* tb)

=for hackers
Found in file hv.c

=item hv_clear_placeholders
X<hv_clear_placeholders>

=begin original

Clears any placeholders from a hash.  If a restricted hash has any of its keys
marked as readonly and the key is subsequently deleted, the key is not actually
deleted but is marked by assigning it a value of &PL_sv_placeholder.  This tags
it so it will be ignored by future operations such as iterating over the hash,
but will still allow the hash to have a value reassigned to the key at some
future point.  This function clears any such placeholder keys from the hash.
See Hash::Util::lock_keys() for an example of its use.

=end original

Clears any placeholders from a hash.  If a restricted hash has any of its keys
marked as readonly and the key is subsequently deleted, the key is not actually
deleted but is marked by assigning it a value of &PL_sv_placeholder.  This tags
it so it will be ignored by future operations such as iterating over the hash,
but will still allow the hash to have a value reassigned to the key at some
future point.  This function clears any such placeholder keys from the hash.
See Hash::Util::lock_keys() for an example of its use.
(TBT)

	void	hv_clear_placeholders(HV* hb)

=for hackers
Found in file hv.c

=item hv_delete
X<hv_delete>

=begin original

Deletes a key/value pair in the hash.  The value SV is removed from the
hash and returned to the caller.  The C<klen> is the length of the key.
The C<flags> value will normally be zero; if set to G_DISCARD then NULL
will be returned.

=end original

ハッシュにあるキー/値のペアを削除します。
値 SV はハッシュから取り除かれて、呼び出し元に返されます。
C<klen> はキーの長さです。
C<flags> の値は通常はゼロとなります。
これに G_DISCARD をセットした場合には NULL が返されます。

	SV*	hv_delete(HV* tb, const char* key, I32 klen, I32 flags)

=for hackers
Found in file hv.c

=item hv_delete_ent
X<hv_delete_ent>

=begin original

Deletes a key/value pair in the hash.  The value SV is removed from the
hash and returned to the caller.  The C<flags> value will normally be zero;
if set to G_DISCARD then NULL will be returned.  C<hash> can be a valid
precomputed hash value, or 0 to ask for it to be computed.

=end original

ハッシュにあるキー/値のペアを削除します。
値 SVはハッシュから取り除かれて、呼び出し元に返されます。
C<klen> はキーの長さです。
C<flags> の値は通常はゼロとなります。
これに G_DISCARD をセットした場合には NULL が返されます。
C<hash> はあらかじめ計算されたハッシュ値を置きますが、
計算結果を問い合わせるには 0 とします。

	SV*	hv_delete_ent(HV* tb, SV* key, I32 flags, U32 hash)

=for hackers
Found in file hv.c

=item hv_exists
X<hv_exists>

=begin original

Returns a boolean indicating whether the specified hash key exists.  The
C<klen> is the length of the key.

=end original

指定されたハッシュキーが存在するかどうかを表わすブール値を返します。
C<klen> はキーの長さです。

	bool	hv_exists(HV* tb, const char* key, I32 klen)

=for hackers
Found in file hv.c

=item hv_exists_ent
X<hv_exists_ent>

=begin original

Returns a boolean indicating whether the specified hash key exists. C<hash>
can be a valid precomputed hash value, or 0 to ask for it to be
computed.

=end original

指定されたハッシュキーが存在するかどうかを表わすブール値を返します。
C<hash> はあらかじめ計算されたハッシュ値を置きますが、計算結果を
問い合わせるには 0 とします。

	bool	hv_exists_ent(HV* tb, SV* key, U32 hash)

=for hackers
Found in file hv.c

=item hv_fetch
X<hv_fetch>

=begin original

Returns the SV which corresponds to the specified key in the hash.  The
C<klen> is the length of the key.  If C<lval> is set then the fetch will be
part of a store.  Check that the return value is non-null before
dereferencing it to an C<SV*>.

=end original

指定されたキーに対応する、ハッシュ中の SV を返します。
C<klen> はキーの長さです。
C<lval> がセットされている場合、フェッチがストアの一部分となります。
戻り値 C<SV*> の参照外しをする前に、それがナルでないことを
チェックしてください。

=begin original

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for more
information on how to use this function on tied hashes.

=end original

この関数をどのように tie されたハッシュに使うかの情報は
L<perlguts/Understanding the Magic of Tied Hashes and Arrays> を
参照してください。

	SV**	hv_fetch(HV* tb, const char* key, I32 klen, I32 lval)

=for hackers
Found in file hv.c

=item hv_fetchs
X<hv_fetchs>

=begin original

Like C<hv_fetch>, but takes a literal string instead of a string/length pair.

=end original

C<hv_fetch> と同様ですが、文字列/長さの組ではなく、リテラルな文字列を
取ります。

	SV**	hv_fetchs(HV* tb, const char* key, I32 lval)

=for hackers
Found in file handy.h

=item hv_fetch_ent
X<hv_fetch_ent>

=begin original

Returns the hash entry which corresponds to the specified key in the hash.
C<hash> must be a valid precomputed hash number for the given C<key>, or 0
if you want the function to compute it.  IF C<lval> is set then the fetch
will be part of a store.  Make sure the return value is non-null before
accessing it.  The return value when C<tb> is a tied hash is a pointer to a
static location, so be sure to make a copy of the structure if you need to
store it somewhere.

=end original

指定されたキーに対応する、ハッシュ中のハッシュエントリーを返します。
C<hash> は、C<key> に対する正当な計算済みハッシュ値でなければなりません。
もしくは、この関数にハッシュ値を計算させたいのであればここに 0 を置きます。
C<lval> がセットされていると、フェッチはストアの一部分となります。
C<tb> が tie されているハッシュの場合の戻り値は静的な
位置 (static location)へのポインタです。
したがって、何かを格納する必要があるのなら、その構造体のコピーを
取るようにしてください。

=begin original

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for more
information on how to use this function on tied hashes.

=end original

この関数をどのようにtieされたハッシュに使うかの情報は
L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> を
参照してください。

	HE*	hv_fetch_ent(HV* tb, SV* key, I32 lval, U32 hash)

=for hackers
Found in file hv.c

=item hv_iterinit
X<hv_iterinit>

=begin original

Prepares a starting point to traverse a hash table.  Returns the number of
keys in the hash (i.e. the same as C<HvKEYS(tb)>).  The return value is
currently only meaningful for hashes without tie magic.

=end original

ハッシュテーブルをたどるための開始点を準備します。
ハッシュの中に存在しているキーの数を返します(C<HvKEYS(tb)> と同じです)。
この戻り値は現状では tie magic なしのハッシュに対してのみ意味があります。

=begin original

NOTE: Before version 5.004_65, C<hv_iterinit> used to return the number of
hash buckets that happen to be in use.  If you still need that esoteric
value, you can get it through the macro C<HvFILL(tb)>.

=end original

注意: 5.004_65 より前のバージョンでは、C<hv_iterinit> は
使用中のハッシュバケツの数を返すのに使われていました。
もしあなたがそのような値を必要としているのなら、C<HvFILL(tb)> という
マクロを使って得ることができます。


	I32	hv_iterinit(HV* tb)

=for hackers
Found in file hv.c

=item hv_iterkey
X<hv_iterkey>

=begin original

Returns the key from the current position of the hash iterator.  See
C<hv_iterinit>.

=end original

ハッシュイテレーターの現在位置からキーを返します。
C<hv_iterinit> を参照してください。

	char*	hv_iterkey(HE* entry, I32* retlen)

=for hackers
Found in file hv.c

=item hv_iterkeysv
X<hv_iterkeysv>

=begin original

Returns the key as an C<SV*> from the current position of the hash
iterator.  The return value will always be a mortal copy of the key.  Also
see C<hv_iterinit>.

=end original

ハッシュイテレーターの現在位置から、C<SV*> としてキーを返します。
この戻り値は常にキーの揮発性コピーとなります。
C<hv_iterinit> を参照してください。

	SV*	hv_iterkeysv(HE* entry)

=for hackers
Found in file hv.c

=item hv_iternext
X<hv_iternext>

=begin original

Returns entries from a hash iterator.  See C<hv_iterinit>.

=end original

ハッシュイテレーターからエントリーを返します。
C<hv_iterinit> を参照してください。

=begin original

You may call C<hv_delete> or C<hv_delete_ent> on the hash entry that the
iterator currently points to, without losing your place or invalidating your
iterator.  Note that in this case the current entry is deleted from the hash
with your iterator holding the last reference to it.  Your iterator is flagged
to free the entry on the next call to C<hv_iternext>, so you must not discard
your iterator immediately else the entry will leak - call C<hv_iternext> to
trigger the resource deallocation.

=end original

You may call C<hv_delete> or C<hv_delete_ent> on the hash entry that the
iterator currently points to, without losing your place or invalidating your
iterator.  Note that in this case the current entry is deleted from the hash
with your iterator holding the last reference to it.  Your iterator is flagged
to free the entry on the next call to C<hv_iternext>, so you must not discard
your iterator immediately else the entry will leak - call C<hv_iternext> to
trigger the resource deallocation.
(TBT)

	HE*	hv_iternext(HV* tb)

=for hackers
Found in file hv.c

=item hv_iternextsv
X<hv_iternextsv>

=begin original

Performs an C<hv_iternext>, C<hv_iterkey>, and C<hv_iterval> in one
operation.

=end original

一つの操作で C<hv_iternext>、C<hv_iterkey>、C<hv_iterval> を
呼び出します。

	SV*	hv_iternextsv(HV* hv, char** key, I32* retlen)

=for hackers
Found in file hv.c

=item hv_iternext_flags
X<hv_iternext_flags>

=begin original

Returns entries from a hash iterator.  See C<hv_iterinit> and C<hv_iternext>.
The C<flags> value will normally be zero; if HV_ITERNEXT_WANTPLACEHOLDERS is
set the placeholders keys (for restricted hashes) will be returned in addition
to normal keys. By default placeholders are automatically skipped over.
Currently a placeholder is implemented with a value that is
C<&Perl_sv_placeholder>. Note that the implementation of placeholders and
restricted hashes may change, and the implementation currently is
insufficiently abstracted for any change to be tidy.

=end original

Returns entries from a hash iterator.  See C<hv_iterinit> and C<hv_iternext>.
The C<flags> value will normally be zero; if HV_ITERNEXT_WANTPLACEHOLDERS is
set the placeholders keys (for restricted hashes) will be returned in addition
to normal keys. By default placeholders are automatically skipped over.
Currently a placeholder is implemented with a value that is
C<&Perl_sv_placeholder>. Note that the implementation of placeholders and
restricted hashes may change, and the implementation currently is
insufficiently abstracted for any change to be tidy.
(TBT)

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	HE*	hv_iternext_flags(HV* tb, I32 flags)

=for hackers
Found in file hv.c

=item hv_iterval
X<hv_iterval>

=begin original

Returns the value from the current position of the hash iterator.  See
C<hv_iterkey>.

=end original

ハッシュイテレーターの現在位置から値を返します。
C<hv_iterkey> を参照してください。

	SV*	hv_iterval(HV* tb, HE* entry)

=for hackers
Found in file hv.c

=item hv_magic
X<hv_magic>

=begin original

Adds magic to a hash.  See C<sv_magic>.

=end original

ハッシュに magic を付加します。
C<sv_magic> を参照してください。

	void	hv_magic(HV* hv, GV* gv, int how)

=for hackers
Found in file hv.c

=item hv_scalar
X<hv_scalar>

=begin original

Evaluates the hash in scalar context and returns the result. Handles magic when the hash is tied.

=end original

ハッシュをスカラコンテキストで評価して、結果を返します。
ハッシュが tie された場合は magic を扱います。

	SV*	hv_scalar(HV* hv)

=for hackers
Found in file hv.c

=item hv_store
X<hv_store>

=begin original

Stores an SV in a hash.  The hash key is specified as C<key> and C<klen> is
the length of the key.  The C<hash> parameter is the precomputed hash
value; if it is zero then Perl will compute it.  The return value will be
NULL if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise it can
be dereferenced to get the original C<SV*>.  Note that the caller is
responsible for suitably incrementing the reference count of C<val> before
the call, and decrementing it if the function returned NULL.  Effectively
a successful hv_store takes ownership of one reference to C<val>.  This is
usually what you want; a newly created SV has a reference count of one, so
if all your code does is create SVs then store them in a hash, hv_store
will own the only reference to the new SV, and your code doesn't need to do
anything further to tidy up.  hv_store is not implemented as a call to
hv_store_ent, and does not create a temporary SV for the key, so if your
key data is not already in SV form then use hv_store in preference to
hv_store_ent.

=end original

ハッシュに SV を格納します。
そのハッシュキーは C<key> で指定され、C<klen> はキーの長さです。
C<hash> パラメーターは、あらかじめ計算したハッシュ値です。
Perlにハッシュ値を計算させるにはこれを 0 にします。
戻り値は、操作が失敗したり(tie されているハッシュのように)ハッシュに
実際に値を格納する必要のない場合には NULL になります。
Effectively
a successful hv_store takes ownership of one reference to C<val>.  This is
usually what you want; a newly created SV has a reference count of one, so
if all your code does is create SVs then store them in a hash, hv_store
will own the only reference to the new SV, and your code doesn't need to do
anything further to tidy up.  hv_store is not implemented as a call to
hv_store_ent, and does not create a temporary SV for the key, so if your
key data is not already in SV form then use hv_store in preference to
hv_store_ent.
(TBT)

=begin original

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for more
information on how to use this function on tied hashes.

=end original

この関数を tie されているハッシュに使うやりかたについての詳細は
L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> を
参照してください。

	SV**	hv_store(HV* tb, const char* key, I32 klen, SV* val, U32 hash)

=for hackers
Found in file hv.c

=item hv_stores
X<hv_stores>

=begin original

Like C<hv_store>, but takes a literal string instead of a string/length pair
and omits the hash parameter.

=end original

C<hv_store> と同様ですが、文字列/長さの組ではなく、リテラルな文字列を
取り、ハッシュパラメータを除外します。

	SV**	hv_stores(HV* tb, const char* key, NULLOK SV* val)

=for hackers
Found in file handy.h

=item hv_store_ent
X<hv_store_ent>

=begin original

Stores C<val> in a hash.  The hash key is specified as C<key>.  The C<hash>
parameter is the precomputed hash value; if it is zero then Perl will
compute it.  The return value is the new hash entry so created.  It will be
NULL if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise the
contents of the return value can be accessed using the C<He?> macros
described here.  Note that the caller is responsible for suitably
incrementing the reference count of C<val> before the call, and
decrementing it if the function returned NULL.  Effectively a successful
hv_store_ent takes ownership of one reference to C<val>.  This is
usually what you want; a newly created SV has a reference count of one, so
if all your code does is create SVs then store them in a hash, hv_store
will own the only reference to the new SV, and your code doesn't need to do
anything further to tidy up.  Note that hv_store_ent only reads the C<key>;
unlike C<val> it does not take ownership of it, so maintaining the correct
reference count on C<key> is entirely the caller's responsibility.  hv_store
is not implemented as a call to hv_store_ent, and does not create a temporary
SV for the key, so if your key data is not already in SV form then use
hv_store in preference to hv_store_ent.

=end original

C<val> をハッシュに格納します。
ハッシュキーは C<key> で指定します。
C<hash> パラメーターはあらかじめ計算したハッシュ値です。
Perl にこれを計算させるにはこの値を 0 にします。
戻り値は生成された新しいハッシュエントリーです。
操作が失敗したり、(tie されているハッシュのように)ハッシュに実際に値を
格納する必要のない場合には NULL になります。
そうでない場合には、戻り値の内容に C<He?> マクロを使ってアクセスすることが
可能です。
呼び出し側は、呼び出しの前に C<val> の参照カウントを適切に
インクリメントする責任があり、また、関数が NULL を
返した場合には参照カウントをデクリメントする責任があるということに
注意してください。
Effectively a successful
hv_store_ent takes ownership of one reference to C<val>.  This is
usually what you want; a newly created SV has a reference count of one, so
if all your code does is create SVs then store them in a hash, hv_store
will own the only reference to the new SV, and your code doesn't need to do
anything further to tidy up.  Note that hv_store_ent only reads the C<key>;
unlike C<val> it does not take ownership of it, so maintaining the correct
reference count on C<key> is entirely the caller's responsibility.  hv_store
is not implemented as a call to hv_store_ent, and does not create a temporary
SV for the key, so if your key data is not already in SV form then use
hv_store in preference to hv_store_ent.
(TBT)

=begin original

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for more
information on how to use this function on tied hashes.

=end original

この関数を tie されているハッシュに使うやりかたについての詳細は
L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> を
参照してください。

	HE*	hv_store_ent(HV* tb, SV* key, SV* val, U32 hash)

=for hackers
Found in file hv.c

=item hv_undef
X<hv_undef>

=begin original

Undefines the hash.

=end original

ハッシュを undefine します。

	void	hv_undef(HV* tb)

=for hackers
Found in file hv.c

=item newHV
X<newHV>

=begin original

Creates a new HV.  The reference count is set to 1.

=end original

新たな HV を生成します。
参照カウントは 1 に設定されます。

	HV*	newHV()

=for hackers
Found in file hv.c


=back

=head1 Magical Functions

=over 8

=item mg_clear
X<mg_clear>

=begin original

Clear something magical that the SV represents.  See C<sv_magic>.

=end original

SV が表わしている magical をクリアーします。
C<sv_magic> を参照してください。

	int	mg_clear(SV* sv)

=for hackers
Found in file mg.c

=item mg_copy
X<mg_copy>

=begin original

Copies the magic from one SV to another.  See C<sv_magic>.

=end original

ある SV から別の SV へ magic をコピーします。
C<sv_magic> を参照してください。

	int	mg_copy(SV* sv, SV* nsv, const char* key, I32 klen)

=for hackers
Found in file mg.c

=item mg_find
X<mg_find>

=begin original

Finds the magic pointer for type matching the SV.  See C<sv_magic>.

=end original

type にマッチする SV への magic ポインタを検索します。
C<sv_magic> を参照してください。

	MAGIC*	mg_find(const SV* sv, int type)

=for hackers
Found in file mg.c

=item mg_free
X<mg_free>

=begin original

Free any magic storage used by the SV.  See C<sv_magic>.

=end original

SV が使用しているすべての magic storage を解放します。
C<sv_magic> を参照してください。

	int	mg_free(SV* sv)

=for hackers
Found in file mg.c

=item mg_get
X<mg_get>

=begin original

Do magic after a value is retrieved from the SV.  See C<sv_magic>.

=end original

SV から値を取得した後で magic を行います。
C<sv_magic> を参照してください。

	int	mg_get(SV* sv)

=for hackers
Found in file mg.c

=item mg_length
X<mg_length>

=begin original

Report on the SV's length.  See C<sv_magic>.

=end original

SV の長さを報告します。
C<sv_magic> を参照してください。

	U32	mg_length(SV* sv)

=for hackers
Found in file mg.c

=item mg_magical
X<mg_magical>

=begin original

Turns on the magical status of an SV.  See C<sv_magic>.

=end original

SV の magical status をオンにします。
C<sv_magic> を参照してください。

	void	mg_magical(SV* sv)

=for hackers
Found in file mg.c

=item mg_set
X<mg_set>

=begin original

Do magic after a value is assigned to the SV.  See C<sv_magic>.

=end original

SV に値を代入した後で magic を行います。
C<sv_magic> を参照してください。

	int	mg_set(SV* sv)

=for hackers
Found in file mg.c

=item SvGETMAGIC
X<SvGETMAGIC>

=begin original

Invokes C<mg_get> on an SV if it has 'get' magic.  This macro evaluates its
argument more than once.

=end original

SV が 'get' magic を有している場合には C<mg_get> を起動します。
このマクロはその引数を二回以上評価します。

	void	SvGETMAGIC(SV* sv)

=for hackers
Found in file sv.h

=item SvLOCK
X<SvLOCK>

=begin original

Arranges for a mutual exclusion lock to be obtained on sv if a suitable module
has been loaded.

=end original

Arranges for a mutual exclusion lock to be obtained on sv if a suitable module
has been loaded.
(TBT)

	void	SvLOCK(SV* sv)

=for hackers
Found in file sv.h

=item SvSETMAGIC
X<SvSETMAGIC>

=begin original

Invokes C<mg_set> on an SV if it has 'set' magic.  This macro evaluates its
argument more than once.

=end original

SV が 'set' magic を持っている場合に、その SV に対して C<mg_set> を
起動します。
このマクロは二回以上引数を評価します。

	void	SvSETMAGIC(SV* sv)

=for hackers
Found in file sv.h

=item SvSetMagicSV
X<SvSetMagicSV>

=begin original

Like C<SvSetSV>, but does any set magic required afterwards.

=end original

Like C<SvSetSV>, but does any set magic required afterwards.
(TBT)

	void	SvSetMagicSV(SV* dsb, SV* ssv)

=for hackers
Found in file sv.h

=item SvSetMagicSV_nosteal
X<SvSetMagicSV_nosteal>

=begin original

Like C<SvSetSV_nosteal>, but does any set magic required afterwards.

=end original

Like C<SvSetSV_nosteal>, but does any set magic required afterwards.
(TBT)

	void	SvSetMagicSV_nosteal(SV* dsv, SV* ssv)

=for hackers
Found in file sv.h

=item SvSetSV
X<SvSetSV>

=begin original

Calls C<sv_setsv> if dsv is not the same as ssv.  May evaluate arguments
more than once.

=end original

dsv が ssv と等しくなかったときに C<sv_setsv> を呼び出します。
引数は二回以上評価される可能性があります。

	void	SvSetSV(SV* dsb, SV* ssv)

=for hackers
Found in file sv.h

=item SvSetSV_nosteal
X<SvSetSV_nosteal>

=begin original

Calls a non-destructive version of C<sv_setsv> if dsv is not the same as
ssv. May evaluate arguments more than once.

=end original

dsv と ssv が等しくなかったときに呼び出される、非破壊的バージョンの
C<sv_setsv> を呼び出します。
引数は二回以上評価される可能性があります。

	void	SvSetSV_nosteal(SV* dsv, SV* ssv)

=for hackers
Found in file sv.h

=item SvSHARE
X<SvSHARE>

=begin original

Arranges for sv to be shared between threads if a suitable module
has been loaded.

=end original

Arranges for sv to be shared between threads if a suitable module
has been loaded.
(TBT)

	void	SvSHARE(SV* sv)

=for hackers
Found in file sv.h

=item SvUNLOCK
X<SvUNLOCK>

=begin original

Releases a mutual exclusion lock on sv if a suitable module
has been loaded.

=end original

Releases a mutual exclusion lock on sv if a suitable module
has been loaded.
(TBT)

	void	SvUNLOCK(SV* sv)

=for hackers
Found in file sv.h

=back

=head1 Memory Management

=over 8

=item Copy
X<Copy>

=begin original

The XSUB-writer's interface to the C C<memcpy> function.  The C<src> is the
source, C<dest> is the destination, C<nitems> is the number of items, and C<type> is
the type.  May fail on overlapping copies.  See also C<Move>.

=end original

C の C<memcpy> 関数に対する XSUB 作成者のためのインターフェースです。
C<src> は転送元、C<dest>は転送先、C<nitems> は転送するアイテムの数、
C<type> は転送するアイテムの型です。
領域がオーバーラップしているコピーの場合は失敗します。
C<Move> を参照してください。

	void	Copy(void* src, void* dest, int nitems, type)

=for hackers
Found in file handy.h

=item CopyD
X<CopyD>

=begin original

Like C<Copy> but returns dest. Useful for encouraging compilers to tail-call
optimise.

=end original

C<Copy> と同様ですが、dest を返します。
末尾呼び出し最適化を行うコンパイラで便利です。

	void *	CopyD(void* src, void* dest, int nitems, type)

=for hackers
Found in file handy.h

=item Move
X<Move>

=begin original

The XSUB-writer's interface to the C C<memmove> function.  The C<src> is the
source, C<dest> is the destination, C<nitems> is the number of items, and C<type> is
the type.  Can do overlapping moves.  See also C<Copy>.

=end original

C の C<memmove> 関数に対する XSUB 作成者のためのインターフェースです。
C<src> は転送元で、C<dest> が転送先、C<nitems> がアイテムの数、C<type> が
その型です。
オーバーラップした移動も可能です。
C<Copy> を参照してください。

	void	Move(void* src, void* dest, int nitems, type)

=for hackers
Found in file handy.h

=item MoveD
X<MoveD>

=begin original

Like C<Move> but returns dest. Useful for encouraging compilers to tail-call
optimise.

=end original

C<Move> と同様ですが、dest を返します。
末尾呼び出し最適化を行うコンパイラで便利です。

	void *	MoveD(void* src, void* dest, int nitems, type)

=for hackers
Found in file handy.h

=item Newx
X<Newx>

=begin original

The XSUB-writer's interface to the C C<malloc> function.

=end original

C の C<malloc> 関数に対する XSUB 作成者のためのキャスト付き
インターフェースです。

=begin original

In 5.9.3, Newx() and friends replace the older New() API, and drops
the first parameter, I<x>, a debug aid which allowed callers to identify
themselves.  This aid has been superseded by a new build option,
PERL_MEM_LOG (see L<perlhack/PERL_MEM_LOG>).  The older API is still
there for use in XS modules supporting older perls.

=end original

In 5.9.3, Newx() and friends replace the older New() API, and drops
the first parameter, I<x>, a debug aid which allowed callers to identify
themselves.  This aid has been superseded by a new build option,
PERL_MEM_LOG (see L<perlhack/PERL_MEM_LOG>).  The older API is still
there for use in XS modules supporting older perls.
(TBT)

	void	Newx(void* ptr, int nitems, type)

=for hackers
Found in file handy.h

=item Newxc
X<Newxc>

=begin original

The XSUB-writer's interface to the C C<malloc> function, with
cast.  See also C<Newx>.

=end original

C の C<malloc> 関数に対する XSUB 作成者のためのキャスト付き
インターフェースです。
C<Newx> も参照してください。

	void	Newxc(void* ptr, int nitems, type, cast)

=for hackers
Found in file handy.h

=item Newxz
X<Newxz>

=begin original

The XSUB-writer's interface to the C C<malloc> function.  The allocated
memory is zeroed with C<memzero>.  See also C<Newx>.

=end original

XSUB 作成者のための C<malloc> 関数のインターフェースです。
割り付けられた領域は C<memzero> によってゼロで埋められます。
C<Newx> も参照してください。

	void	Newxz(void* ptr, int nitems, type)

=for hackers
Found in file handy.h

=item Poison
X<Poison>

=begin original

PoisonWith(0xEF) for catching access to freed memory.

=end original

解放されたメモリへのアクセスを捕捉するための PoisonWith(0xEF) です。

	void	Poison(void* dest, int nitems, type)

=for hackers
Found in file handy.h

=item PoisonFree
X<PoisonFree>

=begin original

PoisonWith(0xEF) for catching access to freed memory.

=end original

解放されたメモリへのアクセスを捕捉するための PoisonWith(0xEF) です。

	void	PoisonFree(void* dest, int nitems, type)

=for hackers
Found in file handy.h

=item PoisonNew
X<PoisonNew>

=begin original

PoisonWith(0xAB) for catching access to allocated but uninitialized memory.

=end original

PoisonWith(0xAB) for catching access to allocated but uninitialized memory.
(TBT)

	void	PoisonNew(void* dest, int nitems, type)

=for hackers
Found in file handy.h

=item PoisonWith
X<PoisonWith>

=begin original

Fill up memory with a byte pattern (a byte repeated over and over
again) that hopefully catches attempts to access uninitialized memory.

=end original

Fill up memory with a byte pattern (a byte repeated over and over
again) that hopefully catches attempts to access uninitialized memory.
(TBT)

	void	PoisonWith(void* dest, int nitems, type, U8 byte)

=for hackers
Found in file handy.h

=item Renew
X<Renew>

=begin original

The XSUB-writer's interface to the C C<realloc> function.

=end original

C の C<realloc> 関数に対する XSUB 作成者のためのインターフェースです。

	void	Renew(void* ptr, int nitems, type)

=for hackers
Found in file handy.h

=item Renewc
X<Renewc>

=begin original

The XSUB-writer's interface to the C C<realloc> function, with
cast.

=end original

キャスト付きの、C の C<realloc> 関数に対する XSUB 作成者のための
インターフェースです。

	void	Renewc(void* ptr, int nitems, type, cast)

=for hackers
Found in file handy.h

=item Safefree
X<Safefree>

=begin original

The XSUB-writer's interface to the C C<free> function.

=end original

C の C<free> 関数に対する XSUB 作成者のためのインターフェースです。

	void	Safefree(void* ptr)

=for hackers
Found in file handy.h

=item savepv
X<savepv>

=begin original

Perl's version of C<strdup()>. Returns a pointer to a newly allocated
string which is a duplicate of C<pv>. The size of the string is
determined by C<strlen()>. The memory allocated for the new string can
be freed with the C<Safefree()> function.

=end original

Perl's version of C<strdup()>. Returns a pointer to a newly allocated
string which is a duplicate of C<pv>. The size of the string is
determined by C<strlen()>. The memory allocated for the new string can
be freed with the C<Safefree()> function.
(TBT)

	char*	savepv(const char* pv)

=for hackers
Found in file util.c

=item savepvn
X<savepvn>

=begin original

Perl's version of what C<strndup()> would be if it existed. Returns a
pointer to a newly allocated string which is a duplicate of the first
C<len> bytes from C<pv>, plus a trailing NUL byte. The memory allocated for
the new string can be freed with the C<Safefree()> function.

=end original

Perl's version of what C<strndup()> would be if it existed. Returns a
pointer to a newly allocated string which is a duplicate of the first
C<len> bytes from C<pv>, plus a trailing NUL byte. The memory allocated for
the new string can be freed with the C<Safefree()> function.
(TBT)

	char*	savepvn(const char* pv, I32 len)

=for hackers
Found in file util.c

=item savepvs
X<savepvs>

=begin original

Like C<savepvn>, but takes a literal string instead of a string/length pair.

=end original

C<savepvn> と同様ですが、文字列/長さの組ではなく、リテラルな文字列を
取ります。

	char*	savepvs(const char* s)

=for hackers
Found in file handy.h

=item savesharedpv
X<savesharedpv>

=begin original

A version of C<savepv()> which allocates the duplicate string in memory
which is shared between threads.

=end original

A version of C<savepv()> which allocates the duplicate string in memory
which is shared between threads.
(TBT)

	char*	savesharedpv(const char* pv)

=for hackers
Found in file util.c

=item savesharedpvn
X<savesharedpvn>

=begin original

A version of C<savepvn()> which allocates the duplicate string in memory
which is shared between threads. (With the specific difference that a NULL
pointer is not acceptable)

=end original

A version of C<savepvn()> which allocates the duplicate string in memory
which is shared between threads. (With the specific difference that a NULL
pointer is not acceptable)
(TBT)

	char*	savesharedpvn(const char *const pv, const STRLEN len)

=for hackers
Found in file util.c

=item savesvpv
X<savesvpv>

=begin original

A version of C<savepv()>/C<savepvn()> which gets the string to duplicate from
the passed in SV using C<SvPV()>

=end original

A version of C<savepv()>/C<savepvn()> which gets the string to duplicate from
the passed in SV using C<SvPV()>
(TBT)

	char*	savesvpv(SV* sv)

=for hackers
Found in file util.c

=item StructCopy
X<StructCopy>

=begin original

This is an architecture-independent macro to copy one structure to another.

=end original

これはある構造体をもう一つにコピーするためのアーキテクチャに依存しない
マクロです。

	void	StructCopy(type src, type dest, type)

=for hackers
Found in file handy.h

=item Zero
X<Zero>

=begin original

The XSUB-writer's interface to the C C<memzero> function.  The C<dest> is the
destination, C<nitems> is the number of items, and C<type> is the type.

=end original

C の C<memzero> 関数に対する XSUB 作成者のためのインターフェースです。
C<dest> は対象となる場所、C<nitems> はアイテムの数、C<type> は
アイテムの型です。

	void	Zero(void* dest, int nitems, type)

=for hackers
Found in file handy.h

=item ZeroD
X<ZeroD>

=begin original

Like C<Zero> but returns dest. Useful for encouraging compilers to tail-call
optimise.

=end original

C<Zero> と同様ですが、dest を返します。
末尾呼び出し最適化を行うコンパイラで便利です。

	void *	ZeroD(void* dest, int nitems, type)

=for hackers
Found in file handy.h

=back

=head1 Miscellaneous Functions

=over 8

=item fbm_compile
X<fbm_compile>

=begin original

Analyses the string in order to make fast searches on it using fbm_instr()
-- the Boyer-Moore algorithm.

=end original

Boyer-Moore アルゴリズムを使った fbm_instr() による高速検索が
できるようにするために文字列を解析します。

	void	fbm_compile(SV* sv, U32 flags)

=for hackers
Found in file util.c

=item fbm_instr
X<fbm_instr>

=begin original

Returns the location of the SV in the string delimited by C<str> and
C<strend>.  It returns C<NULL> if the string can't be found.  The C<sv>
does not have to be fbm_compiled, but the search will not be as fast
then.

=end original

C<str> と C<strend> によって区切られる文字列中にある SV の位置を返します。
文字列が見つからなかった場合には C<NULL> を返します。
C<sv> は fbm_compile されている必要はありませんが、その場合にはある場合に
比べると検索速度は遅くなります。

	char*	fbm_instr(unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags)

=for hackers
Found in file util.c

=item form
X<form>

=begin original

Takes a sprintf-style format pattern and conventional
(non-SV) arguments and returns the formatted string.

=end original

Takes a sprintf-style format pattern and conventional
(non-SV) arguments and returns the formatted string.
(TBT)

    (char *) Perl_form(pTHX_ const char* pat, ...)

=begin original

can be used any place a string (char *) is required:

=end original

は文字列 (char *) が必要なあらゆる場所で使えます:

    char * s = Perl_form("%d.%d",major,minor);

=begin original

Uses a single private buffer so if you want to format several strings you
must explicitly copy the earlier strings away (and free the copies when you
are done).

=end original

Uses a single private buffer so if you want to format several strings you
must explicitly copy the earlier strings away (and free the copies when you
are done).
(TBT)

	char*	form(const char* pat, ...)

=for hackers
Found in file util.c

=item getcwd_sv
X<getcwd_sv>

=begin original

Fill the sv with current working directory

=end original

sv をカレントワーキングディレクトリで埋めます

	int	getcwd_sv(SV* sv)

=for hackers
Found in file util.c

=item my_snprintf
X<my_snprintf>

=begin original

The C library C<snprintf> functionality, if available and
standards-compliant (uses C<vsnprintf>, actually).  However, if the
C<vsnprintf> is not available, will unfortunately use the unsafe
C<vsprintf> which can overrun the buffer (there is an overrun check,
but that may be too late).  Consider using C<sv_vcatpvf> instead, or
getting C<vsnprintf>.

=end original

The C library C<snprintf> functionality, if available and
standards-compliant (uses C<vsnprintf>, actually).  However, if the
C<vsnprintf> is not available, will unfortunately use the unsafe
C<vsprintf> which can overrun the buffer (there is an overrun check,
but that may be too late).  Consider using C<sv_vcatpvf> instead, or
getting C<vsnprintf>.
(TBT)

	int	my_snprintf(char *buffer, const Size_t len, const char *format, ...)

=for hackers
Found in file util.c

=item my_sprintf
X<my_sprintf>

=begin original

The C library C<sprintf>, wrapped if necessary, to ensure that it will return
the length of the string written to the buffer. Only rare pre-ANSI systems
need the wrapper function - usually this is a direct call to C<sprintf>.

=end original

The C library C<sprintf>, wrapped if necessary, to ensure that it will return
the length of the string written to the buffer. Only rare pre-ANSI systems
need the wrapper function - usually this is a direct call to C<sprintf>.
(TBT)

	int	my_sprintf(char *buffer, const char *pat, ...)

=for hackers
Found in file util.c

=item my_vsnprintf
X<my_vsnprintf>

=begin original

The C library C<vsnprintf> if available and standards-compliant.
However, if if the C<vsnprintf> is not available, will unfortunately
use the unsafe C<vsprintf> which can overrun the buffer (there is an
overrun check, but that may be too late).  Consider using
C<sv_vcatpvf> instead, or getting C<vsnprintf>.

=end original

The C library C<vsnprintf> if available and standards-compliant.
However, if if the C<vsnprintf> is not available, will unfortunately
use the unsafe C<vsprintf> which can overrun the buffer (there is an
overrun check, but that may be too late).  Consider using
C<sv_vcatpvf> instead, or getting C<vsnprintf>.
(TBT)

	int	my_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap)

=for hackers
Found in file util.c

=item new_version
X<new_version>

=begin original

Returns a new version object based on the passed in SV:

=end original

SV で渡されたものを基として新しいバージョンオブジェクトを返します:

    SV *sv = new_version(SV *ver);

=begin original

Does not alter the passed in ver SV.  See "upg_version" if you
want to upgrade the SV.

=end original

Does not alter the passed in ver SV.  See "upg_version" if you
want to upgrade the SV.
(TBT)

	SV*	new_version(SV *ver)

=for hackers
Found in file util.c

=item scan_version
X<scan_version>

=begin original

Returns a pointer to the next character after the parsed
version string, as well as upgrading the passed in SV to
an RV.

=end original

Returns a pointer to the next character after the parsed
version string, as well as upgrading the passed in SV to
an RV.
(TBT)

=begin original

Function must be called with an already existing SV like

=end original

関数は以下のように、既に存在する SV と共に呼び出されなければなりません

    sv = newSV(0);
    s = scan_version(s, SV *sv, bool qv);

=begin original

Performs some preprocessing to the string to ensure that
it has the correct characteristics of a version.  Flags the
object if it contains an underscore (which denotes this
is an alpha version).  The boolean qv denotes that the version
should be interpreted as if it had multiple decimals, even if
it doesn't.

=end original

Performs some preprocessing to the string to ensure that
it has the correct characteristics of a version.  Flags the
object if it contains an underscore (which denotes this
is an alpha version).  The boolean qv denotes that the version
should be interpreted as if it had multiple decimals, even if
it doesn't.
(TBT)

	const char*	scan_version(const char *vstr, SV *sv, bool qv)

=for hackers
Found in file util.c

=item strEQ
X<strEQ>

=begin original

Test two strings to see if they are equal.  Returns true or false.

=end original

二つの文字列が等しいかどうかを検査します。
真か偽を返します。

	bool	strEQ(char* s1, char* s2)

=for hackers
Found in file handy.h

=item strGE
X<strGE>

=begin original

Test two strings to see if the first, C<s1>, is greater than or equal to
the second, C<s2>.  Returns true or false.

=end original

二つの文字列を、C<s1> が C<s2> よりも大きい、もしくは両者が等しいかどうかの
検査をします。
真か偽かの結果を返します。

	bool	strGE(char* s1, char* s2)

=for hackers
Found in file handy.h

=item strGT
X<strGT>

=begin original

Test two strings to see if the first, C<s1>, is greater than the second,
C<s2>.  Returns true or false.

=end original

二つの文字列を、C<s1> が C<s2> よりも大きいかどうかの検査をします。
真か偽かの結果を返します。

	bool	strGT(char* s1, char* s2)

=for hackers
Found in file handy.h

=item strLE
X<strLE>

=begin original

Test two strings to see if the first, C<s1>, is less than or equal to the
second, C<s2>.  Returns true or false.

=end original

二つの文字列を、C<s1> が C<s2> よりも小さい、もしくは両者が等しいか
どうかの検査をします。
真か偽かの結果を返します。

	bool	strLE(char* s1, char* s2)

=for hackers
Found in file handy.h

=item strLT
X<strLT>

=begin original

Test two strings to see if the first, C<s1>, is less than the second,
C<s2>.  Returns true or false.

=end original

二つの文字列を、C<s1> が C<s2> よりも小さいかどうかの検査をします。
真か偽かの結果を返します。

	bool	strLT(char* s1, char* s2)

=for hackers
Found in file handy.h

=item strNE
X<strNE>

=begin original

Test two strings to see if they are different.  Returns true or
false.

=end original

二つの文字列が異なるかどうかを検査します。
真か偽を返します。

	bool	strNE(char* s1, char* s2)

=for hackers
Found in file handy.h

=item strnEQ
X<strnEQ>

=begin original

Test two strings to see if they are equal.  The C<len> parameter indicates
the number of bytes to compare.  Returns true or false. (A wrapper for
C<strncmp>).

=end original

二つの文字列が等しいかどうかを検査します。
パラメーター C<len> は、比較を行うバイト数を指定します。
真か偽を返します。
(C<strncmp> へのラッパーです)

	bool	strnEQ(char* s1, char* s2, STRLEN len)

=for hackers
Found in file handy.h

=item strnNE
X<strnNE>

=begin original

Test two strings to see if they are different.  The C<len> parameter
indicates the number of bytes to compare.  Returns true or false. (A
wrapper for C<strncmp>).

=end original

二つの文字列が異なるものかどうかを検査します。
パラメーター C<len> は、比較を行うバイト数を指定します。
真か偽を返します。
(C<strncmp> へのラッパーです)

	bool	strnNE(char* s1, char* s2, STRLEN len)

=for hackers
Found in file handy.h

=item sv_destroyable
X<sv_destroyable>

=begin original

Dummy routine which reports that object can be destroyed when there is no
sharing module present.  It ignores its single SV argument, and returns
'true'.  Exists to avoid test for a NULL function pointer and because it
could potentially warn under some level of strict-ness.

=end original

Dummy routine which reports that object can be destroyed when there is no sharing module present.
It ignores its single SV argument, and returns
'true'.
NULL 関数をテストして、あるレベルでの strict での潜在的な警告を
回避するために存在します。
(TBT)

	bool	sv_destroyable(SV *sv)

=for hackers
Found in file util.c

=item sv_nosharing
X<sv_nosharing>

=begin original

Dummy routine which "shares" an SV when there is no sharing module present.
Or "locks" it. Or "unlocks" it. In other words, ignores its single SV argument.
Exists to avoid test for a NULL function pointer and because it could
potentially warn under some level of strict-ness.

=end original

share モジュールがないときに SV を「share する」ダミールーチンです。
あるいは「ロックします」。
あるいは「アンロックします」。
言い換えると、単一の SV 引数を無視します。
NULL 関数をテストして、あるレベルでの strict での潜在的な警告を
回避するために存在します。

	void	sv_nosharing(SV *sv)

=for hackers
Found in file util.c

=item upg_version
X<upg_version>

=begin original

In-place upgrade of the supplied SV to a version object.

=end original

In-place upgrade of the supplied SV to a version object.
(TBT)

    SV *sv = upg_version(SV *sv, bool qv);

=begin original

Returns a pointer to the upgraded SV.  Set the boolean qv if you want
to force this SV to be interpreted as an "extended" version.

=end original

Returns a pointer to the upgraded SV.  Set the boolean qv if you want
to force this SV to be interpreted as an "extended" version.
(TBT)

	SV*	upg_version(SV *ver, bool qv)

=for hackers
Found in file util.c

=item vcmp
X<vcmp>

=begin original

Version object aware cmp.  Both operands must already have been 
converted into version objects.

=end original

Version object aware cmp.  Both operands must already have been 
converted into version objects.
(TBT)

	int	vcmp(SV *lvs, SV *rvs)

=for hackers
Found in file util.c

=item vnormal
X<vnormal>

=begin original

Accepts a version object and returns the normalized string
representation.  Call like:

=end original

Accepts a version object and returns the normalized string
representation.  Call like:
(TBT)

    sv = vnormal(rv);

=begin original

NOTE: you can pass either the object directly or the SV
contained within the RV.

=end original

注意: オブジェクトを直接と、RV に含まれている SV のどちらでも渡せます。

	SV*	vnormal(SV *vs)

=for hackers
Found in file util.c

=item vnumify
X<vnumify>

=begin original

Accepts a version object and returns the normalized floating
point representation.  Call like:

=end original

Accepts a version object and returns the normalized floating
point representation.  Call like:
(TBT)

    sv = vnumify(rv);

=begin original

NOTE: you can pass either the object directly or the SV
contained within the RV.

=end original

注意: オブジェクトを直接と、RV に含まれている SV のどちらでも渡せます。

	SV*	vnumify(SV *vs)

=for hackers
Found in file util.c

=item vstringify
X<vstringify>

=begin original

In order to maintain maximum compatibility with earlier versions
of Perl, this function will return either the floating point
notation or the multiple dotted notation, depending on whether
the original version contained 1 or more dots, respectively

=end original

In order to maintain maximum compatibility with earlier versions
of Perl, this function will return either the floating point
notation or the multiple dotted notation, depending on whether
the original version contained 1 or more dots, respectively
(TBT)

	SV*	vstringify(SV *vs)

=for hackers
Found in file util.c

=item vverify
X<vverify>

=begin original

Validates that the SV contains a valid version object.

=end original

SV が正当なバージョンオブジェクトを含んでいるかを検証します。

    bool vverify(SV *vobj);

=begin original

Note that it only confirms the bare minimum structure (so as not to get
confused by derived classes which may contain additional hash entries):

=end original

Note that it only confirms the bare minimum structure (so as not to get
confused by derived classes which may contain additional hash entries):
(TBT)

	bool	vverify(SV *vs)

=for hackers
Found in file util.c


=back

=head1 MRO Functions

=over 8

=item mro_get_linear_isa
X<mro_get_linear_isa>

=begin original

Returns either C<mro_get_linear_isa_c3> or
C<mro_get_linear_isa_dfs> for the given stash,
dependant upon which MRO is in effect
for that stash.  The return value is a
read-only AV*.

=end original

Returns either C<mro_get_linear_isa_c3> or
C<mro_get_linear_isa_dfs> for the given stash,
dependant upon which MRO is in effect
for that stash.  The return value is a
read-only AV*.
(TBT)

=begin original

You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).

=end original

You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).
(TBT)

	AV*	mro_get_linear_isa(HV* stash)

=for hackers
Found in file mro.c

=item mro_method_changed_in
X<mro_method_changed_in>

=begin original

Invalidates method caching on any child classes
of the given stash, so that they might notice
the changes in this one.

=end original

Invalidates method caching on any child classes
of the given stash, so that they might notice
the changes in this one.
(TBT)

=begin original

Ideally, all instances of C<PL_sub_generation++> in
perl source outside of C<mro.c> should be
replaced by calls to this.

=end original

Ideally, all instances of C<PL_sub_generation++> in
perl source outside of C<mro.c> should be
replaced by calls to this.
(TBT)

=begin original

Perl automatically handles most of the common
ways a method might be redefined.  However, there
are a few ways you could change a method in a stash
without the cache code noticing, in which case you
need to call this method afterwards:

=end original

Perl automatically handles most of the common
ways a method might be redefined.  However, there
are a few ways you could change a method in a stash
without the cache code noticing, in which case you
need to call this method afterwards:
(TBT)

=begin original

1) Directly manipulating the stash HV entries from
XS code.

=end original

1) Directly manipulating the stash HV entries from
XS code.
(TBT)

=begin original

2) Assigning a reference to a readonly scalar
constant into a stash entry in order to create
a constant subroutine (like constant.pm
does).

=end original

2) Assigning a reference to a readonly scalar
constant into a stash entry in order to create
a constant subroutine (like constant.pm
does).
(TBT)

=begin original

This same method is available from pure perl
via, C<mro::method_changed_in(classname)>.

=end original

This same method is available from pure perl
via, C<mro::method_changed_in(classname)>.
(TBT)

	void	mro_method_changed_in(HV* stash)

=for hackers
Found in file mro.c

=back

=head1 Multicall Functions

=over 8

=item dMULTICALL
X<dMULTICALL>

=begin original

Declare local variables for a multicall. See L<perlcall/Lightweight Callbacks>.

=end original

多重呼び出しのための局所変数を宣言します。
L<perlcall/Lightweight Callbacks> を参照してください。

		dMULTICALL;

=for hackers
Found in file cop.h

=item MULTICALL
X<MULTICALL>

=begin original

Make a lightweight callback. See L<perlcall/Lightweight Callbacks>.

=end original

軽量コールバックを作ります。
L<perlcall/Lightweight Callbacks> を参照してください。

		MULTICALL;

=for hackers
Found in file cop.h

=item POP_MULTICALL
X<POP_MULTICALL>

=begin original

Closing bracket for a lightweight callback.
See L<perlcall/Lightweight Callbacks>.

=end original

軽量コールバックのための大かっこを閉じます。
L<perlcall/Lightweight Callbacks> を参照してください。

		POP_MULTICALL;

=for hackers
Found in file cop.h

=item PUSH_MULTICALL
X<PUSH_MULTICALL>

=begin original

Opening bracket for a lightweight callback.
See L<perlcall/Lightweight Callbacks>.

=end original

軽量コールバックのための大かっこを開きます。
L<perlcall/Lightweight Callbacks> を参照してください。

		PUSH_MULTICALL;

=for hackers
Found in file cop.h

=back

=head1 Numeric functions

=over 8

=item grok_bin
X<grok_bin>

=begin original

converts a string representing a binary number to numeric form.

=end original

2 進数を表現した文字列を数値形式に変換します。

=begin original

On entry I<start> and I<*len> give the string to scan, I<*flags> gives
conversion flags, and I<result> should be NULL or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an
invalid character will also trigger a warning.
On return I<*len> is set to the length of the scanned string,
and I<*flags> gives output flags.

=end original

On entry I<start> and I<*len> give the string to scan, I<*flags> gives
conversion flags, and I<result> should be NULL or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an
invalid character will also trigger a warning.
On return I<*len> is set to the length of the scanned string,
and I<*flags> gives output flags.
(TBT)

=begin original

If the value is <= C<UV_MAX> it is returned as a UV, the output flags are clear,
and nothing is written to I<*result>. If the value is > UV_MAX C<grok_bin>
returns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes the value to I<*result> (or the value is discarded if I<result>
is NULL).

=end original

If the value is <= C<UV_MAX> it is returned as a UV, the output flags are clear,
and nothing is written to I<*result>. If the value is > UV_MAX C<grok_bin>
returns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes the value to I<*result> (or the value is discarded if I<result>
is NULL).
(TBT)

=begin original

The binary number may optionally be prefixed with "0b" or "b" unless
C<PERL_SCAN_DISALLOW_PREFIX> is set in I<*flags> on entry. If
C<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the binary
number may use '_' characters to separate digits.

=end original

The binary number may optionally be prefixed with "0b" or "b" unless
C<PERL_SCAN_DISALLOW_PREFIX> is set in I<*flags> on entry. If
C<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the binary
number may use '_' characters to separate digits.
(TBT)

	UV	grok_bin(const char* start, STRLEN* len_p, I32* flags, NV *result)

=for hackers
Found in file numeric.c

=item grok_hex
X<grok_hex>

=begin original

converts a string representing a hex number to numeric form.

=end original

16 進数を表現した文字列を数値形式に変換します。

=begin original

On entry I<start> and I<*len> give the string to scan, I<*flags> gives
conversion flags, and I<result> should be NULL or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an
invalid character will also trigger a warning.
On return I<*len> is set to the length of the scanned string,
and I<*flags> gives output flags.

=end original

On entry I<start> and I<*len> give the string to scan, I<*flags> gives
conversion flags, and I<result> should be NULL or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an
invalid character will also trigger a warning.
On return I<*len> is set to the length of the scanned string,
and I<*flags> gives output flags.
(TBT)

=begin original

If the value is <= UV_MAX it is returned as a UV, the output flags are clear,
and nothing is written to I<*result>. If the value is > UV_MAX C<grok_hex>
returns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes the value to I<*result> (or the value is discarded if I<result>
is NULL).

=end original

If the value is <= UV_MAX it is returned as a UV, the output flags are clear,
and nothing is written to I<*result>. If the value is > UV_MAX C<grok_hex>
returns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes the value to I<*result> (or the value is discarded if I<result>
is NULL).
(TBT)

=begin original

The hex number may optionally be prefixed with "0x" or "x" unless
C<PERL_SCAN_DISALLOW_PREFIX> is set in I<*flags> on entry. If
C<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the hex
number may use '_' characters to separate digits.

=end original

The hex number may optionally be prefixed with "0x" or "x" unless
C<PERL_SCAN_DISALLOW_PREFIX> is set in I<*flags> on entry. If
C<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the hex
number may use '_' characters to separate digits.
(TBT)

	UV	grok_hex(const char* start, STRLEN* len_p, I32* flags, NV *result)

=for hackers
Found in file numeric.c

=item grok_number
X<grok_number>

=begin original

Recognise (or not) a number.  The type of the number is returned
(0 if unrecognised), otherwise it is a bit-ORed combination of
IS_NUMBER_IN_UV, IS_NUMBER_GREATER_THAN_UV_MAX, IS_NUMBER_NOT_INT,
IS_NUMBER_NEG, IS_NUMBER_INFINITY, IS_NUMBER_NAN (defined in perl.h).

=end original

Recognise (or not) a number.  The type of the number is returned
(0 if unrecognised), otherwise it is a bit-ORed combination of
IS_NUMBER_IN_UV, IS_NUMBER_GREATER_THAN_UV_MAX, IS_NUMBER_NOT_INT,
IS_NUMBER_NEG, IS_NUMBER_INFINITY, IS_NUMBER_NAN (defined in perl.h).
(TBT)

=begin original

If the value of the number can fit an in UV, it is returned in the *valuep
IS_NUMBER_IN_UV will be set to indicate that *valuep is valid, IS_NUMBER_IN_UV
will never be set unless *valuep is valid, but *valuep may have been assigned
to during processing even though IS_NUMBER_IN_UV is not set on return.
If valuep is NULL, IS_NUMBER_IN_UV will be set for the same cases as when
valuep is non-NULL, but no actual assignment (or SEGV) will occur.

=end original

If the value of the number can fit an in UV, it is returned in the *valuep
IS_NUMBER_IN_UV will be set to indicate that *valuep is valid, IS_NUMBER_IN_UV
will never be set unless *valuep is valid, but *valuep may have been assigned
to during processing even though IS_NUMBER_IN_UV is not set on return.
If valuep is NULL, IS_NUMBER_IN_UV will be set for the same cases as when
valuep is non-NULL, but no actual assignment (or SEGV) will occur.
(TBT)

=begin original

IS_NUMBER_NOT_INT will be set with IS_NUMBER_IN_UV if trailing decimals were
seen (in which case *valuep gives the true value truncated to an integer), and
IS_NUMBER_NEG if the number is negative (in which case *valuep holds the
absolute value).  IS_NUMBER_IN_UV is not set if e notation was used or the
number is larger than a UV.

=end original

IS_NUMBER_NOT_INT will be set with IS_NUMBER_IN_UV if trailing decimals were
seen (in which case *valuep gives the true value truncated to an integer), and
IS_NUMBER_NEG if the number is negative (in which case *valuep holds the
absolute value).  IS_NUMBER_IN_UV is not set if e notation was used or the
number is larger than a UV.
(TBT)

	int	grok_number(const char *pv, STRLEN len, UV *valuep)

=for hackers
Found in file numeric.c

=item grok_numeric_radix
X<grok_numeric_radix>

=begin original

Scan and skip for a numeric decimal separator (radix).

=end original

小数点をスキャンして、読み飛ばします。

	bool	grok_numeric_radix(const char **sp, const char *send)

=for hackers
Found in file numeric.c

=item grok_oct
X<grok_oct>

=begin original

converts a string representing an octal number to numeric form.

=end original

8 進数を表現した文字列を数値形式に変換します。

=begin original

On entry I<start> and I<*len> give the string to scan, I<*flags> gives
conversion flags, and I<result> should be NULL or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an
invalid character will also trigger a warning.
On return I<*len> is set to the length of the scanned string,
and I<*flags> gives output flags.

=end original

On entry I<start> and I<*len> give the string to scan, I<*flags> gives
conversion flags, and I<result> should be NULL or a pointer to an NV.
The scan stops at the end of the string, or the first invalid character.
Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an
invalid character will also trigger a warning.
On return I<*len> is set to the length of the scanned string,
and I<*flags> gives output flags.
(TBT)

=begin original

If the value is <= UV_MAX it is returned as a UV, the output flags are clear,
and nothing is written to I<*result>. If the value is > UV_MAX C<grok_oct>
returns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes the value to I<*result> (or the value is discarded if I<result>
is NULL).

=end original

If the value is <= UV_MAX it is returned as a UV, the output flags are clear,
and nothing is written to I<*result>. If the value is > UV_MAX C<grok_oct>
returns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes the value to I<*result> (or the value is discarded if I<result>
is NULL).
(TBT)

=begin original

If C<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the octal
number may use '_' characters to separate digits.

=end original

If C<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the octal
number may use '_' characters to separate digits.
(TBT)

	UV	grok_oct(const char* start, STRLEN* len_p, I32* flags, NV *result)

=for hackers
Found in file numeric.c

=item Perl_signbit
X<Perl_signbit>

=begin original

Return a non-zero integer if the sign bit on an NV is set, and 0 if
it is not.  

=end original

もし NV の符号ビットがセットされていれば非 0 の整数を、そうでなければ
0 を返します。

=begin original

If Configure detects this system has a signbit() that will work with
our NVs, then we just use it via the #define in perl.h.  Otherwise,
fall back on this implementation.  As a first pass, this gets everything
right except -0.0.  Alas, catching -0.0 is the main use for this function,
so this is not too helpful yet.  Still, at least we have the scaffolding
in place to support other systems, should that prove useful.

=end original

If Configure detects this system has a signbit() that will work with
our NVs, then we just use it via the #define in perl.h.  Otherwise,
fall back on this implementation.  As a first pass, this gets everything
right except -0.0.  Alas, catching -0.0 is the main use for this function,
so this is not too helpful yet.  Still, at least we have the scaffolding
in place to support other systems, should that prove useful.
(TBT)

=begin original

Configure notes:  This function is called 'Perl_signbit' instead of a
plain 'signbit' because it is easy to imagine a system having a signbit()
function or macro that doesn't happen to work with our particular choice
of NVs.  We shouldn't just re-#define signbit as Perl_signbit and expect
the standard system headers to be happy.  Also, this is a no-context
function (no pTHX_) because Perl_signbit() is usually re-#defined in
perl.h as a simple macro call to the system's signbit().
Users should just always call Perl_signbit().

=end original

Configure notes:  This function is called 'Perl_signbit' instead of a
plain 'signbit' because it is easy to imagine a system having a signbit()
function or macro that doesn't happen to work with our particular choice
of NVs.  We shouldn't just re-#define signbit as Perl_signbit and expect
the standard system headers to be happy.  Also, this is a no-context
function (no pTHX_) because Perl_signbit() is usually re-#defined in
perl.h as a simple macro call to the system's signbit().
Users should just always call Perl_signbit().
(TBT)

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	int	Perl_signbit(NV f)

=for hackers
Found in file numeric.c

=item scan_bin
X<scan_bin>

=begin original

For backwards compatibility. Use C<grok_bin> instead.

=end original

後方互換性のために、代わりに C<grok_bin> を使ってください。

	NV	scan_bin(const char* start, STRLEN len, STRLEN* retlen)

=for hackers
Found in file numeric.c

=item scan_hex
X<scan_hex>

=begin original

For backwards compatibility. Use C<grok_hex> instead.

=end original

後方互換性のために、代わりに C<grok_hex> を使ってください。

	NV	scan_hex(const char* start, STRLEN len, STRLEN* retlen)

=for hackers
Found in file numeric.c

=item scan_oct
X<scan_oct>

=begin original

For backwards compatibility. Use C<grok_oct> instead.

=end original

後方互換性のために、代わりに C<grok_oct> を使ってください。

	NV	scan_oct(const char* start, STRLEN len, STRLEN* retlen)

=for hackers
Found in file numeric.c


=back

=head1 Optree Manipulation Functions

=over 8

=item cv_const_sv
X<cv_const_sv>

=begin original

If C<cv> is a constant sub eligible for inlining. returns the constant
value returned by the sub.  Otherwise, returns NULL.

=end original

If C<cv> is a constant sub eligible for inlining. returns the constant
value returned by the sub.  Otherwise, returns NULL.
(TBT)

=begin original

Constant subs can be created with C<newCONSTSUB> or as described in
L<perlsub/"Constant Functions">.

=end original

Constant subs can be created with C<newCONSTSUB> or as described in
L<perlsub/"Constant Functions">.
(TBT)

	SV*	cv_const_sv(CV* cv)

=for hackers
Found in file op.c

=item newCONSTSUB
X<newCONSTSUB>

=begin original

Creates a constant sub equivalent to Perl C<sub FOO () { 123 }> which is
eligible for inlining at compile-time.

=end original

Perl での C<sub FOO () { 123 }> と等価な定数サブルーチンを生成します。

	CV*	newCONSTSUB(HV* stash, const char* name, SV* sv)

=for hackers
Found in file op.c

=item newXS
X<newXS>

=begin original

Used by C<xsubpp> to hook up XSUBs as Perl subs.  I<filename> needs to be
static storage, as it is used directly as CvFILE(), without a copy being made.

=end original

Perl サブルーチンのように XSUB をフックするために C<xsubpp> が使います。
I<filename> は静的なストレージである必要があります;
なぜならこれはコピーされることなく直接 CvFILE() で使われるからです。

=for hackers
Found in file op.c

=back

=head1 Pad Data Structures

=over 8

=item pad_sv
X<pad_sv>

=begin original

Get the value at offset po in the current pad.
Use macro PAD_SV instead of calling this function directly.

=end original

Get the value at offset po in the current pad.
Use macro PAD_SV instead of calling this function directly.
(TBT)

	SV*	pad_sv(PADOFFSET po)

=for hackers
Found in file pad.c

=back

=head1 Per-Interpreter Variables

=over 8

=item PL_modglobal
X<PL_modglobal>

=begin original

C<PL_modglobal> is a general purpose, interpreter global HV for use by
extensions that need to keep information on a per-interpreter basis.
In a pinch, it can also be used as a symbol table for extensions
to share data among each other.  It is a good idea to use keys
prefixed by the package name of the extension that owns the data.

=end original

C<PL_modglobal> は、汎用の、インタプリタグローバルのHVで、
インタプリタ毎の情報を保持するような
エクステンションによって使われるものです。
場合によっては、データの共有をおこなうために
エクステンションのシンボルテーブルとして使うことも可能です。
エクステンションのパッケージ名を、エクステンション固有のデータの
名前のプリフィックスとして使うのは良い考えです。

	HV*	PL_modglobal

=for hackers
Found in file intrpvar.h

=item PL_na
X<PL_na>

=begin original

A convenience variable which is typically used with C<SvPV> when one
doesn't care about the length of the string.  It is usually more efficient
to either declare a local variable and use that instead or to use the
C<SvPV_nolen> macro.

=end original

文字列の長さについて考慮しないような場合の C<SvPV> と共に使われるような
変数です。
通常はローカル変数を宣言してそれを使うか、
C<SvPV_nolen> マクロを使った方が効率が良いです。

	STRLEN	PL_na

=for hackers
Found in file intrpvar.h

=item PL_sv_no
X<PL_sv_no>

=begin original

This is the C<false> SV.  See C<PL_sv_yes>.  Always refer to this as
C<&PL_sv_no>.

=end original

これは C<false> の SV です。
C<PL_sv_yes> を参照してください。
常に C<&PL_sv_no> として参照してください。

	SV	PL_sv_no

=for hackers
Found in file intrpvar.h

=item PL_sv_undef
X<PL_sv_undef>

=begin original

This is the C<undef> SV.  Always refer to this as C<&PL_sv_undef>.

=end original

これは C<undef> SV です。
常に C<&PL_sv_undef> として参照してください。

	SV	PL_sv_undef

=for hackers
Found in file intrpvar.h

=item PL_sv_yes
X<PL_sv_yes>

=begin original

This is the C<true> SV.  See C<PL_sv_no>.  Always refer to this as
C<&PL_sv_yes>.

=end original

これは C<true> SV です。
C<PL_sv_no> を参照してくさい。
これは常に C<&PL_sv_yes> として参照してください。
 

	SV	PL_sv_yes

=for hackers
Found in file intrpvar.h


=back

=head1 REGEXP Functions

=over 8

=item SvRX
X<SvRX>

=begin original

Convenience macro to get the REGEXP from a SV. This is approximately
equivalent to the following snippet:

=end original

Convenience macro to get the REGEXP from a SV. This is approximately
equivalent to the following snippet:
(TBT)

    if (SvMAGICAL(sv))
        mg_get(sv);
    if (SvROK(sv) &&
        (tmpsv = (SV*)SvRV(sv)) &&
        SvTYPE(tmpsv) == SVt_PVMG &&
        (tmpmg = mg_find(tmpsv, PERL_MAGIC_qr)))
    {
        return (REGEXP *)tmpmg->mg_obj;
    }

=begin original

NULL will be returned if a REGEXP* is not found.

=end original

もし REGEXP* が見つからなければ NULL を返します。

	REGEXP *	SvRX(SV *sv)

=for hackers
Found in file regexp.h

=item SvRXOK
X<SvRXOK>

=begin original

Returns a boolean indicating whether the SV contains qr magic
(PERL_MAGIC_qr).

=end original

Returns a boolean indicating whether the SV contains qr magic
(PERL_MAGIC_qr).
(TBT)

=begin original

If you want to do something with the REGEXP* later use SvRX instead
and check for NULL.

=end original

If you want to do something with the REGEXP* later use SvRX instead
and check for NULL.
(TBT)

	bool	SvRXOK(SV* sv)

=for hackers
Found in file regexp.h

=back

=head1 Simple Exception Handling Macros

=over 8

=item dXCPT
X<dXCPT>

=begin original

Set up necessary local variables for exception handling.
See L<perlguts/"Exception Handling">.

=end original

Set up necessary local variables for exception handling.
See L<perlguts/"Exception Handling">.
(TBT)

		dXCPT;

=for hackers
Found in file XSUB.h

=item XCPT_CATCH
X<XCPT_CATCH>

=begin original

Introduces a catch block.  See L<perlguts/"Exception Handling">.

=end original

catch ブロックを導入します。
L<perlguts/"Exception Handling"> を参照してください。

=for hackers
Found in file XSUB.h

=item XCPT_RETHROW
X<XCPT_RETHROW>

=begin original

Rethrows a previously caught exception.  See L<perlguts/"Exception Handling">.

=end original

以前に捕捉した例外を再 throw します。
L<perlguts/"Exception Handling"> を参照してください。

		XCPT_RETHROW;

=for hackers
Found in file XSUB.h

=item XCPT_TRY_END
X<XCPT_TRY_END>

=begin original

Ends a try block.  See L<perlguts/"Exception Handling">.

=end original

try ブロックを終了します。
L<perlguts/"Exception Handling"> を参照してください。

=for hackers
Found in file XSUB.h

=item XCPT_TRY_START
X<XCPT_TRY_START>

=begin original

Starts a try block.  See L<perlguts/"Exception Handling">.

=end original

try ブロックを開始します。
L<perlguts/"Exception Handling"> を参照してください。

=for hackers
Found in file XSUB.h

=back

=head1 Stack Manipulation Macros

=over 8

=item dMARK
X<dMARK>

=begin original

Declare a stack marker variable, C<mark>, for the XSUB.  See C<MARK> and
C<dORIGMARK>.

=end original

スタックマーカー変数 C<mark> を XSUB のために宣言します。
C<MARK> と C<dORIGMARK> を参照してください。

		dMARK;

=for hackers
Found in file pp.h

=item dORIGMARK
X<dORIGMARK>

=begin original

Saves the original stack mark for the XSUB.  See C<ORIGMARK>.

=end original

XSUB のためのオリジナルのスタックマークを保存します。
C<ORIGMARK> を参照してください。

		dORIGMARK;

=for hackers
Found in file pp.h

=item dSP
X<dSP>

=begin original

Declares a local copy of perl's stack pointer for the XSUB, available via
the C<SP> macro.  See C<SP>.

=end original

XSUB のためのスタックポインタのローカルなコピーを宣言します。
このコピーにはマクロ C<SP> を使ってアクセス可能です。
C<SP> を参照してください。

		dSP;

=for hackers
Found in file pp.h

=item EXTEND
X<EXTEND>

=begin original

Used to extend the argument stack for an XSUB's return values. Once
used, guarantees that there is room for at least C<nitems> to be pushed
onto the stack.

=end original

XSUB の戻り値のために引数スタックを拡張するのに使われます。
Once
used, guarantees that there is room for at least C<nitems> to be pushed
onto the stack.
(TBT)

	void	EXTEND(SP, int nitems)

=for hackers
Found in file pp.h

=item MARK
X<MARK>

=begin original

Stack marker variable for the XSUB.  See C<dMARK>.

=end original

XSUB に対するスタックマーカーの変数です。
C<dMARK> を参照してください。

=for hackers
Found in file pp.h

=item mPUSHi
X<mPUSHi>

=begin original

Push an integer onto the stack.  The stack must have room for this element.
Handles 'set' magic.  Does not use C<TARG>.  See also C<PUSHi>, C<mXPUSHi>
and C<XPUSHi>.

=end original

Push an integer onto the stack.  The stack must have room for this element.
'set' magic をハンドルします。
Does not use C<TARG>.  See also C<PUSHi>, C<mXPUSHi>
and C<XPUSHi>.
(TBT)

	void	mPUSHi(IV iv)

=for hackers
Found in file pp.h

=item mPUSHn
X<mPUSHn>

=begin original

Push a double onto the stack.  The stack must have room for this element.
Handles 'set' magic.  Does not use C<TARG>.  See also C<PUSHn>, C<mXPUSHn>
and C<XPUSHn>.

=end original

Push a double onto the stack.  The stack must have room for this element.
'set' magic をハンドルします。
Does not use C<TARG>.  See also C<PUSHn>, C<mXPUSHn>
and C<XPUSHn>.
(TBT)

	void	mPUSHn(NV nv)

=for hackers
Found in file pp.h

=item mPUSHp
X<mPUSHp>

=begin original

Push a string onto the stack.  The stack must have room for this element.
The C<len> indicates the length of the string.  Handles 'set' magic.  Does
not use C<TARG>.  See also C<PUSHp>, C<mXPUSHp> and C<XPUSHp>.

=end original

Push a string onto the stack.  The stack must have room for this element.
The C<len> indicates the length of the string.
'set' magic をハンドルします。
Does
not use C<TARG>.  See also C<PUSHp>, C<mXPUSHp> and C<XPUSHp>.
(TBT)

	void	mPUSHp(char* str, STRLEN len)

=for hackers
Found in file pp.h

=item mPUSHu
X<mPUSHu>

=begin original

Push an unsigned integer onto the stack.  The stack must have room for this
element.  Handles 'set' magic.  Does not use C<TARG>.  See also C<PUSHu>,
C<mXPUSHu> and C<XPUSHu>.

=end original

Push an unsigned integer onto the stack.
The stack must have room for this element.
'set' magic をハンドルします。
Does not use C<TARG>.  See also C<PUSHu>,
C<mXPUSHu> and C<XPUSHu>.
(TBT)

	void	mPUSHu(UV uv)

=for hackers
Found in file pp.h

=item mXPUSHi
X<mXPUSHi>

=begin original

Push an integer onto the stack, extending the stack if necessary.  Handles
'set' magic.  Does not use C<TARG>.  See also C<XPUSHi>, C<mPUSHi> and
C<PUSHi>.

=end original

Push an integer onto the stack, extending the stack if necessary.  Handles
'set' magic.  Does not use C<TARG>.  See also C<XPUSHi>, C<mPUSHi> and
C<PUSHi>.
(TBT)

	void	mXPUSHi(IV iv)

=for hackers
Found in file pp.h

=item mXPUSHn
X<mXPUSHn>

=begin original

Push a double onto the stack, extending the stack if necessary.  Handles
'set' magic.  Does not use C<TARG>.  See also C<XPUSHn>, C<mPUSHn> and
C<PUSHn>.

=end original

Push a double onto the stack, extending the stack if necessary.  Handles
'set' magic.  Does not use C<TARG>.  See also C<XPUSHn>, C<mPUSHn> and
C<PUSHn>.
(TBT)

	void	mXPUSHn(NV nv)

=for hackers
Found in file pp.h

=item mXPUSHp
X<mXPUSHp>

=begin original

Push a string onto the stack, extending the stack if necessary.  The C<len>
indicates the length of the string.  Handles 'set' magic.  Does not use
C<TARG>.  See also C<XPUSHp>, C<mPUSHp> and C<PUSHp>.

=end original

Push a string onto the stack, extending the stack if necessary.  The C<len>
indicates the length of the string.
'set' magic をハンドルします。
Does not use
C<TARG>.  See also C<XPUSHp>, C<mPUSHp> and C<PUSHp>.
(TBT)

	void	mXPUSHp(char* str, STRLEN len)

=for hackers
Found in file pp.h

=item mXPUSHu
X<mXPUSHu>

=begin original

Push an unsigned integer onto the stack, extending the stack if necessary.
Handles 'set' magic.  Does not use C<TARG>.  See also C<XPUSHu>, C<mPUSHu>
and C<PUSHu>.

=end original

Push an unsigned integer onto the stack, extending the stack if necessary.
'set' magic をハンドルします。
Does not use C<TARG>.  See also C<XPUSHu>, C<mPUSHu>
and C<PUSHu>.
(TBT)

	void	mXPUSHu(UV uv)

=for hackers
Found in file pp.h

=item ORIGMARK
X<ORIGMAR K>

=begin original

The original stack mark for the XSUB.  See C<dORIGMARK>.

=end original

XSUB のためのオリジナルスタックマークです。
C<dORIGMARK> を参照してください。

=for hackers
Found in file pp.h

=item POPi
X<POPi>

=begin original

Pops an integer off the stack.

=end original

スタックから整数をポップします。

	IV	POPi

=for hackers
Found in file pp.h

=item POPl
X<POPl>

=begin original

Pops a long off the stack.

=end original

スタックから long をポップします。

	long	POPl

=for hackers
Found in file pp.h

=item POPn
X<POPn>

=begin original

Pops a double off the stack.

=end original

スタックから倍精度実数をポップします。

	NV	POPn

=for hackers
Found in file pp.h

=item POPp
X<POPp>

=begin original

Pops a string off the stack. Deprecated. New code should use POPpx.

=end original

スタックから文字列をポップします。
非推奨です。
新しいコードは POPpx を使うべきです。

	char*	POPp

=for hackers
Found in file pp.h

=item POPpbytex
X<POPpbytex>

=begin original

Pops a string off the stack which must consist of bytes i.e. characters < 256.

=end original

バイト列で構成されていなければならない(つまり文字 < 256 な)文字列を
スタックからポップします。

	char*	POPpbytex

=for hackers
Found in file pp.h

=item POPpx
X<POPpx>

=begin original

Pops a string off the stack.

=end original

スタックから文字列をポップします。

	char*	POPpx

=for hackers
Found in file pp.h

=item POPs
X<POPs>

=begin original

Pops an SV off the stack.

=end original

スタックから SV をポップします。

	SV*	POPs

=for hackers
Found in file pp.h

=item PUSHi
X<PUSHi>

=begin original

Push an integer onto the stack.  The stack must have room for this element.
Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to 
return lists from XSUB's - see C<mPUSHi> instead.  See also C<XPUSHi> and
C<mXPUSHi>.

=end original

整数をスタックへプッシュします。
スタックは、プッシュする要素を収めるのに十分な大きさを
持っていなければなりません。
'set' magic をハンドルします。
Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to 
return lists from XSUB's - see C<mPUSHi> instead.
C<XPUSHi> と C<mXPUSHi> も参照してください。
(TBT)

	void	PUSHi(IV iv)

=for hackers
Found in file pp.h

=item PUSHMARK
X<PUSHMARK>

=begin original

Opening bracket for arguments on a callback.  See C<PUTBACK> and
L<perlcall>.

=end original

コールバックにある引数のためのブラケットを開きます。
C<PUTBACK> と L<perlcall> を参照してください。

	void	PUSHMARK(SP)

=for hackers
Found in file pp.h

=item PUSHmortal
X<PUSHmortal>

=begin original

Push a new mortal SV onto the stack.  The stack must have room for this
element.  Does not handle 'set' magic.  Does not use C<TARG>.  See also
C<PUSHs>, C<XPUSHmortal> and C<XPUSHs>.

=end original

新しい mortal SV をスタックへプッシュします。
The stack must have room for this
element.  Does not handle 'set' magic.  Does not use C<TARG>.  See also
C<PUSHs>, C<XPUSHmortal> and C<XPUSHs>.
(TBT)

	void	PUSHmortal()

=for hackers
Found in file pp.h

=item PUSHn
X<PUSHn>

=begin original

Push a double onto the stack.  The stack must have room for this element.
Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to
return lists from XSUB's - see C<mPUSHn> instead.  See also C<XPUSHn> and
C<mXPUSHn>.

=end original

倍精度実数をスタックへプッシュします。
スタックは、プッシュする要素を収めるのに十分な大きさを
持っていなければなりません。
'set' magic をハンドルします。
Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to
return lists from XSUB's - see C<mPUSHn> instead.
C<XPUSHn> と C<mXPUSHn> も参照してください。

	void	PUSHn(NV nv)

=for hackers
Found in file pp.h

=item PUSHp
X<PUSHp>

=begin original

Push a string onto the stack.  The stack must have room for this element.
The C<len> indicates the length of the string.  Handles 'set' magic.  Uses
C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to declare it.  Do not
call multiple C<TARG>-oriented macros to return lists from XSUB's - see
C<mPUSHp> instead.  See also C<XPUSHp> and C<mXPUSHp>.

=end original

文字列をスタックへとプッシュします。
スタックは、プッシュする要素を収めるのに十分な大きさを
持っていなければなりません。
C<len> は文字列の長さを表わします。
'set' magicをハンドルします。
Uses
C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to declare it.  Do not
call multiple C<TARG>-oriented macros to return lists from XSUB's - see
C<mPUSHp> instead.
C<XPUSHp> と C<mXPUSHp> も参照してください。

	void	PUSHp(char* str, STRLEN len)

=for hackers
Found in file pp.h

=item PUSHs
X<PUSHs>

=begin original

Push an SV onto the stack.  The stack must have room for this element.
Does not handle 'set' magic.  Does not use C<TARG>.  See also C<PUSHmortal>,
C<XPUSHs> and C<XPUSHmortal>.

=end original

SV をスタックへプッシュします。
スタックは、プッシュする要素を収めるのに十分な大きさを
持っていなければなりません。
'set' magic をハンドルしません。
C<TARG> を使いません。
C<PUSHmortal>, C<XPUSHs>, C<XPUSHmortal> も参照してください。

	void	PUSHs(SV* sv)

=for hackers
Found in file pp.h

=item PUSHu
X<PUSHu>

=begin original

Push an unsigned integer onto the stack.  The stack must have room for this
element.  Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG>
should be called to declare it.  Do not call multiple C<TARG>-oriented
macros to return lists from XSUB's - see C<mPUSHu> instead.  See also
C<XPUSHu> and C<mXPUSHu>.

=end original

スタックに符号なし整数をプッシュします。
スタックにはこの要素を収めるだけの空きがなければなりません。
'set' magic をハンドルします。
Uses C<TARG>, so C<dTARGET> or C<dXSTARG>
should be called to declare it.  Do not call multiple C<TARG>-oriented
macros to return lists from XSUB's - see C<mPUSHu> instead.  See also
C<XPUSHu> and C<mXPUSHu>.
(TBT)

	void	PUSHu(UV uv)

=for hackers
Found in file pp.h

=item PUTBACK
X<PUTBACK>

=begin original

Closing bracket for XSUB arguments.  This is usually handled by C<xsubpp>.
See C<PUSHMARK> and L<perlcall> for other uses.

=end original

XSUB 引数のためのブラケットを閉じます。
これは通常、C<xsubpp> によって扱われます。
他の使い方については C<PUSHMARK>と L<perlcall> を参照してください。

		PUTBACK;

=for hackers
Found in file pp.h

=item SP
X<SP>

=begin original

Stack pointer.  This is usually handled by C<xsubpp>.  See C<dSP> and
C<SPAGAIN>.

=end original

スタックポインタです。
これは通常、C<xsubpp> によって扱われます。
C<dSP> と C<SPAGAIN> を参照してください。

=for hackers
Found in file pp.h

=item SPAGAIN
X<SPAGAIN>

=begin original

Refetch the stack pointer.  Used after a callback.  See L<perlcall>.

=end original

スタックポインタの再フェッチします。
コールバックの後で使われます。
C<perlcall> を参照してください。

		SPAGAIN;

=for hackers
Found in file pp.h

=item XPUSHi
X<XPUSHi>

=begin original

Push an integer onto the stack, extending the stack if necessary.  Handles
'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to
declare it.  Do not call multiple C<TARG>-oriented macros to return lists
from XSUB's - see C<mXPUSHi> instead.  See also C<PUSHi> and C<mPUSHi>.

=end original

整数値をスタックにプッシュし、必要があればスタックの拡張を
行います。
C<PUSHi> を参照。
'set' magic をハンドルします。
Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to
declare it.  Do not call multiple C<TARG>-oriented macros to return lists
from XSUB's - see C<mXPUSHi> instead.  See also C<PUSHi> and C<mPUSHi>.
(TBT)

	void	XPUSHi(IV iv)

=for hackers
Found in file pp.h

=item XPUSHmortal
X<XPUSHmortal>

=begin original

Push a new mortal SV onto the stack, extending the stack if necessary.  Does
not handle 'set' magic.  Does not use C<TARG>.  See also C<XPUSHs>,
C<PUSHmortal> and C<PUSHs>.

=end original

Push a new mortal SV onto the stack, extending the stack if necessary.  Does
not handle 'set' magic.  Does not use C<TARG>.  See also C<XPUSHs>,
C<PUSHmortal> and C<PUSHs>.
(TBT)

	void	XPUSHmortal()

=for hackers
Found in file pp.h

=item XPUSHn
X<XPUSHn>

=begin original

Push a double onto the stack, extending the stack if necessary.  Handles
'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to
declare it.  Do not call multiple C<TARG>-oriented macros to return lists
from XSUB's - see C<mXPUSHn> instead.  See also C<PUSHn> and C<mPUSHn>.

=end original

倍精度数値をスタックにプッシュし、必要があればスタックの拡張を
行います。
'set' magic をハンドルします。
Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to
declare it.  Do not call multiple C<TARG>-oriented macros to return lists
from XSUB's - see C<mXPUSHn> instead.  See also C<PUSHn> and C<mPUSHn>.
(TBT)

	void	XPUSHn(NV nv)

=for hackers
Found in file pp.h

=item XPUSHp
X<XPUSHp>

=begin original

Push a string onto the stack, extending the stack if necessary.  The C<len>
indicates the length of the string.  Handles 'set' magic.  Uses C<TARG>, so
C<dTARGET> or C<dXSTARG> should be called to declare it.  Do not call
multiple C<TARG>-oriented macros to return lists from XSUB's - see
C<mXPUSHp> instead.  See also C<PUSHp> and C<mPUSHp>.

=end original

文字列をスタックにプッシュし、必要があればスタックの拡張を行います。
C<len> はプッシュする文字列の長さを示します。
'set' magic をハンドルします。
Uses C<TARG>, so
C<dTARGET> or C<dXSTARG> should be called to declare it.  Do not call
multiple C<TARG>-oriented macros to return lists from XSUB's - see
C<mXPUSHp> instead.  See also C<PUSHp> and C<mPUSHp>.
(TBT)

	void	XPUSHp(char* str, STRLEN len)

=for hackers
Found in file pp.h

=item XPUSHs
X<XPUSHs>

=begin original

Push an SV onto the stack, extending the stack if necessary.  Does not
handle 'set' magic.  Does not use C<TARG>.  See also C<XPUSHmortal>,
C<PUSHs> and C<PUSHmortal>.

=end original

SV をスタックにプッシュし、必要があればスタックを拡張します。
'set' magic をハンドルしません。
Does not use C<TARG>.  See also C<XPUSHmortal>,
C<PUSHs> and C<PUSHmortal>.
(TBT)

	void	XPUSHs(SV* sv)

=for hackers
Found in file pp.h

=item XPUSHu
X<XPUSHu>

=begin original

Push an unsigned integer onto the stack, extending the stack if necessary.
Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to
return lists from XSUB's - see C<mXPUSHu> instead.  See also C<PUSHu> and
C<mPUSHu>.

=end original

スタックに符号なし整数をプッシュします。
必要があればスタックを拡張します。
'set' magic をハンドルします。
Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to
return lists from XSUB's - see C<mXPUSHu> instead.  See also C<PUSHu> and
C<mPUSHu>.
(TBT)

	void	XPUSHu(UV uv)

=for hackers
Found in file pp.h

=item XSRETURN
X<XSRETURN>

=begin original

Return from XSUB, indicating number of items on the stack.  This is usually
handled by C<xsubpp>.

=end original

XSUB から戻され、スタックにあるアイテムの数を示します。
これは通常 C<xsubpp> によって扱われます。

	void	XSRETURN(int nitems)

=for hackers
Found in file XSUB.h

=item XSRETURN_EMPTY
X<XSRETURN_EMPTY>

=begin original

Return an empty list from an XSUB immediately.

=end original

XSUB から即座に空リストを返します。

		XSRETURN_EMPTY;

=for hackers
Found in file XSUB.h

=item XSRETURN_IV
X<XSRETURN_IV>

=begin original

Return an integer from an XSUB immediately.  Uses C<XST_mIV>.

=end original

XSUB から即座に整数値を返します。
C<XST_mIV> を使います。

	void	XSRETURN_IV(IV iv)

=for hackers
Found in file XSUB.h

=item XSRETURN_NO
X<XSRETURN_NO>

=begin original

Return C<&PL_sv_no> from an XSUB immediately.  Uses C<XST_mNO>.

=end original

XSUB から即座に C<&PL_sv_no> を返します。
C<XST_mNO> を使います。

		XSRETURN_NO;

=for hackers
Found in file XSUB.h

=item XSRETURN_NV
X<XSRETURN_NV>

=begin original

Return a double from an XSUB immediately.  Uses C<XST_mNV>.

=end original

XSUB から即座に倍精度数値を返します。
C<XST_mNV> を使います。

	void	XSRETURN_NV(NV nv)

=for hackers
Found in file XSUB.h

=item XSRETURN_PV
X<XSRETURN_PV>

=begin original

Return a copy of a string from an XSUB immediately.  Uses C<XST_mPV>.

=end original

XSUB から即座に文字列のコピーを返します。
C<XST_mPV> を使います。

	void	XSRETURN_PV(char* str)

=for hackers
Found in file XSUB.h

=item XSRETURN_UNDEF
X<XSRETURN_UNDEF>

=begin original

Return C<&PL_sv_undef> from an XSUB immediately.  Uses C<XST_mUNDEF>.

=end original

XSUB から即座に C<&PL_sv_undef> を返します。
C<XST_mUNDEF> を使います。

		XSRETURN_UNDEF;

=for hackers
Found in file XSUB.h

=item XSRETURN_UV
X<XSRETURN_UV>

=begin original

Return an integer from an XSUB immediately.  Uses C<XST_mUV>.

=end original

XSUB から即座に整数を返します。
C<XST_mUV> を使います。

	void	XSRETURN_UV(IV uv)

=for hackers
Found in file XSUB.h

=item XSRETURN_YES
X<XSRETURN_YES>

=begin original

Return C<&PL_sv_yes> from an XSUB immediately.  Uses C<XST_mYES>.

=end original

XSUB から即座に C<&PL_sv_yes> を返します。
C<XST_mYES> を使います。

		XSRETURN_YES;

=for hackers
Found in file XSUB.h

=item XST_mIV
X<XST_mIV>

=begin original

Place an integer into the specified position C<pos> on the stack.  The
value is stored in a new mortal SV.

=end original

整数値をスタックの C<pos> で指定される場所に置きます。
その値は新しい揮発性 SV (mortal SV) に格納されます。

	void	XST_mIV(int pos, IV iv)

=for hackers
Found in file XSUB.h

=item XST_mNO
X<XST_mNO>

=begin original

Place C<&PL_sv_no> into the specified position C<pos> on the
stack.

=end original

C<&PL_sv_no> をスタックの C<pos> で指定される場所に置きます。

	void	XST_mNO(int pos)

=for hackers
Found in file XSUB.h

=item XST_mNV
X<XST_mNV>

=begin original

Place a double into the specified position C<pos> on the stack.  The value
is stored in a new mortal SV.

=end original

倍精度数値をスタックの C<pos> で指定される場所に置きます。
その値は新しい揮発性 SV (mortal SV) に格納されます。

	void	XST_mNV(int pos, NV nv)

=for hackers
Found in file XSUB.h

=item XST_mPV
X<XST_mPV>

=begin original

Place a copy of a string into the specified position C<pos> on the stack. 
The value is stored in a new mortal SV.

=end original

文字列のコピーをスタックの C<pos> で指定される場所に置きます。
その値は新しい揮発性 SV (mortal SV) に格納されます。

	void	XST_mPV(int pos, char* str)

=for hackers
Found in file XSUB.h

=item XST_mUNDEF
X<XST_mUNDEF>

=begin original

Place C<&PL_sv_undef> into the specified position C<pos> on the
stack.

=end original

C<&PL_sv_undef> をスタックの C<pos> で指定される場所に置きます。

	void	XST_mUNDEF(int pos)

=for hackers
Found in file XSUB.h

=item XST_mYES
X<XST_mYES>

=begin original

Place C<&PL_sv_yes> into the specified position C<pos> on the
stack.

=end original

C<&PL_sv_yes> をスタックの C<pos> で指定される場所に置きます。

	void	XST_mYES(int pos)

=for hackers
Found in file XSUB.h


=back

=head1 SV Flags

=over 8

=item svtype
X<svtype>

=begin original

An enum of flags for Perl types.  These are found in the file B<sv.h>
in the C<svtype> enum.  Test these flags with the C<SvTYPE> macro.

=end original

Perl の型のためのフラグの列挙で、B<sv.h> というファイル中の
C<svtype> という列挙にあります。
これらのフラグは、C<SvTYPE> というマクロを使って検査を行います。

=for hackers
Found in file sv.h

=item SVt_IV
X<SVt_IV>

=begin original

Integer type flag for scalars.  See C<svtype>.

=end original

スカラに対する整数型。
C<svtype> を参照のこと。

=for hackers
Found in file sv.h

=item SVt_NV
X<SVt_NV>

=begin original

Double type flag for scalars.  See C<svtype>.

=end original

スカラに対する倍精度の型フラグ。
C<svtype> を参照のこと。

=for hackers
Found in file sv.h

=item SVt_PV
X<SVt_PV>

=begin original

Pointer type flag for scalars.  See C<svtype>.

=end original

スカラに対するポインタ型。
C<svtype> を参照のこと。

=for hackers
Found in file sv.h

=item SVt_PVAV
X<SVt_PVAV>

=begin original

Type flag for arrays.  See C<svtype>.

=end original

配列に対する型フラグ。
C<svtype> を参照のこと。

=for hackers
Found in file sv.h

=item SVt_PVCV
X<SVt_PVCV>

=begin original

Type flag for code refs.  See C<svtype>.

=end original

コードリファレンスのための型フラグ。
C<svtype> を参照のこと。

=for hackers
Found in file sv.h

=item SVt_PVHV
X<SVt_PVHV>

=begin original

Type flag for hashes.  See C<svtype>.

=end original

ハッシュに対する型フラグ。
C<svtype> を参照のこと。

=for hackers
Found in file sv.h

=item SVt_PVMG
X<SVt_PVMG>

=begin original

Type flag for blessed scalars.  See C<svtype>.

=end original

blessされたスカラに対する型フラグ。
C<svtype> を参照のこと。

=for hackers
Found in file sv.h

=back

=head1 SV Manipulation Functions

=over 8

=item get_sv
X<get_sv>

=begin original

Returns the SV of the specified Perl scalar.  If C<create> is set and the
Perl variable does not exist then it will be created.  If C<create> is not
set and the variable does not exist then NULL is returned.

=end original

指定された Perl スカラの SV を返します。
C<create> がセットされていて、指定された変数が存在していなければ
SV が生成されます。
C<create> がセットされておらず、かつ、指定された変数がなかった場合には
NULL が返されます。

=begin original

NOTE: the perl_ form of this function is deprecated.

=end original

注意: この関数の perl_ の形は非推奨です。

	SV*	get_sv(const char* name, I32 create)

=for hackers
Found in file perl.c

=item newRV_inc
X<newRV_inc>

=begin original

Creates an RV wrapper for an SV.  The reference count for the original SV is
incremented.

=end original

SV に対する RV ラッパーを生成します。
元の SV の参照カウントはインクリメントされます。

	SV*	newRV_inc(SV* sv)

=for hackers
Found in file sv.h

=item SvCUR
X<SvCUR>

=begin original

Returns the length of the string which is in the SV.  See C<SvLEN>.

=end original

SV にある文字列の長さを返します。
C<SvLEN> を参照してください。

	STRLEN	SvCUR(SV* sv)

=for hackers
Found in file sv.h

=item SvCUR_set
X<SvCUR_set>

=begin original

Set the current length of the string which is in the SV.  See C<SvCUR>
and C<SvIV_set>.

=end original

SV にある文字列の現在の長さを設定します。
C<SvCUR> を参照してください。

	void	SvCUR_set(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvEND
X<SvEND>

=begin original

Returns a pointer to the last character in the string which is in the SV.
See C<SvCUR>.  Access the character as *(SvEND(sv)).

=end original

SV にある文字列の終端のキャラクタへのポインタを返します。
C<SvCUR> を参照してください。
文字へは *(SvEND(sv)) としてアクセスします。

	char*	SvEND(SV* sv)

=for hackers
Found in file sv.h

=item SvGAMAGIC
X<SvGAMAGIC>

=begin original

Returns true if the SV has get magic or overloading. If either is true then
the scalar is active data, and has the potential to return a new value every
time it is accessed. Hence you must be careful to only read it once per user
logical operation and work with that returned value. If neither is true then
the scalar's value cannot change unless written to.

=end original

Returns true if the SV has get magic or overloading. If either is true then
the scalar is active data, and has the potential to return a new value every
time it is accessed. Hence you must be careful to only read it once per user
logical operation and work with that returned value. If neither is true then
the scalar's value cannot change unless written to.
(TBT)

	char*	SvGAMAGIC(SV* sv)

=for hackers
Found in file sv.h

=item SvGROW
X<SvGROW>

=begin original

Expands the character buffer in the SV so that it has room for the
indicated number of bytes (remember to reserve space for an extra trailing
NUL character).  Calls C<sv_grow> to perform the expansion if necessary.
Returns a pointer to the character buffer.

=end original

指定されたバイト数だけの空間があるように
SVにある文字バッファを拡張します
(予約分の空間は NUL 文字で埋められることを思い出してください)。
必要であれば、拡張のために C<sv_grow> を呼び出します。
文字バッファへのポインタを返します。

	char *	SvGROW(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvIOK
X<SvIOK>

=begin original

Returns a U32 value indicating whether the SV contains an integer.

=end original

SV が整数を含んでいるかどうかを表わす U32 値を返します。

	U32	SvIOK(SV* sv)

=for hackers
Found in file sv.h

=item SvIOKp
X<SvIOKp>

=begin original

Returns a U32 value indicating whether the SV contains an integer.  Checks
the B<private> setting.  Use C<SvIOK>.

=end original

SV が整数を含んでいるかどうかを表わす U32 値を返します。
C<SvIOK> を使い、B<private> な設定を検査します。

	U32	SvIOKp(SV* sv)

=for hackers
Found in file sv.h

=item SvIOK_notUV
X<SvIOK_notUV>

=begin original

Returns a boolean indicating whether the SV contains a signed integer.

=end original

SV が符号付き整数を含んでいるかどうかを示す真偽値を返します。

	bool	SvIOK_notUV(SV* sv)

=for hackers
Found in file sv.h

=item SvIOK_off
X<SvIOK_off>

=begin original

Unsets the IV status of an SV.

=end original

SV の IV ステータスをアンセットします。

	void	SvIOK_off(SV* sv)

=for hackers
Found in file sv.h

=item SvIOK_on
X<SvIOK_on>

=begin original

Tells an SV that it is an integer.

=end original

SV に対し、その SV が整数であるように指示します。

	void	SvIOK_on(SV* sv)

=for hackers
Found in file sv.h

=item SvIOK_only
X<SvIOK_only>

=begin original

Tells an SV that it is an integer and disables all other OK bits.

=end original

SV に対し、その SV が整数であり、他の OK ビットをすべてディセーブルに
するように指示します。

	void	SvIOK_only(SV* sv)

=for hackers
Found in file sv.h

=item SvIOK_only_UV
X<SvIOK_only_UV>

=begin original

Tells and SV that it is an unsigned integer and disables all other OK bits.

=end original

Tells and SV that it is an unsigned integer and disables all other OK bits.
(TBT)

	void	SvIOK_only_UV(SV* sv)

=for hackers
Found in file sv.h

=item SvIOK_UV
X<SvIOK_UV>

=begin original

Returns a boolean indicating whether the SV contains an unsigned integer.

=end original

SV が符号なし整数を含んでいるかどうかを示す真偽値を返します。

	bool	SvIOK_UV(SV* sv)

=for hackers
Found in file sv.h

=item SvIsCOW
X<SvIsCOW>

=begin original

Returns a boolean indicating whether the SV is Copy-On-Write. (either shared
hash key scalars, or full Copy On Write scalars if 5.9.0 is configured for
COW)

=end original

Returns a boolean indicating whether the SV is Copy-On-Write. (either shared
hash key scalars, or full Copy On Write scalars if 5.9.0 is configured for
COW)
(TBT)

	bool	SvIsCOW(SV* sv)

=for hackers
Found in file sv.h

=item SvIsCOW_shared_hash
X<SvIsCOW_shared_hash>

=begin original

Returns a boolean indicating whether the SV is Copy-On-Write shared hash key
scalar.

=end original

SV が Copy-On-Write 共有ハッシュキースカラかどうかを示す真偽値を返します。

	bool	SvIsCOW_shared_hash(SV* sv)

=for hackers
Found in file sv.h

=item SvIV
X<SvIV>

=begin original

Coerces the given SV to an integer and returns it. See C<SvIVx> for a
version which guarantees to evaluate sv only once.

=end original

与えられた SV を強制的に整数に変換し、それを返します。
See C<SvIVx> for a
version which guarantees to evaluate sv only once.
(TBT)

	IV	SvIV(SV* sv)

=for hackers
Found in file sv.h

=item SvIVX
X<SvIVX>

=begin original

Returns the raw value in the SV's IV slot, without checks or conversions.
Only use when you are sure SvIOK is true. See also C<SvIV()>.

=end original


	IV	SvIVX(SV* sv)

=for hackers
Found in file sv.h

=item SvIVx
X<SvIVx>

=begin original

Coerces the given SV to an integer and returns it. Guarantees to evaluate
C<sv> only once. Only use this if C<sv> is an expression with side effects,
otherwise use the more efficient C<SvIV>.

=end original

Coerces the given SV to an integer and returns it. Guarantees to evaluate
C<sv> only once. Only use this if C<sv> is an expression with side effects,
otherwise use the more efficient C<SvIV>.
(TBT)

	IV	SvIVx(SV* sv)

=for hackers
Found in file sv.h

=item SvIV_nomg
X<SvIV_nomg>

=begin original

Like C<SvIV> but doesn't process magic.

=end original

C<SvIV> と同様ですが、magic を処理しません。

	IV	SvIV_nomg(SV* sv)

=for hackers
Found in file sv.h

=item SvIV_set
X<SvIV_set>

=begin original

Set the value of the IV pointer in sv to val.  It is possible to perform
the same function of this macro with an lvalue assignment to C<SvIVX>.
With future Perls, however, it will be more efficient to use 
C<SvIV_set> instead of the lvalue assignment to C<SvIVX>.

=end original

Set the value of the IV pointer in sv to val.  It is possible to perform
the same function of this macro with an lvalue assignment to C<SvIVX>.
With future Perls, however, it will be more efficient to use 
C<SvIV_set> instead of the lvalue assignment to C<SvIVX>.
(TBT)

	void	SvIV_set(SV* sv, IV val)

=for hackers
Found in file sv.h

=item SvLEN
X<SvLEN>

=begin original

Returns the size of the string buffer in the SV, not including any part
attributable to C<SvOOK>.  See C<SvCUR>.

=end original

SV にある文字列バッファのサイズ(not including any part
attributable to C<SvOOK>) を返します。
C<SvCUR> を参照してください。
(TBT)

	STRLEN	SvLEN(SV* sv)

=for hackers
Found in file sv.h

=item SvLEN_set
X<SvLEN_set>

=begin original

Set the actual length of the string which is in the SV.  See C<SvIV_set>.

=end original

Set the actual length of the string which is in the SV.  See C<SvIV_set>.
(TBT)

	void	SvLEN_set(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvMAGIC_set
X<SvMAGIC_set>

=begin original

Set the value of the MAGIC pointer in sv to val.  See C<SvIV_set>.

=end original

sv の MAGIC ポインタの値を val にセットします。
C<SvIV_set> を参照してください。

	void	SvMAGIC_set(SV* sv, MAGIC* val)

=for hackers
Found in file sv.h

=item SvNIOK
X<SvNIOK>

=begin original

Returns a U32 value indicating whether the SV contains a number, integer or
double.

=end original

SV が数値、つまり整数値か倍精度実数値を含んでいるかどうかを表わす
U32 値を返します。

	U32	SvNIOK(SV* sv)

=for hackers
Found in file sv.h

=item SvNIOKp
X<SvNIOKp>

=begin original

Returns a U32 value indicating whether the SV contains a number, integer or
double.  Checks the B<private> setting.  Use C<SvNIOK>.

=end original

SV が倍精度実数値を含んでいるかどうかを示す U32 値を返します。
C<SvNIOK> を使い、B<private> な設定を検査します。

	U32	SvNIOKp(SV* sv)

=for hackers
Found in file sv.h

=item SvNIOK_off
X<SvNIOK_off>

=begin original

Unsets the NV/IV status of an SV.

=end original

SV の NT/IV ステータスをアンセットします。

	void	SvNIOK_off(SV* sv)

=for hackers
Found in file sv.h

=item SvNOK
X<SvNOK>

=begin original

Returns a U32 value indicating whether the SV contains a double.

=end original

SV が倍精度実数値を含んでいるかどうかを示す U32 値を返します。

	U32	SvNOK(SV* sv)

=for hackers
Found in file sv.h

=item SvNOKp
X<SvNOKp>

=begin original

Returns a U32 value indicating whether the SV contains a double.  Checks the
B<private> setting.  Use C<SvNOK>.

=end original

SV が倍精度実数値を含んでいるかどうかを示す U32 値を返します。
C<SvNOK> を使い、B<private> な設定を検査します。

	U32	SvNOKp(SV* sv)

=for hackers
Found in file sv.h

=item SvNOK_off
X<SvNOK_off>

=begin original

Unsets the NV status of an SV.

=end original

SV にある NT ステータスをアンセットします。

	void	SvNOK_off(SV* sv)

=for hackers
Found in file sv.h

=item SvNOK_on
X<SvNOK_on>

=begin original

Tells an SV that it is a double.

=end original

SV に対して、自分が倍精度実数であることを指示します。

	void	SvNOK_on(SV* sv)

=for hackers
Found in file sv.h

=item SvNOK_only
X<SvNOK_only>

=begin original

Tells an SV that it is a double and disables all other OK bits.

=end original

SV に対して、自分が倍精度実数でありその他の OK フラグを
ディセーブルにするよう指示します。

	void	SvNOK_only(SV* sv)

=for hackers
Found in file sv.h

=item SvNV
X<SvNV>

=begin original

Coerce the given SV to a double and return it. See C<SvNVx> for a version
which guarantees to evaluate sv only once.

=end original

SV を強制的に倍精度数値に変換し、それを返します。
See C<SvNVx> for a version
which guarantees to evaluate sv only once.
(TBT)

	NV	SvNV(SV* sv)

=for hackers
Found in file sv.h

=item SvNVX
X<SvNVX>

=begin original

Returns the raw value in the SV's NV slot, without checks or conversions.
Only use when you are sure SvNOK is true. See also C<SvNV()>.

=end original

Returns the raw value in the SV's NV slot, without checks or conversions.
Only use when you are sure SvNOK is true. See also C<SvNV()>.
(TBT)

	NV	SvNVX(SV* sv)

=for hackers
Found in file sv.h

=item SvNVx
X<SvNVx>

=begin original

Coerces the given SV to a double and returns it. Guarantees to evaluate
C<sv> only once. Only use this if C<sv> is an expression with side effects,
otherwise use the more efficient C<SvNV>.

=end original

Coerces the given SV to a double and returns it. Guarantees to evaluate
C<sv> only once. Only use this if C<sv> is an expression with side effects,
otherwise use the more efficient C<SvNV>.
(TBT)

	NV	SvNVx(SV* sv)

=for hackers
Found in file sv.h

=item SvNV_set
X<SvNV_set>

=begin original

Set the value of the NV pointer in sv to val.  See C<SvIV_set>.

=end original

sv の NV ポインタの値を val にセットします。
C<SvIV_set> を参照してください。

	void	SvNV_set(SV* sv, NV val)

=for hackers
Found in file sv.h

=item SvOK
X<SvOK>

=begin original

Returns a U32 value indicating whether the value is an SV. It also tells
whether the value is defined or not.

=end original

値が SV であるかどうかを示す U32 値を返します。
これはまた、値が定義されているかどうかも知らせます。

	U32	SvOK(SV* sv)

=for hackers
Found in file sv.h

=item SvOOK
X<SvOOK>

=begin original

Returns a U32 indicating whether the SvIVX is a valid offset value for
the SvPVX.  This hack is used internally to speed up removal of characters
from the beginning of a SvPV.  When SvOOK is true, then the start of the
allocated string buffer is really (SvPVX - SvIVX).

=end original

SvIVX が SvPVX に対する正しいオフセット値であるかどうかを示す
U32 値を返します。
この hack は SvPV の先頭から文字を
取り除くスピードを向上するために内部的に使われます。
SvOOK が真であるとき、割り当てられた文字列バッファの開始点は
(SvPVX - SvIVX)となります。

	U32	SvOOK(SV* sv)

=for hackers
Found in file sv.h

=item SvPOK
X<SvPOK>

=begin original

Returns a U32 value indicating whether the SV contains a character
string.

=end original

SV が文字文字列を保持しているかどうかの U32 値を返します。

	U32	SvPOK(SV* sv)

=for hackers
Found in file sv.h

=item SvPOKp
X<SvPOKp>

=begin original

Returns a U32 value indicating whether the SV contains a character string.
Checks the B<private> setting.  Use C<SvPOK>.

=end original

SV が文字文字列を保持しているかどうかの U32 値を返します。
B<private> セッティングをチェックし、C<SvPOK> を使います。

	U32	SvPOKp(SV* sv)

=for hackers
Found in file sv.h

=item SvPOK_off
X<SvPOK_off>

=begin original

Unsets the PV status of an SV.

=end original

SV の PV ステータスをアンセットします。

	void	SvPOK_off(SV* sv)

=for hackers
Found in file sv.h

=item SvPOK_on
X<SvPOK_on>

=begin original

Tells an SV that it is a string.

=end original

SV に対して、自分が文字列であることを指示します。

	void	SvPOK_on(SV* sv)

=for hackers
Found in file sv.h

=item SvPOK_only
X<SvPOK_only>

=begin original

Tells an SV that it is a string and disables all other OK bits.
Will also turn off the UTF-8 status.

=end original

SV に対して、自分が文字列であるということを指示し、
他の OK ビットをすべてディセーブルにするように指示します。

	void	SvPOK_only(SV* sv)

=for hackers
Found in file sv.h

=item SvPOK_only_UTF8
X<SvPOK_only_UTF8>

=begin original

Tells an SV that it is a string and disables all other OK bits,
and leaves the UTF-8 status as it was.

=end original

Tells an SV that it is a string and disables all other OK bits,
and leaves the UTF-8 status as it was.
(TBT)

	void	SvPOK_only_UTF8(SV* sv)

=for hackers
Found in file sv.h

=item SvPV
X<SvPV>

=begin original

Returns a pointer to the string in the SV, or a stringified form of
the SV if the SV does not contain a string.  The SV may cache the
stringified version becoming C<SvPOK>.  Handles 'get' magic. See also
C<SvPVx> for a version which guarantees to evaluate sv only once.

=end original

SV にある文字列へのポインタか、SVが文字列を保持していない場合には
SV の stringfield form を返します。
The SV may cache the
stringified version becoming C<SvPOK>.
“get”magic をハンドルします。
See also
C<SvPVx> for a version which guarantees to evaluate sv only once.
(TBT)

	char*	SvPV(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVbyte
X<SvPVbyte>

=begin original

Like C<SvPV>, but converts sv to byte representation first if necessary.

=end original

C<SvPV> と同様ですが、もし必要ならまず sv をバイト表現に変換します。

	char*	SvPVbyte(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVbytex
X<SvPVbytex>

=begin original

Like C<SvPV>, but converts sv to byte representation first if necessary.
Guarantees to evaluate sv only once; use the more efficient C<SvPVbyte>
otherwise.

=end original

C<SvPV> と同様ですが、もし必要ならまず sv をバイト表現に変換します。
sv を 1 度だけ評価することを保証します; さもなければより効率のよい
C<SvPVbyte> を使ってください。

	char*	SvPVbytex(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVbytex_force
X<SvPVbytex_force>

=begin original

Like C<SvPV_force>, but converts sv to byte representation first if necessary.
Guarantees to evaluate sv only once; use the more efficient C<SvPVbyte_force>
otherwise.

=end original

C<SvPV_force> と同様ですが、もし必要ならまず sv をバイト表現に変換します。
sv を 1 度だけ評価することを保証します; さもなければより効率のよい
C<SvPVbyte_force> を使ってください。

	char*	SvPVbytex_force(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVbyte_force
X<SvPVbyte_force>

=begin original

Like C<SvPV_force>, but converts sv to byte representation first if necessary.

=end original

C<SvPV_force> と同様ですが、もし必要ならまず sv をバイト表現に変換します。

	char*	SvPVbyte_force(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVbyte_nolen
X<SvPVbyte_nolen>

=begin original

Like C<SvPV_nolen>, but converts sv to byte representation first if necessary.

=end original

C<SvPV_nolen> と同様ですが、もし必要ならまず sv をバイト表現に変換します。

	char*	SvPVbyte_nolen(SV* sv)

=for hackers
Found in file sv.h

=item SvPVutf8
X<SvPVutf8>

=begin original

Like C<SvPV>, but converts sv to utf8 first if necessary.

=end original

C<SvPV> と同様ですが、もし必要ならまず sv を utf8 に変換します。

	char*	SvPVutf8(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVutf8x
X<SvPVutf8x>

=begin original

Like C<SvPV>, but converts sv to utf8 first if necessary.
Guarantees to evaluate sv only once; use the more efficient C<SvPVutf8>
otherwise.

=end original

C<SvPV> と同様ですが、もし必要ならまず sv を utf8 に変換します。
sv を 1 度だけ評価することを保証します; さもなければより効率のよい
C<SvPVutf8> を使ってください。

	char*	SvPVutf8x(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVutf8x_force
X<SvPVutf8x_force>

=begin original

Like C<SvPV_force>, but converts sv to utf8 first if necessary.
Guarantees to evaluate sv only once; use the more efficient C<SvPVutf8_force>
otherwise.

=end original

C<SvPV_force> と同様ですが、もし必要ならまず sv を utf8 に変換します。
sv を 1 度だけ評価することを保証します; さもなければより効率のよい
C<SvPVutf8_force> を使ってください。

	char*	SvPVutf8x_force(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVutf8_force
X<SvPVutf8_force>

=begin original

Like C<SvPV_force>, but converts sv to utf8 first if necessary.

=end original

C<SvPV_force> と同様ですが、もし必要ならまず sv を utf8 に変換します。

	char*	SvPVutf8_force(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPVutf8_nolen
X<SvPVutf8_nolen>

=begin original

Like C<SvPV_nolen>, but converts sv to utf8 first if necessary.

=end original

C<SvPV_nolen> と同様ですが、もし必要ならまず sv を utf8 に変換します。

	char*	SvPVutf8_nolen(SV* sv)

=for hackers
Found in file sv.h

=item SvPVX
X<SvPVX>

=begin original

Returns a pointer to the physical string in the SV.  The SV must contain a
string.

=end original

SV にある物理文字列へのポインタを返します。
SV は文字列を保持していなければなりません。

	char*	SvPVX(SV* sv)

=for hackers
Found in file sv.h

=item SvPVx
X<SvPVx>

=begin original

A version of C<SvPV> which guarantees to evaluate C<sv> only once.
Only use this if C<sv> is an expression with side effects, otherwise use the
more efficient C<SvPVX>.

=end original

A version of C<SvPV> which guarantees to evaluate C<sv> only once.
Only use this if C<sv> is an expression with side effects, otherwise use the
more efficient C<SvPVX>.
(TBT)

	char*	SvPVx(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPV_force
X<SvPV_force>

=begin original

Like C<SvPV> but will force the SV into containing just a string
(C<SvPOK_only>).  You want force if you are going to update the C<SvPVX>
directly.

=end original

C<SvPV> と同様ですが、SV を強制的に文字列(C<SvPOK_only>)を含みます。
C<SvPVX> を直接更新したい場合にはあなたは強制することを望むでしょう。

	char*	SvPV_force(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPV_force_nomg
X<SvPV_force_nomg>

=begin original

Like C<SvPV> but will force the SV into containing just a string
(C<SvPOK_only>).  You want force if you are going to update the C<SvPVX>
directly. Doesn't process magic.

=end original

Like C<SvPV> but will force the SV into containing just a string
(C<SvPOK_only>).  You want force if you are going to update the C<SvPVX>
directly. Doesn't process magic.
(TBT)

	char*	SvPV_force_nomg(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPV_nolen
X<SvPV_nolen>

=begin original

Returns a pointer to the string in the SV, or a stringified form of
the SV if the SV does not contain a string.  The SV may cache the
stringified form becoming C<SvPOK>.  Handles 'get' magic.

=end original

Returns a pointer to the string in the SV, or a stringified form of
the SV if the SV does not contain a string.  The SV may cache the
stringified form becoming C<SvPOK>.  Handles 'get' magic.
(TBT)

	char*	SvPV_nolen(SV* sv)

=for hackers
Found in file sv.h

=item SvPV_nomg
X<SvPV_nomg>

=begin original

Like C<SvPV> but doesn't process magic.

=end original

C<SvPV> と同様ですが、magic を処理しません。

	char*	SvPV_nomg(SV* sv, STRLEN len)

=for hackers
Found in file sv.h

=item SvPV_set
X<SvPV_set>

=begin original

Set the value of the PV pointer in sv to val.  See C<SvIV_set>.

=end original

sv の PV ポインタの値を val にセットします。
C<SvIV_set> を参照してください。

	void	SvPV_set(SV* sv, char* val)

=for hackers
Found in file sv.h

=item SvREFCNT
X<SvREFCNT>

=begin original

Returns the value of the object's reference count.

=end original

オブジェクトの参照カウントの値を返します。

	U32	SvREFCNT(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_dec
X<SvREFCNT_dec>

=begin original

Decrements the reference count of the given SV.

=end original

SV で与えられたものの参照カウントを減じます。

	void	SvREFCNT_dec(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_inc
X<SvREFCNT_inc>

=begin original

Increments the reference count of the given SV.

=end original

SV で与えられたものの参照カウントを増やします。

=begin original

All of the following SvREFCNT_inc* macros are optimized versions of
SvREFCNT_inc, and can be replaced with SvREFCNT_inc.

=end original

All of the following SvREFCNT_inc* macros are optimized versions of
SvREFCNT_inc, and can be replaced with SvREFCNT_inc.
(TBT)

	SV*	SvREFCNT_inc(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_inc_NN
X<SvREFCNT_inc_NN>

=begin original

Same as SvREFCNT_inc, but can only be used if you know I<sv>
is not NULL.  Since we don't have to check the NULLness, it's faster
and smaller.

=end original

SvREFCNT_inc と同じですが、
I<sv> が NULL ではないと分かっている場合にのみ使えます。
NULL かどうかをチェックする必要がないので、より速くより小さいです。

	SV*	SvREFCNT_inc_NN(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_inc_simple
X<SvREFCNT_inc_simple>

=begin original

Same as SvREFCNT_inc, but can only be used with expressions without side
effects.  Since we don't have to store a temporary value, it's faster.

=end original

SvREFCNT_inc と同じですが、式に副作用がない場合にのみ使えます。
一時的な値を保管する必要がないので、より速いです。

	SV*	SvREFCNT_inc_simple(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_inc_simple_NN
X<SvREFCNT_inc_simple_NN>

=begin original

Same as SvREFCNT_inc_simple, but can only be used if you know I<sv>
is not NULL.  Since we don't have to check the NULLness, it's faster
and smaller.

=end original

SvREFCNT_inc_simple と同じですが、
I<sv> が NULL ではないと分かっている場合にのみ使えます。
NULL かどうかをチェックする必要がないので、より速くより小さいです。

	SV*	SvREFCNT_inc_simple_NN(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_inc_simple_void
X<SvREFCNT_inc_simple_void>

=begin original

Same as SvREFCNT_inc_simple, but can only be used if you don't need the
return value.  The macro doesn't need to return a meaningful value.

=end original

SvREFCNT_inc_simple と同じですが、返り値が不要な場合にのみ使えます。
このマクロは意味のある値を返す必要はありません。

	void	SvREFCNT_inc_simple_void(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_inc_simple_void_NN
X<SvREFCNT_inc_simple_void_NN>

=begin original

Same as SvREFCNT_inc, but can only be used if you don't need the return
value, and you know that I<sv> is not NULL.  The macro doesn't need
to return a meaningful value, or check for NULLness, so it's smaller
and faster.

=end original

SvREFCNT_inc と同じですが、返り値が不要で、I<sv> が NULL ではないと
分かっている場合にのみ使えます。
このマクロは意味のある値を返す必要が無く、NULL をチェックする必要もないので、
より速くより小さいです。

	void	SvREFCNT_inc_simple_void_NN(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_inc_void
X<SvREFCNT_inc_void>

=begin original

Same as SvREFCNT_inc, but can only be used if you don't need the
return value.  The macro doesn't need to return a meaningful value.

=end original

SvREFCNT_inc と同じですが、返り値が不要な場合にのみ使えます。
このマクロは意味のある値を返す必要はありません。

	void	SvREFCNT_inc_void(SV* sv)

=for hackers
Found in file sv.h

=item SvREFCNT_inc_void_NN
X<SvREFCNT_inc_void_NN>

=begin original

Same as SvREFCNT_inc, but can only be used if you don't need the return
value, and you know that I<sv> is not NULL.  The macro doesn't need
to return a meaningful value, or check for NULLness, so it's smaller
and faster.

=end original

SvREFCNT_inc と同じですが、返り値が不要で、I<sv> が NULL ではないと
分かっている場合にのみ使えます。
このマクロは意味のある値を返す必要が無く、NULL をチェックする必要もないので、
より速くより小さいです。

	void	SvREFCNT_inc_void_NN(SV* sv)

=for hackers
Found in file sv.h

=item SvROK
X<SvROK>

=begin original

Tests if the SV is an RV.

=end original

SV が RV であるかを検査します。

	U32	SvROK(SV* sv)

=for hackers
Found in file sv.h

=item SvROK_off
X<SvROK_off>

=begin original

Unsets the RV status of an SV.

=end original

SV の RV ステータスをリセットします。

	void	SvROK_off(SV* sv)

=for hackers
Found in file sv.h

=item SvROK_on
X<SvROK_on>

=begin original

Tells an SV that it is an RV.

=end original

SV に、自分が RV であると指示します。

	void	SvROK_on(SV* sv)

=for hackers
Found in file sv.h

=item SvRV
X<SvRV>

=begin original

Dereferences an RV to return the SV.

=end original

SV を返すために RV を参照はずしします。

	SV*	SvRV(SV* sv)

=for hackers
Found in file sv.h

=item SvRV_set
X<SvRV_set>

=begin original

Set the value of the RV pointer in sv to val.  See C<SvIV_set>.

=end original

sv の RV ポインタの値を val にセットします。
C<SvIV_set> を参照してください。

	void	SvRV_set(SV* sv, SV* val)

=for hackers
Found in file sv.h

=item SvSTASH
X<SvSTASH>

=begin original

Returns the stash of the SV.

=end original

SV のスタッシュを返します。

	HV*	SvSTASH(SV* sv)

=for hackers
Found in file sv.h

=item SvSTASH_set
X<SvSTASH_set>

=begin original

Set the value of the STASH pointer in sv to val.  See C<SvIV_set>.

=end original

sv の STASH ポインタの値を val にセットします。
C<SvIV_set> を参照してください。

	void	SvSTASH_set(SV* sv, HV* val)

=for hackers
Found in file sv.h

=item SvTAINT
X<SvTAINT>

=begin original

Taints an SV if tainting is enabled.

=end original

汚染検査が有効なときに SV を汚染検査します。

	void	SvTAINT(SV* sv)

=for hackers
Found in file sv.h

=item SvTAINTED
X<SvTAINTED>

=begin original

Checks to see if an SV is tainted. Returns TRUE if it is, FALSE if
not.

=end original

SV が汚染されているかどうかをチェックします。
汚染されていれば TRUE を、そうでなければ FALSE を返します。

	bool	SvTAINTED(SV* sv)

=for hackers
Found in file sv.h

=item SvTAINTED_off
X<SvTAINTED_off>

=begin original

Untaints an SV. Be I<very> careful with this routine, as it short-circuits
some of Perl's fundamental security features. XS module authors should not
use this function unless they fully understand all the implications of
unconditionally untainting the value. Untainting should be done in the
standard perl fashion, via a carefully crafted regexp, rather than directly
untainting variables.

=end original

SV を汚染除去します。
Perl の基本的セキュリティ機構と同様
このルーチンを使うときは特に注意してください。
XS モジュールの作者は、汚染除去について良く理解しない限りは
この関数を使うべきではありません。
perl 標準のやり方では直接変数の汚染除去するのではなく、
注意深く構築された正規表現を使って汚染除去が行われます。

	void	SvTAINTED_off(SV* sv)

=for hackers
Found in file sv.h

=item SvTAINTED_on
X<SvTAINTED_on>

=begin original

Marks an SV as tainted if tainting is enabled.

=end original

汚染チェックが有効な場合、汚染されているという印を SV につけます。

	void	SvTAINTED_on(SV* sv)

=for hackers
Found in file sv.h

=item SvTRUE
X<SvTRUE>

=begin original

Returns a boolean indicating whether Perl would evaluate the SV as true or
false, defined or undefined.  Does not handle 'get' magic.

=end original

Perl が SV を真と評価するか偽と評価するか、define されているか
undefine なのかを表わすブール値を返します。
'set' magicをハンドルしません。

	bool	SvTRUE(SV* sv)

=for hackers
Found in file sv.h

=item SvTYPE
X<SvTYPE>

=begin original

Returns the type of the SV.  See C<svtype>.

=end original

SV の型を返します。
C<svtype> を参照してください。

	svtype	SvTYPE(SV* sv)

=for hackers
Found in file sv.h

=item SvUOK
X<SvUOK>

=begin original

Returns a boolean indicating whether the SV contains an unsigned integer.

=end original

SV が符号なし整数を含んでいるかどうかを示す真偽値を返します。

	bool	SvUOK(SV* sv)

=for hackers
Found in file sv.h

=item SvUPGRADE
X<SvUPGRADE>

=begin original

Used to upgrade an SV to a more complex form.  Uses C<sv_upgrade> to
perform the upgrade if necessary.  See C<svtype>.

=end original

SV をより複雑なフォームにするために使われます。
必要であればアップグレードのために C<sv_upgrade> を使用します。
C<svtype> を参照してください。

	void	SvUPGRADE(SV* sv, svtype type)

=for hackers
Found in file sv.h

=item SvUTF8
X<SvUTF8>

=begin original

Returns a U32 value indicating whether the SV contains UTF-8 encoded data.
Call this after SvPV() in case any call to string overloading updates the
internal flag.

=end original

SV が UTF-8 エンコードされたデータを含んでいるかどうかを示す U32 値を
返します。
Call this after SvPV() in case any call to string overloading updates the
internal flag.
(TBT)

	U32	SvUTF8(SV* sv)

=for hackers
Found in file sv.h

=item SvUTF8_off
X<SvUTF8_off>

=begin original

Unsets the UTF-8 status of an SV.

=end original

SV の UTF-8 状態をリセットします。

	void	SvUTF8_off(SV *sv)

=for hackers
Found in file sv.h

=item SvUTF8_on
X<SvUTF8_on>

=begin original

Turn on the UTF-8 status of an SV (the data is not changed, just the flag).
Do not use frivolously.

=end original

SV の UTF-8 状態をオンにします (データは変更されません; フラグだけです)。
軽率に使わないでください。

	void	SvUTF8_on(SV *sv)

=for hackers
Found in file sv.h

=item SvUV
X<SvUV>

=begin original

Coerces the given SV to an unsigned integer and returns it.  See C<SvUVx>
for a version which guarantees to evaluate sv only once.

=end original

SV を強制的に無符号整数に変換し、それを返します。
sv が 1 度だけ評価されることを保証しているバージョンについては
C<SvUVx> を参照してください。

	UV	SvUV(SV* sv)

=for hackers
Found in file sv.h

=item SvUVX
X<SvUVX>

=begin original

Returns the raw value in the SV's UV slot, without checks or conversions.
Only use when you are sure SvIOK is true. See also C<SvUV()>.

=end original

SV の UV スロットの生の値を、チェックや変換なしに返します。
SvIOK が真であることを確認した後にのみ使えます。
C<SvUV()> も参照してください。

	UV	SvUVX(SV* sv)

=for hackers
Found in file sv.h

=item SvUVx
X<SvUVx>

=begin original

Coerces the given SV to an unsigned integer and returns it. Guarantees to
C<sv> only once. Only use this if C<sv> is an expression with side effects,
otherwise use the more efficient C<SvUV>.

=end original

Coerces the given SV to an unsigned integer and returns it. Guarantees to
C<sv> only once. Only use this if C<sv> is an expression with side effects,
otherwise use the more efficient C<SvUV>.
(TBT)

	UV	SvUVx(SV* sv)

=for hackers
Found in file sv.h

=item SvUV_nomg
X<SvUV_nomg>

=begin original

Like C<SvUV> but doesn't process magic.

=end original

C<SvUV> と同様ですが、magic を処理しません。

	UV	SvUV_nomg(SV* sv)

=for hackers
Found in file sv.h

=item SvUV_set
X<SvUV_set>

=begin original

Set the value of the UV pointer in sv to val.  See C<SvIV_set>.

=end original

sv の UV ポインタの値を val にセットします。
C<SvIV_set> を参照してください。

	void	SvUV_set(SV* sv, UV val)

=for hackers
Found in file sv.h

=item SvVOK
X<SvVOK>

=begin original

Returns a boolean indicating whether the SV contains a v-string.

=end original

SV がv-文字列を含んでいるかどうかを示す真偽値を返します。

	bool	SvVOK(SV* sv)

=for hackers
Found in file sv.h

=item sv_catpvn_nomg
X<sv_catpvn_nomg>

=begin original

Like C<sv_catpvn> but doesn't process magic.

=end original

C<sv_catpvn> と同様ですが、magic を処理しません。

	void	sv_catpvn_nomg(SV* sv, const char* ptr, STRLEN len)

=for hackers
Found in file sv.h

=item sv_catsv_nomg
X<sv_catsv_nomg>

=begin original

Like C<sv_catsv> but doesn't process magic.

=end original

C<sv_catsv> と同様ですが、magic を処理しません。

	void	sv_catsv_nomg(SV* dsv, SV* ssv)

=for hackers
Found in file sv.h

=item sv_derived_from
X<sv_derived_from>

=begin original

Returns a boolean indicating whether the SV is derived from the specified class
I<at the C level>.  To check derivation at the Perl level, call C<isa()> as a
normal Perl method.

=end original

I<C のレベルで> SV が指定したクラスから派生したものであるかどうかを示す
ブール値を返します。
To check derivation at the Perl level, call C<isa()> as a
normal Perl method.
(TBT)

	bool	sv_derived_from(SV* sv, const char* name)

=for hackers
Found in file universal.c

=item sv_does
X<sv_does>

=begin original

Returns a boolean indicating whether the SV performs a specific, named role.
The SV can be a Perl object or the name of a Perl class.

=end original

Returns a boolean indicating whether the SV performs a specific, named role.
The SV can be a Perl object or the name of a Perl class.
(TBT)

	bool	sv_does(SV* sv, const char* name)

=for hackers
Found in file universal.c

=item sv_report_used
X<sv_report_used>

=begin original

Dump the contents of all SVs not yet freed. (Debugging aid).

=end original

開放されていない全ての SV の内容をダンプします。
(デバッグの助けとなります)。

	void	sv_report_used()

=for hackers
Found in file sv.c

=item sv_setsv_nomg
X<sv_setsv_nomg>

=begin original

Like C<sv_setsv> but doesn't process magic.

=end original

C<sv_setsv> と同様ですが、magic を処理しません。

	void	sv_setsv_nomg(SV* dsv, SV* ssv)

=for hackers
Found in file sv.h

=back

=head1 SV-Body Allocation

=over 8

=item looks_like_number
X<looks_like_number>

=begin original

Test if the content of an SV looks like a number (or is a number).
C<Inf> and C<Infinity> are treated as numbers (so will not issue a
non-numeric warning), even if your atof() doesn't grok them.

=end original

SV の内容が数値のようにみなせるか(あるいは数値であるか)を検査します。
C<Inf> and C<Infinity> are treated as numbers (so will not issue a
non-numeric warning), even if your atof() doesn't grok them.
(TBT)

	I32	looks_like_number(SV* sv)

=for hackers
Found in file sv.c

=item newRV_noinc
X<newRV_noinc>

=begin original

Creates an RV wrapper for an SV.  The reference count for the original
SV is B<not> incremented.

=end original

SV に対する RV ラッパーを生成します。
元の SV の参照カウントはインクリメント B<されません>。

	SV*	newRV_noinc(SV* sv)

=for hackers
Found in file sv.c

=item newSV
X<newSV>

=begin original

Creates a new SV.  A non-zero C<len> parameter indicates the number of
bytes of preallocated string space the SV should have.  An extra byte for a
trailing NUL is also reserved.  (SvPOK is not set for the SV even if string
space is allocated.)  The reference count for the new SV is set to 1.

=end original

新たな SV を生成します。
非ゼロの C<len> パラメーターは
SV が持つべき割り当てずみ文字列空間の大きさを示します。
余分な空間には NUL が埋められ、予約されます
(SvPOK は文字列が割り当てられていたとしても SV をセットしません)。
新しい SV の参照カウントは 1 にセットされます。

=begin original

In 5.9.3, newSV() replaces the older NEWSV() API, and drops the first
parameter, I<x>, a debug aid which allowed callers to identify themselves.
This aid has been superseded by a new build option, PERL_MEM_LOG (see
L<perlhack/PERL_MEM_LOG>).  The older API is still there for use in XS
modules supporting older perls.

=end original

In 5.9.3, newSV() replaces the older NEWSV() API, and drops the first
parameter, I<x>, a debug aid which allowed callers to identify themselves.
This aid has been superseded by a new build option, PERL_MEM_LOG (see
L<perlhack/PERL_MEM_LOG>).  The older API is still there for use in XS
modules supporting older perls.
(TBT)

	SV*	newSV(STRLEN len)

=for hackers
Found in file sv.c

=item newSVhek
X<newSVhek>

=begin original

Creates a new SV from the hash key structure.  It will generate scalars that
point to the shared string table where possible. Returns a new (undefined)
SV if the hek is NULL.

=end original

Creates a new SV from the hash key structure.  It will generate scalars that
point to the shared string table where possible. Returns a new (undefined)
SV if the hek is NULL.
(TBT)

	SV*	newSVhek(const HEK *hek)

=for hackers
Found in file sv.c

=item newSViv
X<newSViv>

=begin original

Creates a new SV and copies an integer into it.  The reference count for the
SV is set to 1.

=end original

新たな SV を生成し、整数値をそこにコピーします。
SV の参照カウントは 1 にセットされます。

	SV*	newSViv(IV i)

=for hackers
Found in file sv.c

=item newSVnv
X<newSVnv>

=begin original

Creates a new SV and copies a floating point value into it.
The reference count for the SV is set to 1.

=end original

新たな SV を生成し、不動小数点数値をそこにコピーします。
SV の参照カウントは 1 にセットされます。

	SV*	newSVnv(NV n)

=for hackers
Found in file sv.c

=item newSVpv
X<newSVpv>

=begin original

Creates a new SV and copies a string into it.  The reference count for the
SV is set to 1.  If C<len> is zero, Perl will compute the length using
strlen().  For efficiency, consider using C<newSVpvn> instead.

=end original

新たな SV を生成し、文字列をそこにコピーします。
SV の参照カウントは 1 にセットされます。
C<len> がゼロの場合、Perl が strlen() を使って長さを計算します。
効率のために、代わりに C<newSVpvn> を使うことを考慮してください。

	SV*	newSVpv(const char* s, STRLEN len)

=for hackers
Found in file sv.c

=item newSVpvf
X<newSVpvf>

=begin original

Creates a new SV and initializes it with the string formatted like
C<sprintf>.

=end original

新たな SV を生成し、C<sprintf> のような文字列書式によって初期化します。

	SV*	newSVpvf(const char* pat, ...)

=for hackers
Found in file sv.c

=item newSVpvn
X<newSVpvn>

=begin original

Creates a new SV and copies a string into it.  The reference count for the
SV is set to 1.  Note that if C<len> is zero, Perl will create a zero length
string.  You are responsible for ensuring that the source string is at least
C<len> bytes long.  If the C<s> argument is NULL the new SV will be undefined.

=end original

新たな SV を生成し、文字列をそこにコピーします。
SV の参照カウントは 1 に設定されます。
C<len> がゼロであった場合には長さゼロの文字列が生成されることに
注意してください。
You are responsible for ensuring that the source string is at least
C<len> bytes long.  If the C<s> argument is NULL the new SV will be undefined.
(TBT)

	SV*	newSVpvn(const char* s, STRLEN len)

=for hackers
Found in file sv.c

=item newSVpvn_share
X<newSVpvn_share>

=begin original

Creates a new SV with its SvPVX_const pointing to a shared string in the string
table. If the string does not already exist in the table, it is created
first.  Turns on READONLY and FAKE. If the C<hash> parameter is non-zero, that
value is used; otherwise the hash is computed. The string's hash can be later
be retrieved from the SV with the C<SvSHARED_HASH()> macro. The idea here is
that as the string table is used for shared hash keys these strings will have
SvPVX_const == HeKEY and hash lookup will avoid string compare.

=end original

Creates a new SV with its SvPVX_const pointing to a shared string in the string
table. If the string does not already exist in the table, it is created
first.  Turns on READONLY and FAKE. If the C<hash> parameter is non-zero, that
value is used; otherwise the hash is computed. The string's hash can be later
be retrieved from the SV with the C<SvSHARED_HASH()> macro. The idea here is
that as the string table is used for shared hash keys these strings will have
SvPVX_const == HeKEY and hash lookup will avoid string compare.
(TBT)

	SV*	newSVpvn_share(const char* s, I32 len, U32 hash)

=for hackers
Found in file sv.c

=item newSVpvs
X<newSVpvs>

=begin original

Like C<newSVpvn>, but takes a literal string instead of a string/length pair.

=end original

C<newSVpvn> と同様ですが、文字列/長さの組ではなく、リテラルな文字列を
取ります。

	SV*	newSVpvs(const char* s)

=for hackers
Found in file handy.h

=item newSVpvs_share
X<newSVpvs_share>

=begin original

Like C<newSVpvn_share>, but takes a literal string instead of a string/length
pair and omits the hash parameter.

=end original

C<newSVpvn_share> と同様ですが、文字列/長さの組ではなく、リテラルな文字列を
取り、ハッシュパラメータを除外します。

	SV*	newSVpvs_share(const char* s)

=for hackers
Found in file handy.h

=item newSVrv
X<newSVrv>

=begin original

Creates a new SV for the RV, C<rv>, to point to.  If C<rv> is not an RV then
it will be upgraded to one.  If C<classname> is non-null then the new SV will
be blessed in the specified package.  The new SV is returned and its
reference count is 1.

=end original

SV を指し示す RV の C<rv> に対する新たな SV を生成します。
C<rv> が RV でない場合には、それは RV に昇格します。
C<classname> がナルでない場合には、生成された SV は指定されたパッケージに
bless されます。
参照カウントが 1 に設定された SV が返されます。

	SV*	newSVrv(SV* rv, const char* classname)

=for hackers
Found in file sv.c

=item newSVsv
X<newSVsv>

=begin original

Creates a new SV which is an exact duplicate of the original SV.
(Uses C<sv_setsv>).

=end original

元の SV を正確に複製した SV を生成します。
(C<sv_setsv> を使います)。

	SV*	newSVsv(SV* old)

=for hackers
Found in file sv.c

=item newSVuv
X<newSVuv>

=begin original

Creates a new SV and copies an unsigned integer into it.
The reference count for the SV is set to 1.

=end original

Creates a new SV and copies an unsigned integer into it.
The reference count for the SV is set to 1.
(TBT)

	SV*	newSVuv(UV u)

=for hackers
Found in file sv.c

=item newSV_type
X<newSV_type>

=begin original

Creates a new SV, of the type specified.  The reference count for the new SV
is set to 1.

=end original

Creates a new SV, of the type specified.  The reference count for the new SV
is set to 1.
(TBT)

	SV*	newSV_type(svtype type)

=for hackers
Found in file sv.c

=item sv_2bool
X<sv_2bool>

=begin original

This function is only called on magical items, and is only used by
sv_true() or its macro equivalent.

=end original

This function is only called on magical items, and is only used by
sv_true() or its macro equivalent.
(TBT)

	bool	sv_2bool(SV* sv)

=for hackers
Found in file sv.c

=item sv_2cv
X<sv_2cv>

=begin original

Using various gambits, try to get a CV from an SV; in addition, try if
possible to set C<*st> and C<*gvp> to the stash and GV associated with it.
The flags in C<lref> are passed to sv_fetchsv.

=end original

Using various gambits, try to get a CV from an SV; in addition, try if
possible to set C<*st> and C<*gvp> to the stash and GV associated with it.
The flags in C<lref> are passed to sv_fetchsv.
(TBT)

	CV*	sv_2cv(SV* sv, HV** st, GV** gvp, I32 lref)

=for hackers
Found in file sv.c

=item sv_2io
X<sv_2io>

=begin original

Using various gambits, try to get an IO from an SV: the IO slot if its a
GV; or the recursive result if we're an RV; or the IO slot of the symbol
named after the PV if we're a string.

=end original

Using various gambits, try to get an IO from an SV: the IO slot if its a
GV; or the recursive result if we're an RV; or the IO slot of the symbol
named after the PV if we're a string.
(TBT)

	IO*	sv_2io(SV* sv)

=for hackers
Found in file sv.c

=item sv_2iv_flags
X<sv_2iv_flags>

=begin original

Return the integer value of an SV, doing any necessary string
conversion.  If flags includes SV_GMAGIC, does an mg_get() first.
Normally used via the C<SvIV(sv)> and C<SvIVx(sv)> macros.

=end original

Return the integer value of an SV, doing any necessary string
conversion.  If flags includes SV_GMAGIC, does an mg_get() first.
Normally used via the C<SvIV(sv)> and C<SvIVx(sv)> macros.
(TBT)

	IV	sv_2iv_flags(SV* sv, I32 flags)

=for hackers
Found in file sv.c

=item sv_2mortal
X<sv_2mortal>

=begin original

Marks an existing SV as mortal.  The SV will be destroyed "soon", either
by an explicit call to FREETMPS, or by an implicit call at places such as
statement boundaries.  SvTEMP() is turned on which means that the SV's
string buffer can be "stolen" if this SV is copied. See also C<sv_newmortal>
and C<sv_mortalcopy>.

=end original

SV を揮発性にします。
The SV will be destroyed "soon", either
by an explicit call to FREETMPS, or by an implicit call at places such as
statement boundaries.  SvTEMP() is turned on which means that the SV's
string buffer can be "stolen" if this SV is copied. See also C<sv_newmortal>
and C<sv_mortalcopy>.
(TBT)

	SV*	sv_2mortal(SV* sv)

=for hackers
Found in file sv.c

=item sv_2nv
X<sv_2nv>

=begin original

Return the num value of an SV, doing any necessary string or integer
conversion, magic etc. Normally used via the C<SvNV(sv)> and C<SvNVx(sv)>
macros.

=end original

Return the num value of an SV, doing any necessary string or integer
conversion, magic etc. Normally used via the C<SvNV(sv)> and C<SvNVx(sv)>
macros.
(TBT)

	NV	sv_2nv(SV* sv)

=for hackers
Found in file sv.c

=item sv_2pvbyte
X<sv_2pvbyte>

=begin original

Return a pointer to the byte-encoded representation of the SV, and set *lp
to its length.  May cause the SV to be downgraded from UTF-8 as a
side-effect.

=end original

SV のバイトエンコードされた表現へのポインタを返し、その長さを *lp に
セットします。
副作用として、SV が UTF-8 から降格するかもしれません。

=begin original

Usually accessed via the C<SvPVbyte> macro.

=end original

普通は C<SvPVbyte> マクロ経由でアクセスされます。

	char*	sv_2pvbyte(SV* sv, STRLEN* lp)

=for hackers
Found in file sv.c

=item sv_2pvutf8
X<sv_2pvutf8>

=begin original

Return a pointer to the UTF-8-encoded representation of the SV, and set *lp
to its length.  May cause the SV to be upgraded to UTF-8 as a side-effect.

=end original

SV の UTF-8 エンコードされた表現へのポインタを返し、その長さを *lp に
セットします。
副作用として、SV が UTF-8 へ昇格するかもしれません。

=begin original

Usually accessed via the C<SvPVutf8> macro.

=end original

普通は C<SvPVutf8> マクロ経由でアクセスされます。

	char*	sv_2pvutf8(SV* sv, STRLEN* lp)

=for hackers
Found in file sv.c

=item sv_2pv_flags
X<sv_2pv_flags>

=begin original

Returns a pointer to the string value of an SV, and sets *lp to its length.
If flags includes SV_GMAGIC, does an mg_get() first. Coerces sv to a string
if necessary.
Normally invoked via the C<SvPV_flags> macro. C<sv_2pv()> and C<sv_2pv_nomg>
usually end up here too.

=end original

Returns a pointer to the string value of an SV, and sets *lp to its length.
If flags includes SV_GMAGIC, does an mg_get() first. Coerces sv to a string
if necessary.
Normally invoked via the C<SvPV_flags> macro. C<sv_2pv()> and C<sv_2pv_nomg>
usually end up here too.
(TBT)

	char*	sv_2pv_flags(SV* sv, STRLEN* lp, I32 flags)

=for hackers
Found in file sv.c

=item sv_2uv_flags
X<sv_2uv_flags>

=begin original

Return the unsigned integer value of an SV, doing any necessary string
conversion.  If flags includes SV_GMAGIC, does an mg_get() first.
Normally used via the C<SvUV(sv)> and C<SvUVx(sv)> macros.

=end original

Return the unsigned integer value of an SV, doing any necessary string
conversion.  If flags includes SV_GMAGIC, does an mg_get() first.
Normally used via the C<SvUV(sv)> and C<SvUVx(sv)> macros.
(TBT)

	UV	sv_2uv_flags(SV* sv, I32 flags)

=for hackers
Found in file sv.c

=item sv_backoff
X<sv_backoff>

=begin original

Remove any string offset. You should normally use the C<SvOOK_off> macro
wrapper instead.

=end original

Remove any string offset. You should normally use the C<SvOOK_off> macro
wrapper instead.
(TBT)

	int	sv_backoff(SV* sv)

=for hackers
Found in file sv.c

=item sv_bless
X<sv_bless>

=begin original

Blesses an SV into a specified package.  The SV must be an RV.  The package
must be designated by its stash (see C<gv_stashpv()>).  The reference count
of the SV is unaffected.

=end original

SV を指定したパッケージに bless します。
SV は RV でなければなりません。
パッケージは、そのスタッシュ(C<gv_stashpv()> 参照)によって
指示されていなければなりません。
SV の参照カウントは影響を受けません。

	SV*	sv_bless(SV* sv, HV* stash)

=for hackers
Found in file sv.c

=item sv_catpv
X<sv_catpv>

=begin original

Concatenates the string onto the end of the string which is in the SV.
If the SV has the UTF-8 status set, then the bytes appended should be
valid UTF-8.  Handles 'get' magic, but not 'set' magic.  See C<sv_catpv_mg>.

=end original

文字列を、SV にある文字列の終端に連結します。
If the SV has the UTF-8 status set, then the bytes appended should be
valid UTF-8.  
'get' magic をハンドルしますが、'set' magic はハンドルしません。
C<sv_catpv_mg> を参照してください。
(TBT)

	void	sv_catpv(SV* sv, const char* ptr)

=for hackers
Found in file sv.c

=item sv_catpvf
X<sv_catpvf>

=begin original

Processes its arguments like C<sprintf> and appends the formatted
output to an SV.  If the appended data contains "wide" characters
(including, but not limited to, SVs with a UTF-8 PV formatted with %s,
and characters >255 formatted with %c), the original SV might get
upgraded to UTF-8.  Handles 'get' magic, but not 'set' magic.  See
C<sv_catpvf_mg>. If the original SV was UTF-8, the pattern should be
valid UTF-8; if the original SV was bytes, the pattern should be too.

=end original

引数を C<sprintf> のように処理し、SV にその結果を追加します。
If the appended data contains "wide" characters
(including, but not limited to, SVs with a UTF-8 PV formatted with %s,
and characters >255 formatted with %c), the original SV might get
upgraded to UTF-8.  
'get' magic をハンドルしますが、'set' magic はハンドルしません。
See
C<sv_catpvf_mg>. If the original SV was UTF-8, the pattern should be
valid UTF-8; if the original SV was bytes, the pattern should be too.
(TBT)

	void	sv_catpvf(SV* sv, const char* pat, ...)

=for hackers
Found in file sv.c

=item sv_catpvf_mg
X<sv_catpvf_mg>

=begin original

Like C<sv_catpvf>, but also handles 'set' magic.

=end original

C<sv_catpvf> と同様ですが、'set' magic もハンドルします。

	void	sv_catpvf_mg(SV *sv, const char* pat, ...)

=for hackers
Found in file sv.c

=item sv_catpvn
X<sv_catpvn>

=begin original

Concatenates the string onto the end of the string which is in the SV.  The
C<len> indicates number of bytes to copy.  If the SV has the UTF-8
status set, then the bytes appended should be valid UTF-8.
Handles 'get' magic, but not 'set' magic.  See C<sv_catpvn_mg>.

=end original

文字列を、SV にある文字列の終端に連結します。
C<len>はコピーするバイト数を指示します。
If the SV has the UTF-8
status set, then the bytes appended should be valid UTF-8.
'get' magic をハンドルしますが、'set' magic はハンドルしません。
C<sv_catpvn_mg> を参照してください。
(TBT)

	void	sv_catpvn(SV* sv, const char* ptr, STRLEN len)

=for hackers
Found in file sv.c

=item sv_catpvn_flags
X<sv_catpvn_flags>

=begin original

Concatenates the string onto the end of the string which is in the SV.  The
C<len> indicates number of bytes to copy.  If the SV has the UTF-8
status set, then the bytes appended should be valid UTF-8.
If C<flags> has C<SV_GMAGIC> bit set, will C<mg_get> on C<dsv> if
appropriate, else not. C<sv_catpvn> and C<sv_catpvn_nomg> are implemented
in terms of this function.

=end original

Concatenates the string onto the end of the string which is in the SV.  The
C<len> indicates number of bytes to copy.  If the SV has the UTF-8
status set, then the bytes appended should be valid UTF-8.
If C<flags> has C<SV_GMAGIC> bit set, will C<mg_get> on C<dsv> if
appropriate, else not. C<sv_catpvn> and C<sv_catpvn_nomg> are implemented
in terms of this function.
(TBT)

	void	sv_catpvn_flags(SV* sv, const char* ptr, STRLEN len, I32 flags)

=for hackers
Found in file sv.c

=item sv_catpvs
X<sv_catpvs>

=begin original

Like C<sv_catpvn>, but takes a literal string instead of a string/length pair.

=end original

C<sv_catpvn> と同様ですが、文字列/長さの組ではなく、リテラルな文字列を
取ります。

	void	sv_catpvs(SV* sv, const char* s)

=for hackers
Found in file handy.h

=item sv_catpv_mg
X<sv_catpv_mg>

=begin original

Like C<sv_catpv>, but also handles 'set' magic.

=end original

C<sv_catpv> と同様ですが、'set' magic もハンドルします。

	void	sv_catpv_mg(SV *sv, const char *ptr)

=for hackers
Found in file sv.c

=item sv_catsv
X<sv_catsv>

=begin original

Concatenates the string from SV C<ssv> onto the end of the string in
SV C<dsv>.  Modifies C<dsv> but not C<ssv>.  Handles 'get' magic, but
not 'set' magic.  See C<sv_catsv_mg>.

=end original

SV C<ssv> にある文字列を、SV C<dsv> にある文字列の終端へ連結します。
Modifies C<dsv> but not C<ssv>.
'get' magic をハンドルしますが、'set' magic はハンドルしません。
C<sv_catsv_mg> を参照してください。
(TBT)

	void	sv_catsv(SV* dsv, SV* ssv)

=for hackers
Found in file sv.c

=item sv_catsv_flags
X<sv_catsv_flags>

=begin original

Concatenates the string from SV C<ssv> onto the end of the string in
SV C<dsv>.  Modifies C<dsv> but not C<ssv>.  If C<flags> has C<SV_GMAGIC>
bit set, will C<mg_get> on the SVs if appropriate, else not. C<sv_catsv>
and C<sv_catsv_nomg> are implemented in terms of this function.

=end original

Concatenates the string from SV C<ssv> onto the end of the string in
SV C<dsv>.  Modifies C<dsv> but not C<ssv>.  If C<flags> has C<SV_GMAGIC>
bit set, will C<mg_get> on the SVs if appropriate, else not. C<sv_catsv>
and C<sv_catsv_nomg> are implemented in terms of this function.
(TBT)

	void	sv_catsv_flags(SV* dsv, SV* ssv, I32 flags)

=for hackers
Found in file sv.c

=item sv_chop
X<sv_chop>

=begin original

Efficient removal of characters from the beginning of the string buffer.
SvPOK(sv) must be true and the C<ptr> must be a pointer to somewhere inside
the string buffer.  The C<ptr> becomes the first character of the adjusted
string. Uses the "OOK hack".
Beware: after this function returns, C<ptr> and SvPVX_const(sv) may no longer
refer to the same chunk of data.

=end original

文字列バッファの先頭から文字を効率的に削除します。
SvPOK(sv) が真でなければならず、C<ptr> は文字列バッファの
内側のどこかを指し示すポインタでなければなりません。
C<ptr> は調整後の文字列の先頭となります。
Uses the "OOK hack".
Beware: after this function returns, C<ptr> and SvPVX_const(sv) may no longer
refer to the same chunk of data.
(TBT)

	void	sv_chop(SV* sv, const char* ptr)

=for hackers
Found in file sv.c

=item sv_clear
X<sv_clear>

=begin original

Clear an SV: call any destructors, free up any memory used by the body,
and free the body itself. The SV's head is I<not> freed, although
its type is set to all 1's so that it won't inadvertently be assumed
to be live during global destruction etc.
This function should only be called when REFCNT is zero. Most of the time
you'll want to call C<sv_free()> (or its macro wrapper C<SvREFCNT_dec>)
instead.

=end original

Clear an SV: call any destructors, free up any memory used by the body,
and free the body itself. The SV's head is I<not> freed, although
its type is set to all 1's so that it won't inadvertently be assumed
to be live during global destruction etc.
This function should only be called when REFCNT is zero. Most of the time
you'll want to call C<sv_free()> (or its macro wrapper C<SvREFCNT_dec>)
instead.
(TBT)

	void	sv_clear(SV* sv)

=for hackers
Found in file sv.c

=item sv_cmp
X<sv_cmp>

=begin original

Compares the strings in two SVs.  Returns -1, 0, or 1 indicating whether the
string in C<sv1> is less than, equal to, or greater than the string in
C<sv2>. Is UTF-8 and 'use bytes' aware, handles get magic, and will
coerce its args to strings if necessary.  See also C<sv_cmp_locale>.

=end original

二つの SV にある文字列を比較します。
C<sv1> が C<sv2> より小さいときには -1 を、両者が等しいときには 0 を、
C<sv1> が C<sv2> より大きいときには 1 を返します。
Is UTF-8 and 'use bytes' aware, handles get magic, and will
coerce its args to strings if necessary.  See also C<sv_cmp_locale>.
(TBT)

	I32	sv_cmp(SV* sv1, SV* sv2)

=for hackers
Found in file sv.c

=item sv_cmp_locale
X<sv_cmp_locale>

=begin original

Compares the strings in two SVs in a locale-aware manner. Is UTF-8 and
'use bytes' aware, handles get magic, and will coerce its args to strings
if necessary.  See also C<sv_cmp_locale>.  See also C<sv_cmp>.

=end original

Compares the strings in two SVs in a locale-aware manner. Is UTF-8 and
'use bytes' aware, handles get magic, and will coerce its args to strings
if necessary.  See also C<sv_cmp_locale>.  See also C<sv_cmp>.
(TBT)

	I32	sv_cmp_locale(SV* sv1, SV* sv2)

=for hackers
Found in file sv.c

=item sv_collxfrm
X<sv_collxfrm>

=begin original

Add Collate Transform magic to an SV if it doesn't already have it.

=end original

Add Collate Transform magic to an SV if it doesn't already have it.
(TBT)

=begin original

Any scalar variable may carry PERL_MAGIC_collxfrm magic that contains the
scalar data of the variable, but transformed to such a format that a normal
memory comparison can be used to compare the data according to the locale
settings.

=end original

Any scalar variable may carry PERL_MAGIC_collxfrm magic that contains the
scalar data of the variable, but transformed to such a format that a normal
memory comparison can be used to compare the data according to the locale
settings.
(TBT)

	char*	sv_collxfrm(SV* sv, STRLEN* nxp)

=for hackers
Found in file sv.c

=item sv_copypv
X<sv_copypv>

=begin original

Copies a stringified representation of the source SV into the
destination SV.  Automatically performs any necessary mg_get and
coercion of numeric values into strings.  Guaranteed to preserve
UTF8 flag even from overloaded objects.  Similar in nature to
sv_2pv[_flags] but operates directly on an SV instead of just the
string.  Mostly uses sv_2pv_flags to do its work, except when that
would lose the UTF-8'ness of the PV.

=end original

Copies a stringified representation of the source SV into the
destination SV.  Automatically performs any necessary mg_get and
coercion of numeric values into strings.  Guaranteed to preserve
UTF8 flag even from overloaded objects.  Similar in nature to
sv_2pv[_flags] but operates directly on an SV instead of just the
string.  Mostly uses sv_2pv_flags to do its work, except when that
would lose the UTF-8'ness of the PV.
(TBT)

	void	sv_copypv(SV* dsv, SV* ssv)

=for hackers
Found in file sv.c

=item sv_dec
X<sv_dec>

=begin original

Auto-decrement of the value in the SV, doing string to numeric conversion
if necessary. Handles 'get' magic.

=end original

SV にある値の自動デクリメントを行います;
doing string to numeric conversion
if necessary. Handles 'get' magic.
(TBT)

	void	sv_dec(SV* sv)

=for hackers
Found in file sv.c

=item sv_eq
X<sv_eq>

=begin original

Returns a boolean indicating whether the strings in the two SVs are
identical. Is UTF-8 and 'use bytes' aware, handles get magic, and will
coerce its args to strings if necessary.

=end original

二つの SV にある文字列が同一のものであるかどうかをあらわすブール値を
返します。
Is UTF-8 and 'use bytes' aware, handles get magic, and will
coerce its args to strings if necessary.
(TBT)

	I32	sv_eq(SV* sv1, SV* sv2)

=for hackers
Found in file sv.c

=item sv_force_normal_flags
X<sv_force_normal_flags>

=begin original

Undo various types of fakery on an SV: if the PV is a shared string, make
a private copy; if we're a ref, stop refing; if we're a glob, downgrade to
an xpvmg; if we're a copy-on-write scalar, this is the on-write time when
we do the copy, and is also used locally. If C<SV_COW_DROP_PV> is set
then a copy-on-write scalar drops its PV buffer (if any) and becomes
SvPOK_off rather than making a copy. (Used where this scalar is about to be
set to some other value.) In addition, the C<flags> parameter gets passed to
C<sv_unref_flags()> when unrefing. C<sv_force_normal> calls this function
with flags set to 0.

=end original

Undo various types of fakery on an SV: if the PV is a shared string, make
a private copy; if we're a ref, stop refing; if we're a glob, downgrade to
an xpvmg; if we're a copy-on-write scalar, this is the on-write time when
we do the copy, and is also used locally. If C<SV_COW_DROP_PV> is set
then a copy-on-write scalar drops its PV buffer (if any) and becomes
SvPOK_off rather than making a copy. (Used where this scalar is about to be
set to some other value.) In addition, the C<flags> parameter gets passed to
C<sv_unref_flags()> when unrefing. C<sv_force_normal> calls this function
with flags set to 0.
(TBT)

	void	sv_force_normal_flags(SV *sv, U32 flags)

=for hackers
Found in file sv.c

=item sv_free
X<sv_free>

=begin original

Decrement an SV's reference count, and if it drops to zero, call
C<sv_clear> to invoke destructors and free up any memory used by
the body; finally, deallocate the SV's head itself.
Normally called via a wrapper macro C<SvREFCNT_dec>.

=end original

Decrement an SV's reference count, and if it drops to zero, call
C<sv_clear> to invoke destructors and free up any memory used by
the body; finally, deallocate the SV's head itself.
Normally called via a wrapper macro C<SvREFCNT_dec>.
(TBT)

	void	sv_free(SV* sv)

=for hackers
Found in file sv.c

=item sv_gets
X<sv_gets>

=begin original

Get a line from the filehandle and store it into the SV, optionally
appending to the currently-stored string.

=end original

Get a line from the filehandle and store it into the SV, optionally
appending to the currently-stored string.
(TBT)

	char*	sv_gets(SV* sv, PerlIO* fp, I32 append)

=for hackers
Found in file sv.c

=item sv_grow
X<sv_grow>

=begin original

Expands the character buffer in the SV.  If necessary, uses C<sv_unref> and
upgrades the SV to C<SVt_PV>.  Returns a pointer to the character buffer.
Use the C<SvGROW> wrapper instead.

=end original

SV にある文字バッファを拡張します。
もし必要なら、C<sv_unref> を使用して、SV を C<SVt_PV> へ昇格します。
文字バッファへのポインタを返します。
代わりに C<SvGROW> ラッパーを使用してください。

	char*	sv_grow(SV* sv, STRLEN newlen)

=for hackers
Found in file sv.c

=item sv_inc
X<sv_inc>

=begin original

Auto-increment of the value in the SV, doing string to numeric conversion
if necessary. Handles 'get' magic.

=end original

SV にある値の自動インクリメントを行います;
もし必要なら、文字列から数値への変換を行います。
'get' magic を扱います。

	void	sv_inc(SV* sv)

=for hackers
Found in file sv.c

=item sv_insert
X<sv_insert>

=begin original

Inserts a string at the specified offset/length within the SV. Similar to
the Perl substr() function.

=end original

文字列を、SV 中の指定されたオフセット/長さの位置に挿入します。
Perl の substr() 関数と同様のものです。

	void	sv_insert(SV* bigsv, STRLEN offset, STRLEN len, const char* little, STRLEN littlelen)

=for hackers
Found in file sv.c

=item sv_isa
X<sv_isa>

=begin original

Returns a boolean indicating whether the SV is blessed into the specified
class.  This does not check for subtypes; use C<sv_derived_from> to verify
an inheritance relationship.

=end original

SV が指定したクラスに bless されているかどうかを表わすブール値を
返します。
これは、subtype をどのようにチェックするかを知らないので、
継承関係に確認するのに C<sv_derived_from> を使います。

	int	sv_isa(SV* sv, const char* name)

=for hackers
Found in file sv.c

=item sv_isobject
X<sv_isobject>

=begin original

Returns a boolean indicating whether the SV is an RV pointing to a blessed
object.  If the SV is not an RV, or if the object is not blessed, then this
will return false.

=end original

SV が、bless されているオブジェクトを指す RV であるかどうかを表わす
ブール値を返します。
SV が RV でない場合、もしくはオブジェクトが
bless されていない場合にはこれは false を返します。

	int	sv_isobject(SV* sv)

=for hackers
Found in file sv.c

=item sv_len
X<sv_len>

=begin original

Returns the length of the string in the SV. Handles magic and type
coercion.  See also C<SvCUR>, which gives raw access to the xpv_cur slot.

=end original

SV にある文字列の長さを返します。
C<SvCUR> を使ってください。
Handles magic and type
coercion.  See also C<SvCUR>, which gives raw access to the xpv_cur slot.
(TBT)

	STRLEN	sv_len(SV* sv)

=for hackers
Found in file sv.c

=item sv_len_utf8
X<sv_len_utf8>

=begin original

Returns the number of characters in the string in an SV, counting wide
UTF-8 bytes as a single character. Handles magic and type coercion.

=end original

Returns the number of characters in the string in an SV, counting wide
UTF-8 bytes as a single character. Handles magic and type coercion.
(TBT)

	STRLEN	sv_len_utf8(SV* sv)

=for hackers
Found in file sv.c

=item sv_magic
X<sv_magic>

=begin original

Adds magic to an SV. First upgrades C<sv> to type C<SVt_PVMG> if necessary,
then adds a new magic item of type C<how> to the head of the magic list.

=end original

SV に magic を付加します。
First upgrades C<sv> to type C<SVt_PVMG> if necessary,
then adds a new magic item of type C<how> to the head of the magic list.
(TBT)

=begin original

See C<sv_magicext> (which C<sv_magic> now calls) for a description of the
handling of the C<name> and C<namlen> arguments.

=end original

See C<sv_magicext> (which C<sv_magic> now calls) for a description of the
handling of the C<name> and C<namlen> arguments.
(TBT)

=begin original

You need to use C<sv_magicext> to add magic to SvREADONLY SVs and also
to add more than one instance of the same 'how'.

=end original

You need to use C<sv_magicext> to add magic to SvREADONLY SVs and also
to add more than one instance of the same 'how'.
(TBT)

	void	sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen)

=for hackers
Found in file sv.c

=item sv_magicext
X<sv_magicext>

=begin original

Adds magic to an SV, upgrading it if necessary. Applies the
supplied vtable and returns a pointer to the magic added.

=end original

Adds magic to an SV, upgrading it if necessary. Applies the
supplied vtable and returns a pointer to the magic added.
(TBT)

=begin original

Note that C<sv_magicext> will allow things that C<sv_magic> will not.
In particular, you can add magic to SvREADONLY SVs, and add more than
one instance of the same 'how'.

=end original

Note that C<sv_magicext> will allow things that C<sv_magic> will not.
In particular, you can add magic to SvREADONLY SVs, and add more than
one instance of the same 'how'.
(TBT)

=begin original

If C<namlen> is greater than zero then a C<savepvn> I<copy> of C<name> is
stored, if C<namlen> is zero then C<name> is stored as-is and - as another
special case - if C<(name && namlen == HEf_SVKEY)> then C<name> is assumed
to contain an C<SV*> and is stored as-is with its REFCNT incremented.

=end original

If C<namlen> is greater than zero then a C<savepvn> I<copy> of C<name> is
stored, if C<namlen> is zero then C<name> is stored as-is and - as another
special case - if C<(name && namlen == HEf_SVKEY)> then C<name> is assumed
to contain an C<SV*> and is stored as-is with its REFCNT incremented.
(TBT)

=begin original

(This is now used as a subroutine by C<sv_magic>.)

=end original

(これは今では C<sv_magic> によってサブルーチンとして使われます。)

	MAGIC *	sv_magicext(SV* sv, SV* obj, int how, const MGVTBL *vtbl, const char* name, I32 namlen)

l=for hackers
Found in file sv.c

=item sv_mortalcopy
X<sv_mortalcopy>

=begin original

Creates a new SV which is a copy of the original SV (using C<sv_setsv>).
The new SV is marked as mortal. It will be destroyed "soon", either by an
explicit call to FREETMPS, or by an implicit call at places such as
statement boundaries.  See also C<sv_newmortal> and C<sv_2mortal>.

=end original

(C<sv_setsv> を使って)元の SV のコピーである、新しい SV を生成します。
生成された SV は揮発性である目印が付けられます。
It will be destroyed "soon", either by an
explicit call to FREETMPS, or by an implicit call at places such as
statement boundaries.  See also C<sv_newmortal> and C<sv_2mortal>.
(TBT)

	SV*	sv_mortalcopy(SV* oldsv)

=for hackers
Found in file sv.c

=item sv_newmortal
X<sv_newmortal>

=begin original

Creates a new null SV which is mortal.  The reference count of the SV is
set to 1. It will be destroyed "soon", either by an explicit call to
FREETMPS, or by an implicit call at places such as statement boundaries.
See also C<sv_mortalcopy> and C<sv_2mortal>.

=end original

揮発性である新たな null SV を生成します。
新たに作られた SV の参照カウントは 1 にセットされます。
It will be destroyed "soon", either by an explicit call to
FREETMPS, or by an implicit call at places such as statement boundaries.
See also C<sv_mortalcopy> and C<sv_2mortal>.
(TBT)

	SV*	sv_newmortal()

=for hackers
Found in file sv.c

=item sv_newref
X<sv_newref>

=begin original

Increment an SV's reference count. Use the C<SvREFCNT_inc()> wrapper
instead.

=end original

SV の参照カウントをインクリメントします。
代わりに C<SvREFCNT_inc()> ラッパーを使ってください。

	SV*	sv_newref(SV* sv)

=for hackers
Found in file sv.c

=item sv_pos_b2u
X<sv_pos_b2u>

=begin original

Converts the value pointed to by offsetp from a count of bytes from the
start of the string, to a count of the equivalent number of UTF-8 chars.
Handles magic and type coercion.

=end original

Converts the value pointed to by offsetp from a count of bytes from the
start of the string, to a count of the equivalent number of UTF-8 chars.
Handles magic and type coercion.
(TBT)

	void	sv_pos_b2u(SV* sv, I32* offsetp)

=for hackers
Found in file sv.c

=item sv_pos_u2b
X<sv_pos_u2b>

=begin original

Converts the value pointed to by offsetp from a count of UTF-8 chars from
the start of the string, to a count of the equivalent number of bytes; if
lenp is non-zero, it does the same to lenp, but this time starting from
the offset, rather than from the start of the string. Handles magic and
type coercion.

=end original

Converts the value pointed to by offsetp from a count of UTF-8 chars from
the start of the string, to a count of the equivalent number of bytes; if
lenp is non-zero, it does the same to lenp, but this time starting from
the offset, rather than from the start of the string. Handles magic and
type coercion.
(TBT)

	void	sv_pos_u2b(SV* sv, I32* offsetp, I32* lenp)

=for hackers
Found in file sv.c

=item sv_pvbyten_force
X<sv_pvbyten_force>

=begin original

The backend for the C<SvPVbytex_force> macro. Always use the macro instead.

=end original

C<SvPVbytex_force> マクロのバックエンドです。
代わりに、常にマクロを使ってください。

	char*	sv_pvbyten_force(SV* sv, STRLEN* lp)

=for hackers
Found in file sv.c

=item sv_pvn_force
X<sv_pvn_force>

=begin original

Get a sensible string out of the SV somehow.
A private implementation of the C<SvPV_force> macro for compilers which
can't cope with complex macro expressions. Always use the macro instead.

=end original

Get a sensible string out of the SV somehow.
複雑なマクロ式を扱えないコンパイラのための、C<SvPV_force> マクロの
プライベート実装です。
代わりに、常にマクロを使ってください。
(TBT)

	char*	sv_pvn_force(SV* sv, STRLEN* lp)

=for hackers
Found in file sv.c

=item sv_pvn_force_flags
X<sv_pvn_force_flags>

=begin original

Get a sensible string out of the SV somehow.
If C<flags> has C<SV_GMAGIC> bit set, will C<mg_get> on C<sv> if
appropriate, else not. C<sv_pvn_force> and C<sv_pvn_force_nomg> are
implemented in terms of this function.
You normally want to use the various wrapper macros instead: see
C<SvPV_force> and C<SvPV_force_nomg>

=end original

Get a sensible string out of the SV somehow.
If C<flags> has C<SV_GMAGIC> bit set, will C<mg_get> on C<sv> if
appropriate, else not. C<sv_pvn_force> and C<sv_pvn_force_nomg> are
implemented in terms of this function.
You normally want to use the various wrapper macros instead: see
C<SvPV_force> and C<SvPV_force_nomg>
(TBT)

	char*	sv_pvn_force_flags(SV* sv, STRLEN* lp, I32 flags)

=for hackers
Found in file sv.c

=item sv_pvutf8n_force
X<sv_pvutf8n_force>

=begin original

The backend for the C<SvPVutf8x_force> macro. Always use the macro instead.

=end original

C<SvPVutf8x_force> マクロのバックエンドです。
代わりに、常にマクロを使ってください。

	char*	sv_pvutf8n_force(SV* sv, STRLEN* lp)

=for hackers
Found in file sv.c

=item sv_reftype
X<sv_reftype>

=begin original

Returns a string describing what the SV is a reference to.

=end original

Returns a string describing what the SV is a reference to.
(TBT)

	const char*	sv_reftype(const SV* sv, int ob)

=for hackers
Found in file sv.c

=item sv_replace
X<sv_replace>

=begin original

Make the first argument a copy of the second, then delete the original.
The target SV physically takes over ownership of the body of the source SV
and inherits its flags; however, the target keeps any magic it owns,
and any magic in the source is discarded.
Note that this is a rather specialist SV copying operation; most of the
time you'll want to use C<sv_setsv> or one of its many macro front-ends.

=end original

Make the first argument a copy of the second, then delete the original.
The target SV physically takes over ownership of the body of the source SV
and inherits its flags; however, the target keeps any magic it owns,
and any magic in the source is discarded.
Note that this is a rather specialist SV copying operation; most of the
time you'll want to use C<sv_setsv> or one of its many macro front-ends.
(TBT)

	void	sv_replace(SV* sv, SV* nsv)

=for hackers
Found in file sv.c

=item sv_reset
X<sv_reset>

=begin original

Underlying implementation for the C<reset> Perl function.
Note that the perl-level function is vaguely deprecated.

=end original

Underlying implementation for the C<reset> Perl function.
Note that the perl-level function is vaguely deprecated.
(TBT)

	void	sv_reset(const char* s, HV* stash)

=for hackers
Found in file sv.c

=item sv_rvweaken
X<sv_rvweaken>

=begin original

Weaken a reference: set the C<SvWEAKREF> flag on this RV; give the
referred-to SV C<PERL_MAGIC_backref> magic if it hasn't already; and
push a back-reference to this RV onto the array of backreferences
associated with that magic. If the RV is magical, set magic will be
called after the RV is cleared.

=end original

Weaken a reference: set the C<SvWEAKREF> flag on this RV; give the
referred-to SV C<PERL_MAGIC_backref> magic if it hasn't already; and
push a back-reference to this RV onto the array of backreferences
associated with that magic. If the RV is magical, set magic will be
called after the RV is cleared.
(TBT)

	SV*	sv_rvweaken(SV *sv)

=for hackers
Found in file sv.c

=item sv_setiv
X<sv_setiv>

=begin original

Copies an integer into the given SV, upgrading first if necessary.
Does not handle 'set' magic.  See also C<sv_setiv_mg>.

=end original

整数を与えられた SV へコピーします;
必要なら最初に昇格します。
'set' magic をハンドルしません。
C<sv_setiv_mg> も参照してください。

	void	sv_setiv(SV* sv, IV num)

=for hackers
Found in file sv.c

=item sv_setiv_mg
X<sv_setiv_mg>

=begin original

Like C<sv_setiv>, but also handles 'set' magic.

=end original

C<sv_setiv> と同様ですが、'set' magic をハンドルします。

	void	sv_setiv_mg(SV *sv, IV i)

=for hackers
Found in file sv.c

=item sv_setnv
X<sv_setnv>

=begin original

Copies a double into the given SV, upgrading first if necessary.
Does not handle 'set' magic.  See also C<sv_setnv_mg>.

=end original

倍精度浮動小数点数を与えられた SV へコピーします;
必要なら最初に昇格します。
'set' magicをハンドルしません。
C<sv_setnv_mg> も参照してください。

	void	sv_setnv(SV* sv, NV num)

=for hackers
Found in file sv.c

=item sv_setnv_mg
X<sv_setnv_mg>

=begin original

Like C<sv_setnv>, but also handles 'set' magic.

=end original

C<sv_setnv> と同様ですが、'set' magic をハンドルします。

	void	sv_setnv_mg(SV *sv, NV num)

=for hackers
Found in file sv.c

=item sv_setpv
X<sv_setpv>

=begin original

Copies a string into an SV.  The string must be null-terminated.  Does not
handle 'set' magic.  See C<sv_setpv_mg>.

=end original

文字列を SV へコピーします。
文字列は null で終端されていなければなりません。
これは 'set' magic をハンドルしません。
C<sv_setpv_mg> を参照してください。

	void	sv_setpv(SV* sv, const char* ptr)

=for hackers
Found in file sv.c

=item sv_setpvf
X<sv_setpvf>

=begin original

Works like C<sv_catpvf> but copies the text into the SV instead of
appending it.  Does not handle 'set' magic.  See C<sv_setpvf_mg>.

=end original

Works like C<sv_catpvf> but copies the text into the SV instead of
appending it.
'set' magic をハンドルしません。
C<sv_setpvf_mg> を参照してください。
(TBT)

	void	sv_setpvf(SV* sv, const char* pat, ...)

=for hackers
Found in file sv.c

=item sv_setpvf_mg
X<sv_setpvf_mg>

=begin original

Like C<sv_setpvf>, but also handles 'set' magic.

=end original

C<sv_setpvf> と同様ですが、'set' magic をハンドルします。

	void	sv_setpvf_mg(SV *sv, const char* pat, ...)

=for hackers
Found in file sv.c

=item sv_setpviv
X<sv_setpviv>

=begin original

Copies an integer into the given SV, also updating its string value.
Does not handle 'set' magic.  See C<sv_setpviv_mg>.

=end original

整数値を与えられた SV をコピーし、同様にその文字列値を更新します。
'set' magic をハンドルしません。
C<sv_setpviv_mg> を参照してください。

	void	sv_setpviv(SV* sv, IV num)

=for hackers
Found in file sv.c

=item sv_setpviv_mg
X<sv_setpviv_mg>

=begin original

Like C<sv_setpviv>, but also handles 'set' magic.

=end original

C<sv_setpviv> と同様ですが、'set' magic をハンドルします。

	void	sv_setpviv_mg(SV *sv, IV iv)

=for hackers
Found in file sv.c

=item sv_setpvn
X<sv_setpvn>

=begin original

Copies a string into an SV.  The C<len> parameter indicates the number of
bytes to be copied.  If the C<ptr> argument is NULL the SV will become
undefined.  Does not handle 'set' magic.  See C<sv_setpvn_mg>.

=end original

文字列を SV へコピーします。
パラメーター C<len> はコピーされるバイト数を指示します。
If the C<ptr> argument is NULL the SV will become
undefined.
'set' magic をハンドルしません。
C<sv_setpvn_mg> を参照してください。
(TBT)

	void	sv_setpvn(SV* sv, const char* ptr, STRLEN len)

=for hackers
Found in file sv.c

=item sv_setpvn_mg
X<sv_setpvn_mg>

=begin original

Like C<sv_setpvn>, but also handles 'set' magic.

=end original

C<sv_setpvn> と同様ですが、'set' magic をハンドルします。

	void	sv_setpvn_mg(SV *sv, const char *ptr, STRLEN len)

=for hackers
Found in file sv.c

=item sv_setpvs
X<sv_setpvs>

=begin original

Like C<sv_setpvn>, but takes a literal string instead of a string/length pair.

=end original

C<sv_setpvn> と同様ですが、文字列/長さの組ではなく、リテラルな文字列を
取ります。

	void	sv_setpvs(SV* sv, const char* s)

=for hackers
Found in file handy.h

=item sv_setpv_mg
X<sv_setpv_mg>

=begin original

Like C<sv_setpv>, but also handles 'set' magic.

=end original

C<sv_setpv> と同様ですが、'set' magic をハンドルします。

	void	sv_setpv_mg(SV *sv, const char *ptr)

=for hackers
Found in file sv.c

=item sv_setref_iv
X<sv_setref_iv>

=begin original

Copies an integer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

=end original

整数値を、bless することもできる新たな SV へコピーします。
引数 C<rv> は RV へと昇格し、このRVは新たな SV を指し示すように
変更されます。
引数 C<classname> は bless するパッケージを指示するものです。
bless をしないためには、C<classname> に C<NULL> をセットします。
新しい SV の参照カウントは 1 となり、RV が返されます。

	SV*	sv_setref_iv(SV* rv, const char* classname, IV iv)

=for hackers
Found in file sv.c

=item sv_setref_nv
X<sv_setref_nv>

=begin original

Copies a double into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

=end original

倍精度実数値を、bless することもできる新たな SV へコピーします。
引数 C<rv> は RV へと昇格し、新たな SV を指し示すように変更されます。
引数 C<classname> は bless するパッケージを指示するものです。
bless をしないためには、C<classname> に C<NULL> をセットします。
新しい SV の参照カウントは 1 となり、RV が返されます。

	SV*	sv_setref_nv(SV* rv, const char* classname, NV nv)

=for hackers
Found in file sv.c

=item sv_setref_pv
X<sv_setref_pv>

=begin original

Copies a pointer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  If the C<pv> argument is NULL then C<PL_sv_undef> will be placed
into the SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

=end original

ポインタを、bless することもできる新たな SV へコピーします。
引数 C<rv> は RV へと昇格し、新たなSVを指し示すように変更されます。
引数 C<pv> が NULL であれば、C<PL_sv_undef> が新たな SV に格納されます。
引数 C<classname> は bless するパッケージを指示するものです。
bless をしないためには、C<classname> に C<NULL> をセットします。
新しい SV の参照カウントは 1 となり、RV が返されます。

=begin original

Do not use with other Perl types such as HV, AV, SV, CV, because those
objects will become corrupted by the pointer copy process.

=end original

HV, AV, SV, CV のような Perl の他の type を使わないようにしてください。
これは、そういったオブジェクトにポインタのコピー処理を
行うことでおかしくなってしまうからです。

=begin original

Note that C<sv_setref_pvn> copies the string while this copies the pointer.

=end original

C<sv_setref_pvn> は、このポインタのコピーではなく文字列を
コピーしているということに注意してください。

	SV*	sv_setref_pv(SV* rv, const char* classname, void* pv)

=for hackers
Found in file sv.c

=item sv_setref_pvn
X<sv_setref_pvn>

=begin original

Copies a string into a new SV, optionally blessing the SV.  The length of the
string must be specified with C<n>.  The C<rv> argument will be upgraded to
an RV.  That RV will be modified to point to the new SV.  The C<classname>
argument indicates the package for the blessing.  Set C<classname> to
C<NULL> to avoid the blessing.  The new SV will have a reference count
of 1, and the RV will be returned.

=end original

文字列を、bless することもできる新たな SV へコピーします。
文字列の長さを C<n> で指定しなければなりません。
引数 C<rv> は RV へと昇格し、新たな SV を指し示すように変更されます。
引数 C<classname> は bless するパッケージを指示するものです。
bless をしないためには、C<classname> に C<NULL> をセットします。
新しい SV の参照カウントは 1 となり、RV が返されます。


=begin original

Note that C<sv_setref_pv> copies the pointer while this copies the string.

=end original

C<sv_setref_pv> は、文字列をコピーするのではなくポインタを
コピーするということに注意してください。

	SV*	sv_setref_pvn(SV* rv, const char* classname, const char* pv, STRLEN n)

=for hackers
Found in file sv.c

=item sv_setref_uv
X<sv_setref_uv>

=begin original

Copies an unsigned integer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

=end original

Copies an unsigned integer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.
(TBT)

	SV*	sv_setref_uv(SV* rv, const char* classname, UV uv)

=for hackers
Found in file sv.c

=item sv_setsv
X<sv_setsv>

=begin original

Copies the contents of the source SV C<ssv> into the destination SV
C<dsv>.  The source SV may be destroyed if it is mortal, so don't use this
function if the source SV needs to be reused. Does not handle 'set' magic.
Loosely speaking, it performs a copy-by-value, obliterating any previous
content of the destination.

=end original

送り元の SV C<ssv> の内容を、送り先の SV C<dsv> にコピーします。
送り元の SV は、それが揮発性であった場合には破棄されるかもしれません;
so don't use this
function if the source SV needs to be reused.
'set' magic をハンドルしません。
Loosely speaking, it performs a copy-by-value, obliterating any previous
content of the destination.
(TBT)

=begin original

You probably want to use one of the assortment of wrappers, such as
C<SvSetSV>, C<SvSetSV_nosteal>, C<SvSetMagicSV> and
C<SvSetMagicSV_nosteal>.

=end original

You probably want to use one of the assortment of wrappers, such as
C<SvSetSV>, C<SvSetSV_nosteal>, C<SvSetMagicSV> and
C<SvSetMagicSV_nosteal>.
(TBT)

	void	sv_setsv(SV* dsv, SV* ssv)

=for hackers
Found in file sv.c

=item sv_setsv_flags
X<sv_setsv_flags>

=begin original

Copies the contents of the source SV C<ssv> into the destination SV
C<dsv>.  The source SV may be destroyed if it is mortal, so don't use this
function if the source SV needs to be reused. Does not handle 'set' magic.
Loosely speaking, it performs a copy-by-value, obliterating any previous
content of the destination.
If the C<flags> parameter has the C<SV_GMAGIC> bit set, will C<mg_get> on
C<ssv> if appropriate, else not. If the C<flags> parameter has the
C<NOSTEAL> bit set then the buffers of temps will not be stolen. <sv_setsv>
and C<sv_setsv_nomg> are implemented in terms of this function.

=end original

Copies the contents of the source SV C<ssv> into the destination SV
C<dsv>.  The source SV may be destroyed if it is mortal, so don't use this
function if the source SV needs to be reused. Does not handle 'set' magic.
Loosely speaking, it performs a copy-by-value, obliterating any previous
content of the destination.
If the C<flags> parameter has the C<SV_GMAGIC> bit set, will C<mg_get> on
C<ssv> if appropriate, else not. If the C<flags> parameter has the
C<NOSTEAL> bit set then the buffers of temps will not be stolen. <sv_setsv>
and C<sv_setsv_nomg> are implemented in terms of this function.
(TBT)

=begin original

You probably want to use one of the assortment of wrappers, such as
C<SvSetSV>, C<SvSetSV_nosteal>, C<SvSetMagicSV> and
C<SvSetMagicSV_nosteal>.

=end original

You probably want to use one of the assortment of wrappers, such as
C<SvSetSV>, C<SvSetSV_nosteal>, C<SvSetMagicSV> and
C<SvSetMagicSV_nosteal>.
(TBT)

=begin original

This is the primary function for copying scalars, and most other
copy-ish functions and macros use this underneath.

=end original

This is the primary function for copying scalars, and most other
copy-ish functions and macros use this underneath.
(TBT)

	void	sv_setsv_flags(SV* dsv, SV* ssv, I32 flags)

=for hackers
Found in file sv.c

=item sv_setsv_mg
X<sv_setsv_mg>

=begin original

Like C<sv_setsv>, but also handles 'set' magic.

=end original

C<sv_setsv> と同様ですが、'set' magic をハンドルします。

	void	sv_setsv_mg(SV *dstr, SV *sstr)

=for hackers
Found in file sv.c

=item sv_setuv
X<sv_setuv>

=begin original

Copies an unsigned integer into the given SV, upgrading first if necessary.
Does not handle 'set' magic.  See also C<sv_setuv_mg>.

=end original

符号なし整数を与えられた SV へコピーします;
upgrading first if necessary.
'set' magic をハンドルしません。
C<sv_setuv_mg> も参照してください。
(TBT)

	void	sv_setuv(SV* sv, UV num)

=for hackers
Found in file sv.c

=item sv_setuv_mg
X<sv_setuv_mg>

=begin original

Like C<sv_setuv>, but also handles 'set' magic.

=end original

C<sv_setsv> と同様ですが、'set' magic をハンドルします。

	void	sv_setuv_mg(SV *sv, UV u)

=for hackers
Found in file sv.c

=item sv_tainted
X<sv_tainted>

=begin original

Test an SV for taintedness. Use C<SvTAINTED> instead.

=end original

SV の汚染を調べます。
代わりに C<SvTAINTED> を使ってください。

	bool	sv_tainted(SV* sv)

=for hackers
Found in file sv.c

=item sv_true
X<sv_true>

=begin original

Returns true if the SV has a true value by Perl's rules.
Use the C<SvTRUE> macro instead, which may call C<sv_true()> or may
instead use an in-line version.

=end original

Returns true if the SV has a true value by Perl's rules.
Use the C<SvTRUE> macro instead, which may call C<sv_true()> or may
instead use an in-line version.
(TBT)

	I32	sv_true(SV *sv)

=for hackers
Found in file sv.c

=item sv_unmagic
X<sv_unmagic>

=begin original

Removes all magic of type C<type> from an SV.

=end original

SV から C<type> 型の全ての magic を取り除きます。

	int	sv_unmagic(SV* sv, int type)

=for hackers
Found in file sv.c

=item sv_unref_flags
X<sv_unref_flags>

=begin original

Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of C<newSVrv>.  The C<cflags> argument can contain
C<SV_IMMEDIATE_UNREF> to force the reference count to be decremented
(otherwise the decrementing is conditional on the reference count being
different from one or the reference being a readonly SV).
See C<SvROK_off>.

=end original

Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of C<newSVrv>.  The C<cflags> argument can contain
C<SV_IMMEDIATE_UNREF> to force the reference count to be decremented
(otherwise the decrementing is conditional on the reference count being
different from one or the reference being a readonly SV).
See C<SvROK_off>.
(TBT)

	void	sv_unref_flags(SV* sv, U32 flags)

=for hackers
Found in file sv.c

=item sv_untaint
X<sv_untaint>

=begin original

Untaint an SV. Use C<SvTAINTED_off> instead.
	void	sv_untaint(SV* sv)

=for hackers
Found in file sv.c

=item sv_upgrade
X<sv_upgrade>

=begin original

Upgrade an SV to a more complex form.  Generally adds a new body type to the
SV, then copies across as much information as possible from the old body.
You generally want to use the C<SvUPGRADE> macro wrapper. See also C<svtype>.

=end original

SV をより複雑な形式へと昇格させます。
Generally adds a new body type to the
SV, then copies across as much information as possible from the old body.
You generally want to use the C<SvUPGRADE> macro wrapper.
C<svtype> も参照してください。
(TBT)

	void	sv_upgrade(SV* sv, svtype new_type)

=for hackers
Found in file sv.c

=item sv_usepvn_flags
X<sv_usepvn_flags>

=begin original

Tells an SV to use C<ptr> to find its string value.  Normally the
string is stored inside the SV but sv_usepvn allows the SV to use an
outside string.  The C<ptr> should point to memory that was allocated
by C<malloc>.  The string length, C<len>, must be supplied.  By default
this function will realloc (i.e. move) the memory pointed to by C<ptr>,
so that pointer should not be freed or used by the programmer after
giving it to sv_usepvn, and neither should any pointers from "behind"
that pointer (e.g. ptr + 1) be used.

=end original

Tells an SV to use C<ptr> to find its string value.  Normally the
string is stored inside the SV but sv_usepvn allows the SV to use an
outside string.  The C<ptr> should point to memory that was allocated
by C<malloc>.  The string length, C<len>, must be supplied.  By default
this function will realloc (i.e. move) the memory pointed to by C<ptr>,
so that pointer should not be freed or used by the programmer after
giving it to sv_usepvn, and neither should any pointers from "behind"
that pointer (e.g. ptr + 1) be used.
(TBT)

=begin original

If C<flags> & SV_SMAGIC is true, will call SvSETMAGIC. If C<flags> &
SV_HAS_TRAILING_NUL is true, then C<ptr[len]> must be NUL, and the realloc
will be skipped. (i.e. the buffer is actually at least 1 byte longer than
C<len>, and already meets the requirements for storing in C<SvPVX>)

=end original

If C<flags> & SV_SMAGIC is true, will call SvSETMAGIC. If C<flags> &
SV_HAS_TRAILING_NUL is true, then C<ptr[len]> must be NUL, and the realloc
will be skipped. (i.e. the buffer is actually at least 1 byte longer than
C<len>, and already meets the requirements for storing in C<SvPVX>)
(TBT)

	void	sv_usepvn_flags(SV* sv, char* ptr, STRLEN len, U32 flags)

=for hackers
Found in file sv.c

=item sv_utf8_decode
X<sv_utf8_decode>

=begin original

If the PV of the SV is an octet sequence in UTF-8
and contains a multiple-byte character, the C<SvUTF8> flag is turned on
so that it looks like a character. If the PV contains only single-byte
characters, the C<SvUTF8> flag stays being off.
Scans PV for validity and returns false if the PV is invalid UTF-8.

=end original

If the PV of the SV is an octet sequence in UTF-8
and contains a multiple-byte character, the C<SvUTF8> flag is turned on
so that it looks like a character. If the PV contains only single-byte
characters, the C<SvUTF8> flag stays being off.
Scans PV for validity and returns false if the PV is invalid UTF-8.
(TBT)

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	bool	sv_utf8_decode(SV *sv)

=for hackers
Found in file sv.c

=item sv_utf8_downgrade
X<sv_utf8_downgrade>

=begin original

Attempts to convert the PV of an SV from characters to bytes.
If the PV contains a character beyond byte, this conversion will fail;
in this case, either returns false or, if C<fail_ok> is not
true, croaks.

=end original

Attempts to convert the PV of an SV from characters to bytes.
If the PV contains a character beyond byte, this conversion will fail;
in this case, either returns false or, if C<fail_ok> is not
true, croaks.
(TBT)

=begin original

This is not as a general purpose Unicode to byte encoding interface:
use the Encode extension for that.

=end original

This is not as a general purpose Unicode to byte encoding interface:
use the Encode extension for that.
(TBT)

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	bool	sv_utf8_downgrade(SV *sv, bool fail_ok)

=for hackers
Found in file sv.c

=item sv_utf8_encode
X<sv_utf8_encode>

=begin original

Converts the PV of an SV to UTF-8, but then turns the C<SvUTF8>
flag off so that it looks like octets again.

=end original

Converts the PV of an SV to UTF-8, but then turns the C<SvUTF8>
flag off so that it looks like octets again.
(TBT)

	void	sv_utf8_encode(SV *sv)

=for hackers
Found in file sv.c

=item sv_utf8_upgrade
X<sv_utf8_upgrade>

=begin original

Converts the PV of an SV to its UTF-8-encoded form.
Forces the SV to string form if it is not already.
Always sets the SvUTF8 flag to avoid future validity checks even
if all the bytes have hibit clear.

=end original

Converts the PV of an SV to its UTF-8-encoded form.
Forces the SV to string form if it is not already.
Always sets the SvUTF8 flag to avoid future validity checks even
if all the bytes have hibit clear.
(TBT)

=begin original

This is not as a general purpose byte encoding to Unicode interface:
use the Encode extension for that.

=end original

This is not as a general purpose byte encoding to Unicode interface:
use the Encode extension for that.
(TBT)

	STRLEN	sv_utf8_upgrade(SV *sv)

=for hackers
Found in file sv.c

=item sv_utf8_upgrade_flags
X<sv_utf8_upgrade_flags>

=begin original

Converts the PV of an SV to its UTF-8-encoded form.
Forces the SV to string form if it is not already.
Always sets the SvUTF8 flag to avoid future validity checks even
if all the bytes have hibit clear. If C<flags> has C<SV_GMAGIC> bit set,
will C<mg_get> on C<sv> if appropriate, else not. C<sv_utf8_upgrade> and
C<sv_utf8_upgrade_nomg> are implemented in terms of this function.

=end original

Converts the PV of an SV to its UTF-8-encoded form.
Forces the SV to string form if it is not already.
Always sets the SvUTF8 flag to avoid future validity checks even
if all the bytes have hibit clear. If C<flags> has C<SV_GMAGIC> bit set,
will C<mg_get> on C<sv> if appropriate, else not. C<sv_utf8_upgrade> and
C<sv_utf8_upgrade_nomg> are implemented in terms of this function.
(TBT)

=begin original

This is not as a general purpose byte encoding to Unicode interface:
use the Encode extension for that.

=end original

This is not as a general purpose byte encoding to Unicode interface:
use the Encode extension for that.
(TBT)

	STRLEN	sv_utf8_upgrade_flags(SV *sv, I32 flags)

=for hackers
Found in file sv.c

=item sv_vcatpvf
X<sv_vcatpvf>

=begin original

Processes its arguments like C<vsprintf> and appends the formatted output
to an SV.  Does not handle 'set' magic.  See C<sv_vcatpvf_mg>.

=end original

Processes its arguments like C<vsprintf> and appends the formatted output
to an SV.  Does not handle 'set' magic.  See C<sv_vcatpvf_mg>.
(TBT)

=begin original

Usually used via its frontend C<sv_catpvf>.

=end original

普通はフロントエンドである C<sv_catpvf> 経由で使われます。

	void	sv_vcatpvf(SV* sv, const char* pat, va_list* args)

=for hackers
Found in file sv.c

=item sv_vcatpvfn
X<sv_vcatpvfn>

=begin original

Processes its arguments like C<vsprintf> and appends the formatted output
to an SV.  Uses an array of SVs if the C style variable argument list is
missing (NULL).  When running with taint checks enabled, indicates via
C<maybe_tainted> if results are untrustworthy (often due to the use of
locales).

=end original

C<vsprintf> と同様にその引数を処理し、SV にフォーマット済み出力を
追加します。
C スタイルの変数引数リストがない(NULL)場合には Sv の配列を使用します。
When running with taint checks enabled, indicates via
C<maybe_tainted> if results are untrustworthy (often due to the use of
locales).
(TBT)

=begin original

Usually used via one of its frontends C<sv_vcatpvf> and C<sv_vcatpvf_mg>.

=end original

普通はフロントエンドである C<sv_vcatpvf> や C<sv_vcatpvf_mg> 経由で
使われます。

	void	sv_vcatpvfn(SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)

=for hackers
Found in file sv.c

=item sv_vcatpvf_mg
X<sv_vcatpvf_mg>

=begin original

Like C<sv_vcatpvf>, but also handles 'set' magic.

=end original

C<sv_vcatpvf> と同様ですが、'set' magic をハンドルします。

=begin original

Usually used via its frontend C<sv_catpvf_mg>.

=end original

普通はフロントエンドである C<sv_catpvf_mg> 経由で使われます。

	void	sv_vcatpvf_mg(SV* sv, const char* pat, va_list* args)

=for hackers
Found in file sv.c

=item sv_vsetpvf
X<sv_vsetpvf>

=begin original

Works like C<sv_vcatpvf> but copies the text into the SV instead of
appending it.  Does not handle 'set' magic.  See C<sv_vsetpvf_mg>.

=end original

Works like C<sv_vcatpvf> but copies the text into the SV instead of
appending it.  Does not handle 'set' magic.  See C<sv_vsetpvf_mg>.
(TBT)

=begin original

Usually used via its frontend C<sv_setpvf>.

=end original

普通はフロントエンドである C<sv_setpvf> 経由で使われます。

	void	sv_vsetpvf(SV* sv, const char* pat, va_list* args)

=for hackers
Found in file sv.c

=item sv_vsetpvfn
X<sv_vsetpvfn>

=begin original

Works like C<sv_vcatpvfn> but copies the text into the SV instead of
appending it.

=end original

C<vatpvfn> のように動作しますが、SV にテキストを追加するのではなく
コピーします。

=begin original

Usually used via one of its frontends C<sv_vsetpvf> and C<sv_vsetpvf_mg>.

=end original

普通はフロントエンドである C<sv_vsetpvf> や C<sv_vsetpvf_mg> 経由で
使われます。

	void	sv_vsetpvfn(SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)

=for hackers
Found in file sv.c

=item sv_vsetpvf_mg
X<sv_vsetpvf_mg>

=begin original

Like C<sv_vsetpvf>, but also handles 'set' magic.

=end original

C<sv_vsetpvf> と同様ですが、'set' magic をハンドルします。

=begin original

Usually used via its frontend C<sv_setpvf_mg>.

=end original

普通はフロントエンドである C<sv_setpvf_mg> 経由で使われます。

	void	sv_vsetpvf_mg(SV* sv, const char* pat, va_list* args)

=for hackers
Found in file sv.c

=back

=head1 Unicode Support

=over 8

=item bytes_from_utf8
X<bytes_from_utf8>

=begin original

Converts a string C<s> of length C<len> from UTF-8 into byte encoding.
Unlike C<utf8_to_bytes> but like C<bytes_to_utf8>, returns a pointer to
the newly-created string, and updates C<len> to contain the new
length.  Returns the original string if no conversion occurs, C<len>
is unchanged. Do nothing if C<is_utf8> points to 0. Sets C<is_utf8> to
0 if C<s> is converted or contains all 7bit characters.

=end original

Converts a string C<s> of length C<len> from UTF-8 into byte encoding.
Unlike C<utf8_to_bytes> but like C<bytes_to_utf8>, returns a pointer to
the newly-created string, and updates C<len> to contain the new
length.  Returns the original string if no conversion occurs, C<len>
is unchanged. Do nothing if C<is_utf8> points to 0. Sets C<is_utf8> to
0 if C<s> is converted or contains all 7bit characters.
(TBT)

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	U8*	bytes_from_utf8(const U8 *s, STRLEN *len, bool *is_utf8)

=for hackers
Found in file utf8.c

=item bytes_to_utf8
X<bytes_to_utf8>

=begin original

Converts a string C<s> of length C<len> from ASCII into UTF-8 encoding.
Returns a pointer to the newly-created string, and sets C<len> to
reflect the new length.

=end original

Converts a string C<s> of length C<len> from ASCII into UTF-8 encoding.
Returns a pointer to the newly-created string, and sets C<len> to
reflect the new length.
(TBT)

=begin original

If you want to convert to UTF-8 from other encodings than ASCII,
see sv_recode_to_utf8().

=end original

If you want to convert to UTF-8 from other encodings than ASCII,
see sv_recode_to_utf8().
(TBT)

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	U8*	bytes_to_utf8(const U8 *s, STRLEN *len)

=for hackers
Found in file utf8.c

=item ibcmp_utf8
X<ibcmp_utf8>

=begin original

Return true if the strings s1 and s2 differ case-insensitively, false
if not (if they are equal case-insensitively).  If u1 is true, the
string s1 is assumed to be in UTF-8-encoded Unicode.  If u2 is true,
the string s2 is assumed to be in UTF-8-encoded Unicode.  If u1 or u2
are false, the respective string is assumed to be in native 8-bit
encoding.

=end original

Return true if the strings s1 and s2 differ case-insensitively, false
if not (if they are equal case-insensitively).  If u1 is true, the
string s1 is assumed to be in UTF-8-encoded Unicode.  If u2 is true,
the string s2 is assumed to be in UTF-8-encoded Unicode.  If u1 or u2
are false, the respective string is assumed to be in native 8-bit
encoding.
(TBT)

=begin original

If the pe1 and pe2 are non-NULL, the scanning pointers will be copied
in there (they will point at the beginning of the I<next> character).
If the pointers behind pe1 or pe2 are non-NULL, they are the end
pointers beyond which scanning will not continue under any
circumstances.  If the byte lengths l1 and l2 are non-zero, s1+l1 and
s2+l2 will be used as goal end pointers that will also stop the scan,
and which qualify towards defining a successful match: all the scans
that define an explicit length must reach their goal pointers for
a match to succeed).

=end original

If the pe1 and pe2 are non-NULL, the scanning pointers will be copied
in there (they will point at the beginning of the I<next> character).
If the pointers behind pe1 or pe2 are non-NULL, they are the end
pointers beyond which scanning will not continue under any
circumstances.  If the byte lengths l1 and l2 are non-zero, s1+l1 and
s2+l2 will be used as goal end pointers that will also stop the scan,
and which qualify towards defining a successful match: all the scans
that define an explicit length must reach their goal pointers for
a match to succeed).
(TBT)

=begin original

For case-insensitiveness, the "casefolding" of Unicode is used
instead of upper/lowercasing both the characters, see
http://www.unicode.org/unicode/reports/tr21/ (Case Mappings).

=end original

For case-insensitiveness, the "casefolding" of Unicode is used
instead of upper/lowercasing both the characters, see
http://www.unicode.org/unicode/reports/tr21/ (Case Mappings).
(TBT)

	I32	ibcmp_utf8(const char* a, char **pe1, UV l1, bool u1, const char* b, char **pe2, UV l2, bool u2)

=for hackers
Found in file utf8.c

=item is_utf8_char
X<is_utf8_char>

=begin original

Tests if some arbitrary number of bytes begins in a valid UTF-8
character.  Note that an INVARIANT (i.e. ASCII) character is a valid
UTF-8 character.  The actual number of bytes in the UTF-8 character
will be returned if it is valid, otherwise 0.

=end original

Tests if some arbitrary number of bytes begins in a valid UTF-8
character.  Note that an INVARIANT (i.e. ASCII) character is a valid
UTF-8 character.  The actual number of bytes in the UTF-8 character
will be returned if it is valid, otherwise 0.
(TBT)

	STRLEN	is_utf8_char(const U8 *p)

=for hackers
Found in file utf8.c

=item is_utf8_string
X<is_utf8_string>

=begin original

Returns true if first C<len> bytes of the given string form a valid
UTF-8 string, false otherwise.  Note that 'a valid UTF-8 string' does
not mean 'a string that contains code points above 0x7F encoded in UTF-8'
because a valid ASCII string is a valid UTF-8 string.

=end original

Returns true if first C<len> bytes of the given string form a valid
UTF-8 string, false otherwise.  Note that 'a valid UTF-8 string' does
not mean 'a string that contains code points above 0x7F encoded in UTF-8'
because a valid ASCII string is a valid UTF-8 string.
(TBT)

=begin original

See also is_utf8_string_loclen() and is_utf8_string_loc().

=end original

is_utf8_string_loclen() と is_utf8_string_loc() も参照してください。

	bool	is_utf8_string(const U8 *s, STRLEN len)

=for hackers
Found in file utf8.c

=item is_utf8_string_loc
X<is_utf8_string_loc>

=begin original

Like is_utf8_string() but stores the location of the failure (in the
case of "utf8ness failure") or the location s+len (in the case of
"utf8ness success") in the C<ep>.

=end original

Like is_utf8_string() but stores the location of the failure (in the
case of "utf8ness failure") or the location s+len (in the case of
"utf8ness success") in the C<ep>.
(TBT)

=begin original

See also is_utf8_string_loclen() and is_utf8_string().

=end original

is_utf8_string_loclen() と is_utf8_string() も参照してください。

	bool	is_utf8_string_loc(const U8 *s, STRLEN len, const U8 **p)

=for hackers
Found in file utf8.c

=item is_utf8_string_loclen
X<is_utf8_string_loclen>

=begin original

Like is_utf8_string() but stores the location of the failure (in the
case of "utf8ness failure") or the location s+len (in the case of
"utf8ness success") in the C<ep>, and the number of UTF-8
encoded characters in the C<el>.

=end original

Like is_utf8_string() but stores the location of the failure (in the
case of "utf8ness failure") or the location s+len (in the case of
"utf8ness success") in the C<ep>, and the number of UTF-8
encoded characters in the C<el>.
(TBT)

=begin original

See also is_utf8_string_loc() and is_utf8_string().

=end original

is_utf8_string_loc() と is_utf8_string() も参照してください。

	bool	is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)

=for hackers
Found in file utf8.c

=item pv_uni_display
X<pv_uni_display>

=begin original

Build to the scalar dsv a displayable version of the string spv,
length len, the displayable version being at most pvlim bytes long
(if longer, the rest is truncated and "..." will be appended).

=end original

Build to the scalar dsv a displayable version of the string spv,
length len, the displayable version being at most pvlim bytes long
(if longer, the rest is truncated and "..." will be appended).
(TBT)

=begin original

The flags argument can have UNI_DISPLAY_ISPRINT set to display
isPRINT()able characters as themselves, UNI_DISPLAY_BACKSLASH
to display the \\[nrfta\\] as the backslashed versions (like '\n')
(UNI_DISPLAY_BACKSLASH is preferred over UNI_DISPLAY_ISPRINT for \\).
UNI_DISPLAY_QQ (and its alias UNI_DISPLAY_REGEX) have both
UNI_DISPLAY_BACKSLASH and UNI_DISPLAY_ISPRINT turned on.

=end original

The flags argument can have UNI_DISPLAY_ISPRINT set to display
isPRINT()able characters as themselves, UNI_DISPLAY_BACKSLASH
to display the \\[nrfta\\] as the backslashed versions (like '\n')
(UNI_DISPLAY_BACKSLASH is preferred over UNI_DISPLAY_ISPRINT for \\).
UNI_DISPLAY_QQ (and its alias UNI_DISPLAY_REGEX) have both
UNI_DISPLAY_BACKSLASH and UNI_DISPLAY_ISPRINT turned on.
(TBT)

=begin original

The pointer to the PV of the dsv is returned.

=end original

The pointer to the PV of the dsv is returned.
(TBT)

	char*	pv_uni_display(SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags)

=for hackers
Found in file utf8.c

=item sv_cat_decode
X<sv_cat_decode>

=begin original

The encoding is assumed to be an Encode object, the PV of the ssv is
assumed to be octets in that encoding and decoding the input starts
from the position which (PV + *offset) pointed to.  The dsv will be
concatenated the decoded UTF-8 string from ssv.  Decoding will terminate
when the string tstr appears in decoding output or the input ends on
the PV of the ssv. The value which the offset points will be modified
to the last input position on the ssv.

=end original

The encoding is assumed to be an Encode object, the PV of the ssv is
assumed to be octets in that encoding and decoding the input starts
from the position which (PV + *offset) pointed to.  The dsv will be
concatenated the decoded UTF-8 string from ssv.  Decoding will terminate
when the string tstr appears in decoding output or the input ends on
the PV of the ssv. The value which the offset points will be modified
to the last input position on the ssv.
(TBT)

=begin original

Returns TRUE if the terminator was found, else returns FALSE.

=end original

Returns TRUE if the terminator was found, else returns FALSE.
(TBT)

	bool	sv_cat_decode(SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen)

=for hackers
Found in file sv.c

=item sv_recode_to_utf8
X<sv_recode_to_utf8>

=begin original

The encoding is assumed to be an Encode object, on entry the PV
of the sv is assumed to be octets in that encoding, and the sv
will be converted into Unicode (and UTF-8).

=end original

The encoding is assumed to be an Encode object, on entry the PV
of the sv is assumed to be octets in that encoding, and the sv
will be converted into Unicode (and UTF-8).
(TBT)

=begin original

If the sv already is UTF-8 (or if it is not POK), or if the encoding
is not a reference, nothing is done to the sv.  If the encoding is not
an C<Encode::XS> Encoding object, bad things will happen.
(See F<lib/encoding.pm> and L<Encode>).

=end original

If the sv already is UTF-8 (or if it is not POK), or if the encoding
is not a reference, nothing is done to the sv.  If the encoding is not
an C<Encode::XS> Encoding object, bad things will happen.
(See F<lib/encoding.pm> and L<Encode>).
(TBT)

=begin original

The PV of the sv is returned.

=end original

The PV of the sv is returned.
(TBT)

	char*	sv_recode_to_utf8(SV* sv, SV *encoding)

=for hackers
Found in file sv.c

=item sv_uni_display
X<sv_uni_display>

=begin original

Build to the scalar dsv a displayable version of the scalar sv,
the displayable version being at most pvlim bytes long
(if longer, the rest is truncated and "..." will be appended).

=end original

Build to the scalar dsv a displayable version of the scalar sv,
the displayable version being at most pvlim bytes long
(if longer, the rest is truncated and "..." will be appended).
(TBT)

=begin original

The flags argument is as in pv_uni_display().

=end original

The flags argument is as in pv_uni_display().
(TBT)

=begin original

The pointer to the PV of the dsv is returned.

=end original

The pointer to the PV of the dsv is returned.
(TBT)

	char*	sv_uni_display(SV *dsv, SV *ssv, STRLEN pvlim, UV flags)

=for hackers
Found in file utf8.c

=item to_utf8_case
X<to_utf8_case>

=begin original

The "p" contains the pointer to the UTF-8 string encoding
the character that is being converted.

=end original

The "p" contains the pointer to the UTF-8 string encoding
the character that is being converted.
(TBT)

=begin original

The "ustrp" is a pointer to the character buffer to put the
conversion result to.  The "lenp" is a pointer to the length
of the result.

=end original

The "ustrp" is a pointer to the character buffer to put the
conversion result to.  The "lenp" is a pointer to the length
of the result.
(TBT)

=begin original

The "swashp" is a pointer to the swash to use.

=end original

The "swashp" is a pointer to the swash to use.
(TBT)

=begin original

Both the special and normal mappings are stored lib/unicore/To/Foo.pl,
and loaded by SWASHNEW, using lib/utf8_heavy.pl.  The special (usually,
but not always, a multicharacter mapping), is tried first.

=end original

Both the special and normal mappings are stored lib/unicore/To/Foo.pl,
and loaded by SWASHNEW, using lib/utf8_heavy.pl.  The special (usually,
but not always, a multicharacter mapping), is tried first.
(TBT)

=begin original

The "special" is a string like "utf8::ToSpecLower", which means the
hash %utf8::ToSpecLower.  The access to the hash is through
Perl_to_utf8_case().

=end original

The "special" is a string like "utf8::ToSpecLower", which means the
hash %utf8::ToSpecLower.  The access to the hash is through
Perl_to_utf8_case().
(TBT)

=begin original

The "normal" is a string like "ToLower" which means the swash
%utf8::ToLower.

=end original

The "normal" is a string like "ToLower" which means the swash
%utf8::ToLower.
(TBT)

	UV	to_utf8_case(const U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, const char *normal, const char *special)

=for hackers
Found in file utf8.c

=item to_utf8_fold
X<to_utf8_fold>

=begin original

Convert the UTF-8 encoded character at p to its foldcase version and
store that in UTF-8 in ustrp and its length in bytes in lenp.  Note
that the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the
foldcase version may be longer than the original character (up to
three characters).

=end original

Convert the UTF-8 encoded character at p to its foldcase version and
store that in UTF-8 in ustrp and its length in bytes in lenp.  Note
that the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the
foldcase version may be longer than the original character (up to
three characters).
(TBT)

=begin original

The first character of the foldcased version is returned
(but note, as explained above, that there may be more.)

=end original

The first character of the foldcased version is returned
(but note, as explained above, that there may be more.)
(TBT)

	UV	to_utf8_fold(const U8 *p, U8* ustrp, STRLEN *lenp)

=for hackers
Found in file utf8.c

=item to_utf8_lower
X<to_utf8_lower>

=begin original

Convert the UTF-8 encoded character at p to its lowercase version and
store that in UTF-8 in ustrp and its length in bytes in lenp.  Note
that the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the
lowercase version may be longer than the original character.

=end original

Convert the UTF-8 encoded character at p to its lowercase version and
store that in UTF-8 in ustrp and its length in bytes in lenp.  Note
that the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the
lowercase version may be longer than the original character.
(TBT)

=begin original

The first character of the lowercased version is returned
(but note, as explained above, that there may be more.)

=end original

The first character of the lowercased version is returned
(but note, as explained above, that there may be more.)
(TBT)

	UV	to_utf8_lower(const U8 *p, U8* ustrp, STRLEN *lenp)

=for hackers
Found in file utf8.c

=item to_utf8_title
X<to_utf8_title>

=begin original

Convert the UTF-8 encoded character at p to its titlecase version and
store that in UTF-8 in ustrp and its length in bytes in lenp.  Note
that the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the
titlecase version may be longer than the original character.

=end original

Convert the UTF-8 encoded character at p to its titlecase version and
store that in UTF-8 in ustrp and its length in bytes in lenp.  Note
that the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the
titlecase version may be longer than the original character.
(TBT)

=begin original

The first character of the titlecased version is returned
(but note, as explained above, that there may be more.)

=end original

The first character of the titlecased version is returned
(but note, as explained above, that there may be more.)
(TBT)

	UV	to_utf8_title(const U8 *p, U8* ustrp, STRLEN *lenp)

=for hackers
Found in file utf8.c

=item to_utf8_upper
X<to_utf8_upper>

=begin original

Convert the UTF-8 encoded character at p to its uppercase version and
store that in UTF-8 in ustrp and its length in bytes in lenp.  Note
that the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since
the uppercase version may be longer than the original character.

=end original

Convert the UTF-8 encoded character at p to its uppercase version and
store that in UTF-8 in ustrp and its length in bytes in lenp.  Note
that the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since
the uppercase version may be longer than the original character.
(TBT)

=begin original

The first character of the uppercased version is returned
(but note, as explained above, that there may be more.)

=end original

The first character of the uppercased version is returned
(but note, as explained above, that there may be more.)
(TBT)

	UV	to_utf8_upper(const U8 *p, U8* ustrp, STRLEN *lenp)

=for hackers
Found in file utf8.c

=item utf8n_to_uvchr
X<utf8n_to_uvchr>

=begin original

flags

=end original

flags
(TBT)

=begin original

Returns the native character value of the first character in the string 
C<s>
which is assumed to be in UTF-8 encoding; C<retlen> will be set to the
length, in bytes, of that character.

=end original

Returns the native character value of the first character in the string 
C<s>
which is assumed to be in UTF-8 encoding; C<retlen> will be set to the
length, in bytes, of that character.
(TBT)

=begin original

Allows length and flags to be passed to low level routine.

=end original

Allows length and flags to be passed to low level routine.
(TBT)

	UV	utf8n_to_uvchr(const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)

=for hackers
Found in file utf8.c

=item utf8n_to_uvuni
X<utf8n_to_uvuni>

=begin original

Bottom level UTF-8 decode routine.
Returns the Unicode code point value of the first character in the string C<s>
which is assumed to be in UTF-8 encoding and no longer than C<curlen>;
C<retlen> will be set to the length, in bytes, of that character.

=end original

Bottom level UTF-8 decode routine.
Returns the Unicode code point value of the first character in the string C<s>
which is assumed to be in UTF-8 encoding and no longer than C<curlen>;
C<retlen> will be set to the length, in bytes, of that character.
(TBT)

=begin original

If C<s> does not point to a well-formed UTF-8 character, the behaviour
is dependent on the value of C<flags>: if it contains UTF8_CHECK_ONLY,
it is assumed that the caller will raise a warning, and this function
will silently just set C<retlen> to C<-1> and return zero.  If the
C<flags> does not contain UTF8_CHECK_ONLY, warnings about
malformations will be given, C<retlen> will be set to the expected
length of the UTF-8 character in bytes, and zero will be returned.

=end original

If C<s> does not point to a well-formed UTF-8 character, the behaviour
is dependent on the value of C<flags>: if it contains UTF8_CHECK_ONLY,
it is assumed that the caller will raise a warning, and this function
will silently just set C<retlen> to C<-1> and return zero.  If the
C<flags> does not contain UTF8_CHECK_ONLY, warnings about
malformations will be given, C<retlen> will be set to the expected
length of the UTF-8 character in bytes, and zero will be returned.
(TBT)

=begin original

The C<flags> can also contain various flags to allow deviations from
the strict UTF-8 encoding (see F<utf8.h>).

=end original

The C<flags> can also contain various flags to allow deviations from
the strict UTF-8 encoding (see F<utf8.h>).
(TBT)

=begin original

Most code should use utf8_to_uvchr() rather than call this directly.

=end original

Most code should use utf8_to_uvchr() rather than call this directly.
(TBT)

	UV	utf8n_to_uvuni(const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)

=for hackers
Found in file utf8.c

=item utf8_distance
X<utf8_distance>

=begin original

Returns the number of UTF-8 characters between the UTF-8 pointers C<a>
and C<b>.

=end original

Returns the number of UTF-8 characters between the UTF-8 pointers C<a>
and C<b>.
(TBT)

=begin original

WARNING: use only if you *know* that the pointers point inside the
same UTF-8 buffer.

=end original

WARNING: use only if you *know* that the pointers point inside the
same UTF-8 buffer.
(TBT)

	IV	utf8_distance(const U8 *a, const U8 *b)

=for hackers
Found in file utf8.c

=item utf8_hop
X<utf8_hop>

=begin original

Return the UTF-8 pointer C<s> displaced by C<off> characters, either
forward or backward.

=end original

Return the UTF-8 pointer C<s> displaced by C<off> characters, either
forward or backward.
(TBT)

=begin original

WARNING: do not use the following unless you *know* C<off> is within
the UTF-8 data pointed to by C<s> *and* that on entry C<s> is aligned
on the first byte of character or just after the last byte of a character.

=end original

WARNING: do not use the following unless you *know* C<off> is within
the UTF-8 data pointed to by C<s> *and* that on entry C<s> is aligned
on the first byte of character or just after the last byte of a character.
(TBT)

	U8*	utf8_hop(const U8 *s, I32 off)

=for hackers
Found in file utf8.c

=item utf8_length
X<utf8_length>

=begin original

Return the length of the UTF-8 char encoded string C<s> in characters.
Stops at C<e> (inclusive).  If C<e E<lt> s> or if the scan would end
up past C<e>, croaks.

=end original

Return the length of the UTF-8 char encoded string C<s> in characters.
Stops at C<e> (inclusive).  If C<e E<lt> s> or if the scan would end
up past C<e>, croaks.
(TBT)

	STRLEN	utf8_length(const U8* s, const U8 *e)

=for hackers
Found in file utf8.c

=item utf8_to_bytes
X<utf8_to_bytes>

=begin original

Converts a string C<s> of length C<len> from UTF-8 into byte encoding.
Unlike C<bytes_to_utf8>, this over-writes the original string, and
updates len to contain the new length.
Returns zero on failure, setting C<len> to -1.

=end original

Converts a string C<s> of length C<len> from UTF-8 into byte encoding.
Unlike C<bytes_to_utf8>, this over-writes the original string, and
updates len to contain the new length.
Returns zero on failure, setting C<len> to -1.
(TBT)

=begin original

If you need a copy of the string, see C<bytes_from_utf8>.

=end original

If you need a copy of the string, see C<bytes_from_utf8>.
(TBT)

=begin original

NOTE: this function is experimental and may change or be
removed without notice.

=end original

注意: この関数は実験的で、予告なしに変更あるいは削除されるかもしれません。

	U8*	utf8_to_bytes(U8 *s, STRLEN *len)

=for hackers
Found in file utf8.c

=item utf8_to_uvchr
X<utf8_to_uvchr>

=begin original

Returns the native character value of the first character in the string C<s>
which is assumed to be in UTF-8 encoding; C<retlen> will be set to the
length, in bytes, of that character.

=end original

Returns the native character value of the first character in the string C<s>
which is assumed to be in UTF-8 encoding; C<retlen> will be set to the
length, in bytes, of that character.
(TBT)

=begin original

If C<s> does not point to a well-formed UTF-8 character, zero is
returned and retlen is set, if possible, to -1.

=end original

If C<s> does not point to a well-formed UTF-8 character, zero is
returned and retlen is set, if possible, to -1.
(TBT)

	UV	utf8_to_uvchr(const U8 *s, STRLEN *retlen)

=for hackers
Found in file utf8.c

=item utf8_to_uvuni
X<utf8_to_uvuni>

=begin original

Returns the Unicode code point of the first character in the string C<s>
which is assumed to be in UTF-8 encoding; C<retlen> will be set to the
length, in bytes, of that character.

=end original

Returns the Unicode code point of the first character in the string C<s>
which is assumed to be in UTF-8 encoding; C<retlen> will be set to the
length, in bytes, of that character.
(TBT)

=begin original

This function should only be used when returned UV is considered
an index into the Unicode semantic tables (e.g. swashes).

=end original

This function should only be used when returned UV is considered
an index into the Unicode semantic tables (e.g. swashes).
(TBT)

=begin original

If C<s> does not point to a well-formed UTF-8 character, zero is
returned and retlen is set, if possible, to -1.

=end original

If C<s> does not point to a well-formed UTF-8 character, zero is
returned and retlen is set, if possible, to -1.
(TBT)

	UV	utf8_to_uvuni(const U8 *s, STRLEN *retlen)

=for hackers
Found in file utf8.c

=item uvchr_to_utf8
X<uvchr_to_utf8>

=begin original

Adds the UTF-8 representation of the Native codepoint C<uv> to the end
of the string C<d>; C<d> should be have at least C<UTF8_MAXBYTES+1> free
bytes available. The return value is the pointer to the byte after the
end of the new character. In other words,

=end original

Adds the UTF-8 representation of the Native codepoint C<uv> to the end
of the string C<d>; C<d> should be have at least C<UTF8_MAXBYTES+1> free
bytes available. The return value is the pointer to the byte after the
end of the new character. In other words,
(TBT)

    d = uvchr_to_utf8(d, uv);

=begin original

is the recommended wide native character-aware way of saying

=end original

is the recommended wide native character-aware way of saying
(TBT)

    *(d++) = uv;

	U8*	uvchr_to_utf8(U8 *d, UV uv)

=for hackers
Found in file utf8.c

=item uvuni_to_utf8_flags
X<uvuni_to_utf8_flags>

=begin original

Adds the UTF-8 representation of the Unicode codepoint C<uv> to the end
of the string C<d>; C<d> should be have at least C<UTF8_MAXBYTES+1> free
bytes available. The return value is the pointer to the byte after the
end of the new character. In other words,

=end original

Adds the UTF-8 representation of the Unicode codepoint C<uv> to the end
of the string C<d>; C<d> should be have at least C<UTF8_MAXBYTES+1> free
bytes available. The return value is the pointer to the byte after the
end of the new character. In other words,
(TBT)

    d = uvuni_to_utf8_flags(d, uv, flags);

=begin original

or, in most cases,

=end original

または、ほとんどの場合では、

    d = uvuni_to_utf8(d, uv);

=begin original

(which is equivalent to)

=end original

(これは以下と等価です)

    d = uvuni_to_utf8_flags(d, uv, 0);

=begin original

is the recommended Unicode-aware way of saying

=end original

というのものが、以下のようなものの Unicode を考慮に入れた方法として
推奨されます。

    *(d++) = uv;

	U8*	uvuni_to_utf8_flags(U8 *d, UV uv, UV flags)

=for hackers
Found in file utf8.c

=back

=head1 Variables created by C<xsubpp> and C<xsubpp> internal functions

=over 8

=item ax
X<ax>

=begin original

Variable which is setup by C<xsubpp> to indicate the stack base offset,
used by the C<ST>, C<XSprePUSH> and C<XSRETURN> macros.  The C<dMARK> macro
must be called prior to setup the C<MARK> variable.

=end original

Variable which is setup by C<xsubpp> to indicate the stack base offset,
used by the C<ST>, C<XSprePUSH> and C<XSRETURN> macros.  The C<dMARK> macro
must be called prior to setup the C<MARK> variable.
(TBT)

	I32	ax

=for hackers
Found in file XSUB.h

=item CLASS
X<CLASS>

=begin original

Variable which is setup by C<xsubpp> to indicate the 
class name for a C++ XS constructor.  This is always a C<char*>.  See C<THIS>.

=end original

C<xsubpp> によってセットアップされる、C++ の XS コンストラクターに
対するクラス名を表わす変数です。
これは常に C<char*> です。
C<THIS> を参照してください。

	char*	CLASS

=for hackers
Found in file XSUB.h

=item dAX
X<dAX>

=begin original

Sets up the C<ax> variable.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.

=end original

Sets up the C<ax> variable.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.
(TBT)

		dAX;

=for hackers
Found in file XSUB.h

=item dAXMARK
X<dAXMARK>

=begin original

Sets up the C<ax> variable and stack marker variable C<mark>.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.

=end original

Sets up the C<ax> variable and stack marker variable C<mark>.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.
(TBT)

		dAXMARK;

=for hackers
Found in file XSUB.h

=item dITEMS
X<dITEMS>

=begin original

Sets up the C<items> variable.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.

=end original

Sets up the C<items> variable.
This is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.
(TBT)

		dITEMS;

=for hackers
Found in file XSUB.h

=item dUNDERBAR
X<dUNDERBAR>

=begin original

Sets up the C<padoff_du> variable for an XSUB that wishes to use
C<UNDERBAR>.

=end original

Sets up the C<padoff_du> variable for an XSUB that wishes to use
C<UNDERBAR>.
(TBT)

		dUNDERBAR;

=for hackers
Found in file XSUB.h

=item dXSARGS
X<dXSARGS>

=begin original

Sets up stack and mark pointers for an XSUB, calling dSP and dMARK.
Sets up the C<ax> and C<items> variables by calling C<dAX> and C<dITEMS>.
This is usually handled automatically by C<xsubpp>.

=end original

XSUB のために、スタックポインタとマークポインタをセットアップし、
dSP と dMARK を呼び出します。
Sets up the C<ax> and C<items> variables by calling C<dAX> and C<dITEMS>.
これは通常、C<xsubpp> によって自動的に行なわれます。
スタックにあるアイテムの数を示すために変数 C<items> を宣言します
(TBT)

		dXSARGS;

=for hackers
Found in file XSUB.h

=item dXSI32
X<dXSI32>

=begin original

Sets up the C<ix> variable for an XSUB which has aliases.  This is usually
handled automatically by C<xsubpp>.

=end original

エイリアスを持つ XSUB のために変数 C<ix> をセットアップします。
これは通常、C<xsubpp> によって自動的に行なわれます。

		dXSI32;

=for hackers
Found in file XSUB.h

=item items
X<items>

=begin original

Variable which is setup by C<xsubpp> to indicate the number of 
items on the stack.  See L<perlxs/"Variable-length Parameter Lists">.

=end original

C<xsubpp> によりセットアップされ、スタックにあるアイテムの数を表わす
変数です。
L<perlxs/"Variable-length Parameter Lists"> を参照してください。

	I32	items

=for hackers
Found in file XSUB.h

=item ix
X<ix>

=begin original

Variable which is setup by C<xsubpp> to indicate which of an 
XSUB's aliases was used to invoke it.  See L<perlxs/"The ALIAS: Keyword">.

=end original

C<xsubpp> によりセットアップされ、それを起動するのに使われた XSUB の
エイリアスを表わす変数です。
L<perlxs/"The ALIAS: Keyword"> を参照してください。

	I32	ix

=for hackers
Found in file XSUB.h

=item newXSproto
X<newXSproto>

=begin original

Used by C<xsubpp> to hook up XSUBs as Perl subs.  Adds Perl prototypes to
the subs.

=end original

Perl サブルーチンのように XSUB をフックするために C<xsubpp> が使います。
サブルーチンに対して Perl のプロトタイプを追加します。

=for hackers
Found in file XSUB.h

=item RETVAL
X<RETVAL>

=begin original

Variable which is setup by C<xsubpp> to hold the return value for an 
XSUB. This is always the proper type for the XSUB. See 
L<perlxs/"The RETVAL Variable">.

=end original

C<xsubpp> によってセットアップされ、XSUB の戻り値を保持する変数です。
これは、常に XSUB にとって正しい型になります。
L<perlxs/"The RETVAL Variable"> を参照してください。

	(whatever)	RETVAL

=for hackers
Found in file XSUB.h

=item ST
X<ST>

=begin original

Used to access elements on the XSUB's stack.

=end original

XSUB のスタック上にある要素にアクセスするために使われます。

	SV*	ST(int ix)

=for hackers
Found in file XSUB.h

=item THIS
X<THIS>

=begin original

Variable which is setup by C<xsubpp> to designate the object in a C++ 
XSUB.  This is always the proper type for the C++ object.  See C<CLASS> and 
L<perlxs/"Using XS With C++">.

=end original

C++ の XSUB におけるオブジェクトを指定する、C<xsubpp> によって設定される
変数です。
C<CLASS> および L<perlxs/"Using XS With C++"> を参照してください。

	(whatever)	THIS

=for hackers
Found in file XSUB.h

=item UNDERBAR
X<UNDERBAR>

=begin original

The SV* corresponding to the $_ variable. Works even if there
is a lexical $_ in scope.

=end original

The SV* corresponding to the $_ variable. Works even if there
is a lexical $_ in scope.
(TBT)

=for hackers
Found in file XSUB.h

=item XS
X<XS>

=begin original

Macro to declare an XSUB and its C parameter list.  This is handled by
C<xsubpp>.

=end original

XSUB とその C のパラメーターリストを宣言するためのマクロです。
これは C<xsubpp> によって扱われます。

=for hackers
Found in file XSUB.h

=item XS_VERSION
X<XS_VERSION>

=begin original

The version identifier for an XS module.  This is usually
handled automatically by C<ExtUtils::MakeMaker>.  See C<XS_VERSION_BOOTCHECK>.

=end original

XS モジュールに対するバージョン識別子。
これは通常、C<ExtUtils::MakeMaker> によって自動的に使われます。
C<XS_VERSION_BOOTCHECK> を参照してください。

=for hackers
Found in file XSUB.h

=item XS_VERSION_BOOTCHECK
X<XS_VERSION_BOOTCHECK>

=begin original

Macro to verify that a PM module's $VERSION variable matches the XS
module's C<XS_VERSION> variable.  This is usually handled automatically by
C<xsubpp>.  See L<perlxs/"The VERSIONCHECK: Keyword">.

=end original

PM モジュールのバージョン変数と、XS モジュールの C<XS_VERSION> 変数とが
マッチするかを検査するためのマクロです。
これは、通常は C<xsubpp> によって自動的に扱われます。
L<perlxs/"The VERSIONCHECK: Keyword"> を参照してください。

		XS_VERSION_BOOTCHECK;

=for hackers
Found in file XSUB.h


=back

=head1 Warning and Dieing

(警告と die)

=over 8

=item croak
X<croak>

=begin original

This is the XSUB-writer's interface to Perl's C<die> function.
Normally call this function the same way you call the C C<printf>
function.  Calling C<croak> returns control directly to Perl,
sidestepping the normal C order of execution. See C<warn>.

=end original

Perl の C<die> 関数に対する XSUB 作成者のためのインターフェースです。
Normally call this function the same way you call the C C<printf>
function.  Calling C<croak> returns control directly to Perl,
sidestepping the normal C order of execution.
C<warn> を参照してください。
(TBT)

=begin original

If you want to throw an exception object, assign the object to
C<$@> and then pass C<NULL> to croak():

=end original

If you want to throw an exception object, assign the object to
C<$@> and then pass C<NULL> to croak():
(TBT)

   errsv = get_sv("@", TRUE);
   sv_setsv(errsv, exception_object);
   croak(NULL);

	void	croak(const char* pat, ...)

=for hackers
Found in file util.c

=item warn
X<warn>

=begin original

This is the XSUB-writer's interface to Perl's C<warn> function.  Call this
function the same way you call the C C<printf> function.  See C<croak>.

=end original

これは XSUB 作成者のための、Perl の C<warn> 関数に対するインターフェースです。
この関数はCの関数 C<printf> と同じように呼び出します。
C<croak()> を参照してください。

	void	warn(const char* pat, ...)

=for hackers
Found in file util.c

=back

=head1 AUTHORS

(著者)

=begin original

Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@corp.hp.com>.  It is now maintained as part of Perl itself.

=end original

1997 年 5 月まで、このドキュメントは Jeff Okamoto
<okamoto@corp.hp.com> によって管理されていました。
今では Perl 自身の一部として管理されています。

=begin original

With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.

=end original

Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, Gurusamy Sarathy から多くの助力と提案を受けました。

=begin original

API Listing originally by Dean Roehrich <roehrich@cray.com>.

=end original

元の API 一覧は Dean Roehrich <roehrich@cray.com> によるものです。

=begin original

Updated to be autogenerated from comments in the source by Benjamin Stuhl.

=end original

Benjamin Stuhl によって、ソースのコメントから自動生成するように
更新されました。

=head1 SEE ALSO

perlguts(1), perlxs(1), perlxstut(1), perlintern(1)

=begin meta

Created: KIMURA Koichi
Updated: Kentaro Shirakata <argrath@ub32.org> (5.10.0-)

=end meta

=cut

 ex: set ro:
