
=encoding euc-jp

=head1 NAME

=begin original

perlguts - Introduction to the Perl API

=end original

perlguts - Perl API の紹介

=head1 DESCRIPTION

=begin original

This document attempts to describe how to use the Perl API, as well as
to provide some info on the basic workings of the Perl core. It is far
from complete and probably contains many errors. Please refer any
questions or comments to the author below.

=end original

このドキュメントでは Perl API の使い方、および Perl コアの基本的な動作に
関するいくばくかの情報を提供しようとしています。
完璧からは程遠いものですし、間違いも多いと思います。
疑問点やコメントは後述する著者に対して行なってください。

=head1 Variables

(変数)

=head2 Datatypes

(データ型)

=begin original

Perl has three typedefs that handle Perl's three main data types:

=end original

Perl では、主となる三つのデータ型を扱うために三つの型定義を行なっています:

    SV  Scalar Value
    AV  Array Value
    HV  Hash Value

=begin original

Each typedef has specific routines that manipulate the various data types.

=end original

それぞれの typedef には様々なデータ型を操作するための特別なルーチンが
用意されています。

=head2 What is an "IV"?

("IV" ってなに?)

=begin original

Perl uses a special typedef IV which is a simple signed integer type that is
guaranteed to be large enough to hold a pointer (as well as an integer).
Additionally, there is the UV, which is simply an unsigned IV.

=end original

Perl では、符号付き整数でもポインタでも十分に入れることのできる特別な 
typedef である IV を使います。
更に、単に符号なしの IV である UV もあります。

=begin original

Perl also uses two special typedefs, I32 and I16, which will always be at
least 32-bits and 16-bits long, respectively. (Again, there are U32 and U16,
as well.)  They will usually be exactly 32 and 16 bits long, but on Crays
they will both be 64 bits.

=end original

Perl はまた、二つの特殊な typedef である I32 と I16 を使っています。
これらはそれぞれ、常に最低 32bit、16bit の長さを持っているものです。
(再び、同様に U32 と U16 もあります。)
これらは普通は正確に 32 ビットと 16 ビットですが、Cray では両方とも
64 ビットです。

=head2 Working with SVs

(SV に対する作業)

=begin original

An SV can be created and loaded with one command.  There are five types of
values that can be loaded: an integer value (IV), an unsigned integer
value (UV), a double (NV), a string (PV), and another scalar (SV).

=end original

SV は、1 つのコマンドで生成し、値をロードすることができます。
ロードできる値の型には、整数 (IV)、符号なし整数 (UV)、
倍精度 (NV)、文字列 (PV)、その他のスカラ (SV) があります。

=begin original

The seven routines are:

=end original

これらを行なう、7 つのルーチンは:

    SV*  newSViv(IV);
    SV*  newSVuv(UV);
    SV*  newSVnv(double);
    SV*  newSVpv(const char*, STRLEN);
    SV*  newSVpvn(const char*, STRLEN);
    SV*  newSVpvf(const char*, ...);
    SV*  newSVsv(SV*);

=begin original

C<STRLEN> is an integer type (Size_t, usually defined as size_t in
F<config.h>) guaranteed to be large enough to represent the size of
any string that perl can handle.

=end original

C<STRLEN> は perl が扱えるどんな文字列のサイズも表現するのに十分なだけの
大きさを持つことが保証されている整数型(Size_t, 普通は F<config.h> で
size_t として定義されています)。

=begin original

In the unlikely case of a SV requiring more complex initialisation, you
can create an empty SV with newSV(len).  If C<len> is 0 an empty SV of
type NULL is returned, else an SV of type PV is returned with len + 1 (for
the NUL) bytes of storage allocated, accessible via SvPVX.  In both cases
the SV has value undef.

=end original

あまりなさそうですが、SV がもっと複雑な初期化を必要とする場合、
newSV(len) で空の SV も作成できます。
もし C<len> が 0 なら、NULL 型の空の SV が返され、さもなければ
PV 型の SV は、SvPVX でアクセスできる len + 1 (NUL のため) バイトの領域を
割り当てられて返されます。
両方の場合で、SV の値は未定義値です。

    SV *sv = newSV(0);   /* no storage allocated  */
    SV *sv = newSV(10);  /* 10 (+1) bytes of uninitialised storage allocated  */

=begin original

To change the value of an I<already-existing> SV, there are eight routines:

=end original

I<既に存在する> スカラの値を変更するために 8 つのルーチンがあります:

    void  sv_setiv(SV*, IV);
    void  sv_setuv(SV*, UV);
    void  sv_setnv(SV*, double);
    void  sv_setpv(SV*, const char*);
    void  sv_setpvn(SV*, const char*, STRLEN)
    void  sv_setpvf(SV*, const char*, ...);
    void  sv_vsetpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool *);
    void  sv_setsv(SV*, SV*);

=begin original

Notice that you can choose to specify the length of the string to be
assigned by using C<sv_setpvn>, C<newSVpvn>, or C<newSVpv>, or you may
allow Perl to calculate the length by using C<sv_setpv> or by specifying
0 as the second argument to C<newSVpv>.  Be warned, though, that Perl will
determine the string's length by using C<strlen>, which depends on the
string terminating with a NUL character.

=end original

代入すべき文字列の長さを C<sv_setpvn> や C<newSVpv>、あるいは
C<newSVpv> を使って指定することもできますし、C<sv_setpv> を使ったり
C<newSVpv> の第二引数に 0 を指定することによって、Perl 自身に
文字列の長さを計算させることもできます。
ただし Perl は、NUL 文字で終了することに依存している
C<strlen> を使って長さを計算しているということに注意してください。

=begin original

The arguments of C<sv_setpvf> are processed like C<sprintf>, and the
formatted output becomes the value.

=end original

C<sv_setpvf> の引数は C<sprintf> と同じように処理され、書式化された
出力が値となります。

=begin original

C<sv_vsetpvfn> is an analogue of C<vsprintf>, but it allows you to specify
either a pointer to a variable argument list or the address and length of
an array of SVs.  The last argument points to a boolean; on return, if that
boolean is true, then locale-specific information has been used to format
the string, and the string's contents are therefore untrustworthy (see
L<perlsec>).  This pointer may be NULL if that information is not
important.  Note that this function requires you to specify the length of
the format.

=end original

C<sv_vsetpvfn> は C<vsprintf> と同じようなものですが、
可変引数リストに対するポインタか
SV の配列のアドレスと長さのいずれかを指定することができます。
最後の引数はブール値を指し示します。
関数から返ってきたときに
これが true であれば、フォーマット文字列としてロカール固有の
情報が使われているのでその文字列の内容は信頼するできないことを
表わしています(L<perlsec> を参照)。
ロカールに関する情報が重要でないのなら、
このポインタは NULL であってもかまいません。
この関数はフォーマットの長さを要求していることに注意してください。

=begin original

The C<sv_set*()> functions are not generic enough to operate on values
that have "magic".  See L<Magic Virtual Tables> later in this document.

=end original

C<sv_set*()> 関数群は“magic”を持っている値に対する
操作に対して充分に一般化されたものではありません。
後述する L<Magic Virtual Tables> を参照してください。

=begin original

All SVs that contain strings should be terminated with a NUL character.
If it is not NUL-terminated there is a risk of
core dumps and corruptions from code which passes the string to C
functions or system calls which expect a NUL-terminated string.
Perl's own functions typically add a trailing NUL for this reason.
Nevertheless, you should be very careful when you pass a string stored
in an SV to a C function or system call.

=end original

すべてのSV は、必須と言うわけではありませんが NUL キャラクターで
終端されているべきです。
この終端の NUL が無かった場合、コアダンプしたり文字列を
(文字列が NUL で終端されていることを期待している) C 関数やシステムコールに
渡すコードをおかしくする危険があります。
Perl 自身の典型的な関数は、この理由により終端に NUL を追加します。
そうであったとしても、あなたが SV に格納されている文字列を C の関数や
システムコールに渡す時には十二分に気をつけるべきなのです。

=begin original

To access the actual value that an SV points to, you can use the macros:

=end original

SV が指し示す実際の値をアクセスするには、以下のマクロを使えます:

    SvIV(SV*)
    SvUV(SV*)
    SvNV(SV*)
    SvPV(SV*, STRLEN len)
    SvPV_nolen(SV*)

=begin original

which will automatically coerce the actual scalar type into an IV, UV, double,
or string.

=end original

これは実際のスカラの型を自動的にに IV や UV や倍精度や文字列にします。

=begin original

In the C<SvPV> macro, the length of the string returned is placed into the
variable C<len> (this is a macro, so you do I<not> use C<&len>).  If you do
not care what the length of the data is, use the C<SvPV_nolen> macro.
Historically the C<SvPV> macro with the global variable C<PL_na> has been
used in this case.  But that can be quite inefficient because C<PL_na> must
be accessed in thread-local storage in threaded Perl.  In any case, remember
that Perl allows arbitrary strings of data that may both contain NULs and
might not be terminated by a NUL.

=end original

C<SvPV> マクロでは、返される文字列の長さは、変数 C<len> に格納されます
(これはマクロですから、C<&len> と I<しないで> ください)。
もしデータの長さを気にしないのであれば、C<SvPV_nolen> マクロを
使ってください。
歴史的に、この場合にはグローバル変数 C<PL_na> に C<SvPV> マクロが
使われてきました。
しかしこれは可能ですが効率は良くありません;
なぜなら C<PL_na> はスレッド化した Perl ではスレッドローカルな
領域にアクセスしなければならないからです。
いずれの場合にも、Perl は NUL を含んでいる文字列と NUL で
終端されていないような文字列の両方を扱うことができるということを
覚えておいてください。

=begin original

Also remember that C doesn't allow you to safely say C<foo(SvPV(s, len),
len);>. It might work with your compiler, but it won't work for everyone.
Break this sort of statement up into separate assignments:

=end original

同様に、Cで C<SvPV(s, len), len)> とすることが安全ではないことを
忘れないでください。
これはあなたの使うコンパイラによってはうまくいきますが、
いつでもそうだとは限らないのです。
そこで、こういったステートメントは以下のように分割します:

    SV *s;
    STRLEN len;
    char * ptr;
    ptr = SvPV(s, len);
    foo(ptr, len);

=begin original

If you want to know if the scalar value is TRUE, you can use:

=end original

単にスカラ値が真かどうかを知りたいだけならば、

    SvTRUE(SV*)

=begin original

Although Perl will automatically grow strings for you, if you need to force
Perl to allocate more memory for your SV, you can use the macro

=end original

Perl は、SV にもっとメモリを割り当てて欲しいときには自動的に文字列を
大きくしてくれますが、さらにメモリを割り当てさせることが必要であれば

    SvGROW(SV*, STRLEN newlen)

=begin original

which will determine if more memory needs to be allocated.  If so, it will
call the function C<sv_grow>.  Note that C<SvGROW> can only increase, not
decrease, the allocated memory of an SV and that it does not automatically
add a byte for the a trailing NUL (perl's own string functions typically do
C<SvGROW(sv, len + 1)>).

=end original

というマクロが使えます。
もし必要なら、このマクロが C<sv_grow>を呼びます。
C<SvGROW> は SV に割り当てたメモリを増やすだけで、減らすことは
できないということと、終端の NUL の分のバイトが自動的に加算されない
(perl自身の文字列関数は 大概 C<SvGROW(sv, len + 1)> としています)と
いうことに注意してください。

=begin original

If you have an SV and want to know what kind of data Perl thinks is stored
in it, you can use the following macros to check the type of SV you have.

=end original

手元にある SV の、 Perl から見たデータの種類を知りたいときには、
その SV の型をチェックするのに

    SvIOK(SV*)
    SvNOK(SV*)
    SvPOK(SV*)

=begin original

You can get and set the current length of the string stored in an SV with
the following macros:

=end original

SV に納められた文字列の現在の長さを取得したり設定したりするのに
は以下のマクロが使えます。

    SvCUR(SV*)
    SvCUR_set(SV*, I32 val)

=begin original

You can also get a pointer to the end of the string stored in the SV
with the macro:

=end original

同様に、SV に格納されている文字列の終端へのポインタを以下のマクロを
使って得ることができます。

    SvEND(SV*)

=begin original

But note that these last three macros are valid only if C<SvPOK()> is true.

=end original

ただし、これらは C<SvPOK()> が真のときだけ有効だということに気を
つけてください。

=begin original

If you want to append something to the end of string stored in an C<SV*>,
you can use the following functions:

=end original

C<SV*> に格納されている文字列の末尾になにかを追加したいときに以下のような
関数が使えます。

    void  sv_catpv(SV*, const char*);
    void  sv_catpvn(SV*, const char*, STRLEN);
    void  sv_catpvf(SV*, const char*, ...);
    void  sv_vcatpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool);
    void  sv_catsv(SV*, SV*);

=begin original

The first function calculates the length of the string to be appended by
using C<strlen>.  In the second, you specify the length of the string
yourself.  The third function processes its arguments like C<sprintf> and
appends the formatted output.  The fourth function works like C<vsprintf>.
You can specify the address and length of an array of SVs instead of the
va_list argument. The fifth function extends the string stored in the first
SV with the string stored in the second SV.  It also forces the second SV
to be interpreted as a string.

=end original

最初の関数は C<strlen> を使って追加する文字列の長さを計算します。
二番目の関数では、関数を使用する人が文字列の長さを指定します。
三番目の関数はその引数を C<sprintf> の様に処理し、整形された結果を
追加します。
四番目の関数は C<vsprintf> のように動作します。
va_list 引数の代わりに、SV の配列のアドレスと長さを指定することが
できます。
五番目の関数は最初の SV にある文字列を二番目の SV にある文字列で
拡張します。
また、この関数は二番目の SV を強制的に文字列として解釈します。

=begin original

The C<sv_cat*()> functions are not generic enough to operate on values that
have "magic".  See L<Magic Virtual Tables> later in this document.

=end original

C<sv_cat*()> 関数群は“magic”を持っている値に対する
操作に対して充分に一般化されたものではありません。
後述する L<Magic Virtual Tables> を参照してください。

=begin original

If you know the name of a scalar variable, you can get a pointer to its SV
by using the following:

=end original

スカラ変数の名前がわかれば、その SV へのポインタは

    SV*  get_sv("package::varname", FALSE);

=begin original

This returns NULL if the variable does not exist.

=end original

を使って得ることができます。
その変数が存在しない場合には NULL が返されます。

=begin original

If you want to know if this variable (or any other SV) is actually C<defined>,
you can call:

=end original

その変数 (もしくは他の任意の SV) が、実際に B<定義されているか> を
知りたいならば、

    SvOK(SV*)

=begin original

The scalar C<undef> value is stored in an SV instance called C<PL_sv_undef>.

=end original

スカラの C<undef> 値は、C<PL_sv_undef> という SV のインスタンスに
納められています。

=begin original

Its address can be used whenever an C<SV*> is needed. Make sure that
you don't try to compare a random sv with C<&PL_sv_undef>. For example
when interfacing Perl code, it'll work correctly for:

=end original

そのアドレスは、C<SV*> が必要とされるところで使用することができます。
任意の sv を C<&PL_sv_undef> を比較しようとしないように気をつけてください。
例えば、Perl コードとのインターフェースで、以下は正しく動きます:

  foo(undef);

=begin original

But won't work when called as:

=end original

しかし、以下のように呼び出すと動作しません:

  $x = undef;
  foo($x);

=begin original

So to repeat always use SvOK() to check whether an sv is defined.

=end original

従って、sv が定義されているかをチェックするために、毎回繰り返して
SvOK() を使ってください。

=begin original

Also you have to be careful when using C<&PL_sv_undef> as a value in
AVs or HVs (see L<AVs, HVs and undefined values>).

=end original

また、AV や HV の値として C<&PL_sv_undef> を使うときにも
注意しなければなりません (L<AVs, HVs and undefined values> を
参照してください)。

=begin original

There are also the two values C<PL_sv_yes> and C<PL_sv_no>, which contain
boolean TRUE and FALSE values, respectively.  Like C<PL_sv_undef>, their
addresses can be used whenever an C<SV*> is needed.

=end original

ブール値の真と偽を表わす、C<PL_sv_yes> や C<PL_sv_no> という値もあります。
C<PL_sv_undef> と同様に、これらのアドレスも C<SV*> が必要なところで
使うことができます。

=begin original

Do not be fooled into thinking that C<(SV *) 0> is the same as C<&PL_sv_undef>.
Take this code:

=end original

C<(SV *0)> と C<&PL_sv_undef> が同じであると考えて、だまされてはいけません。
次のようなコードを見てください:

    SV* sv = (SV*) 0;
    if (I-am-to-return-a-real-value) {
            sv = sv_2mortal(newSViv(42));
    }
    sv_setsv(ST(0), sv);

=begin original

This code tries to return a new SV (which contains the value 42) if it should
return a real value, or undef otherwise.  Instead it has returned a NULL
pointer which, somewhere down the line, will cause a segmentation violation,
bus error, or just weird results.  Change the zero to C<&PL_sv_undef> in the
first line and all will be well.

=end original

このコードは、実値を返さなければならないときには、(値として 42 を
持つ) 新しい SV を返そうとし、さもなくば undef を返そうとします。
ですが、どこかの行でナルポインタを返して、セグメントバイオレーションが
起こるか、何かおかしな結果になってしまいます。
最初の行の 0 を C<&PL_sv_undef> に変えれば、すべてがうまくいきます。

=begin original

To free an SV that you've created, call C<SvREFCNT_dec(SV*)>.  Normally this
call is not necessary (see L<Reference Counts and Mortality>).

=end original

生成した SV を解放するためには、C<SvREFCNT_dec(SV*)> を呼びます。
普通は、この呼び出しは必要ありません。
L<Reference Counts and Mortality> を参照してください。

=head2 Offsets

(オフセット)

=begin original

Perl provides the function C<sv_chop> to efficiently remove characters
from the beginning of a string; you give it an SV and a pointer to
somewhere inside the PV, and it discards everything before the
pointer. The efficiency comes by means of a little hack: instead of
actually removing the characters, C<sv_chop> sets the flag C<OOK>
(offset OK) to signal to other functions that the offset hack is in
effect, and it puts the number of bytes chopped off into the IV field
of the SV. It then moves the PV pointer (called C<SvPVX>) forward that
many bytes, and adjusts C<SvCUR> and C<SvLEN>.

=end original

Perl provides the function C<sv_chop> to efficiently remove characters
from the beginning of a string; you give it an SV and a pointer to
somewhere inside the PV, and it discards everything before the
pointer. The efficiency comes by means of a little hack: instead of
actually removing the characters, C<sv_chop> sets the flag C<OOK>
(offset OK) to signal to other functions that the offset hack is in
effect, and it puts the number of bytes chopped off into the IV field
of the SV. It then moves the PV pointer (called C<SvPVX>) forward that
many bytes, and adjusts C<SvCUR> and C<SvLEN>.
(TBT)

=begin original

Hence, at this point, the start of the buffer that we allocated lives
at C<SvPVX(sv) - SvIV(sv)> in memory and the PV pointer is pointing
into the middle of this allocated storage.

=end original

Hence, at this point, the start of the buffer that we allocated lives
at C<SvPVX(sv) - SvIV(sv)> in memory and the PV pointer is pointing
into the middle of this allocated storage.
(TBT)

=begin original

This is best demonstrated by example:

=end original

これは例による最良の実演です:

  % ./perl -Ilib -MDevel::Peek -le '$a="12345"; $a=~s/.//; Dump($a)'
  SV = PVIV(0x8128450) at 0x81340f0
    REFCNT = 1
    FLAGS = (POK,OOK,pPOK)
    IV = 1  (OFFSET)
    PV = 0x8135781 ( "1" . ) "2345"\0
    CUR = 4
    LEN = 5

=begin original

Here the number of bytes chopped off (1) is put into IV, and
C<Devel::Peek::Dump> helpfully reminds us that this is an offset. The
portion of the string between the "real" and the "fake" beginnings is
shown in parentheses, and the values of C<SvCUR> and C<SvLEN> reflect
the fake beginning, not the real one.

=end original

Here the number of bytes chopped off (1) is put into IV, and
C<Devel::Peek::Dump> helpfully reminds us that this is an offset. The
portion of the string between the "real" and the "fake" beginnings is
shown in parentheses, and the values of C<SvCUR> and C<SvLEN> reflect
the fake beginning, not the real one.
(TBT)

=begin original

Something similar to the offset hack is performed on AVs to enable
efficient shifting and splicing off the beginning of the array; while
C<AvARRAY> points to the first element in the array that is visible from
Perl, C<AvALLOC> points to the real start of the C array. These are
usually the same, but a C<shift> operation can be carried out by
increasing C<AvARRAY> by one and decreasing C<AvFILL> and C<AvLEN>.
Again, the location of the real start of the C array only comes into
play when freeing the array. See C<av_shift> in F<av.c>.

=end original

Something similar to the offset hack is performed on AVs to enable
efficient shifting and splicing off the beginning of the array; while
C<AvARRAY> points to the first element in the array that is visible from
Perl, C<AvALLOC> points to the real start of the C array. These are
usually the same, but a C<shift> operation can be carried out by
increasing C<AvARRAY> by one and decreasing C<AvFILL> and C<AvLEN>.
Again, the location of the real start of the C array only comes into
play when freeing the array. See C<av_shift> in F<av.c>.
(TBT)

=head2 What's Really Stored in an SV?

(SV に実際に格納されているものは何ですか?)

=begin original

Recall that the usual method of determining the type of scalar you have is
to use C<Sv*OK> macros.  Because a scalar can be both a number and a string,
usually these macros will always return TRUE and calling the C<Sv*V>
macros will do the appropriate conversion of string to integer/double or
integer/double to string.

=end original

自分で保持しているスカラの型を決定する通常の方法は、マクロ C<Sv*OK> を
使うものでした。
スカラは数値にも文字列にもなり得ますから、普通、
これらのマクロはいつも真を返します。
そして C<Sv*V> マクロを呼ぶことで、
文字列から整数/倍精度、整数/倍精度から文字列への変換を行ないます。

=begin original

If you I<really> need to know if you have an integer, double, or string
pointer in an SV, you can use the following three macros instead:

=end original

もし、本当に SV にあるのが整数か、倍精度か、文字列ポインタかを
知りたいのであれば、

    SvIOKp(SV*)
    SvNOKp(SV*)
    SvPOKp(SV*)

=begin original

These will tell you if you truly have an integer, double, or string pointer
stored in your SV.  The "p" stands for private.

=end original

というマクロを代わりに使うことができます。
これらのマクロは、実際に SV に入っているものが整数か、倍精度か、
文字列ポインタかを教えてくれます。

=begin original

The are various ways in which the private and public flags may differ.
For example, a tied SV may have a valid underlying value in the IV slot
(so SvIOKp is true), but the data should be accessed via the FETCH
routine rather than directly, so SvIOK is false. Another is when
numeric conversion has occurred and precision has been lost: only the
private flag is set on 'lossy' values. So when an NV is converted to an
IV with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.

=end original

The are various ways in which the private and public flags may differ.
For example, a tied SV may have a valid underlying value in the IV slot
(so SvIOKp is true), but the data should be accessed via the FETCH
routine rather than directly, so SvIOK is false. Another is when
numeric conversion has occurred and precision has been lost: only the
private flag is set on 'lossy' values. So when an NV is converted to an
IV with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.
(TBT)

=begin original

In general, though, it's best to use the C<Sv*V> macros.

=end original

しかし一般的には、C<Sv*V> マクロを使うだけにした方が良いでしょう。

=head2 Working with AVs

(AV に対する作業)

=begin original

There are two ways to create and load an AV.  The first method creates an
empty AV:

=end original

AV を生成して値を設定するのには、二つの方法があります。
最初の方法は、単に空の AV を作るものです:

    AV*  newAV();

=begin original

The second method both creates the AV and initially populates it with SVs:

=end original

ふたつめの方法は、AV を生成した上で、初期値として SV の値を入れます:

    AV*  av_make(I32 num, SV **ptr);

=begin original

The second argument points to an array containing C<num> C<SV*>'s.  Once the
AV has been created, the SVs can be destroyed, if so desired.

=end original

二番目の引数は num 個の SV* の配列を指しています。
AV が生成されてしまえば、SV は(それを望むのなら)破棄することができます。

=begin original

Once the AV has been created, the following operations are possible on AVs:

=end original

いったん AV が生成されると、AV に対して、

    void  av_push(AV*, SV*);
    SV*   av_pop(AV*);
    SV*   av_shift(AV*);
    void  av_unshift(AV*, I32 num);

=begin original

These should be familiar operations, with the exception of C<av_unshift>.
This routine adds C<num> elements at the front of the array with the C<undef>
value.  You must then use C<av_store> (described below) to assign values
to these new elements.

=end original

といった操作が行えます。
これらは、C<av_unshift> を除いては、お馴染みの演算でしょう。
C<av_unshift> は、配列の先頭に C<num> 個の C<undef> 値の要素を付け加えます。
その後で、(後述する) C<av_store> を使って新しい要素に値を
代入しなければなりません。

=begin original

Here are some other functions:

=end original

他にもいくつか関数があります:

    I32   av_len(AV*);
    SV**  av_fetch(AV*, I32 key, I32 lval);
    SV**  av_store(AV*, I32 key, SV* val);

=begin original

The C<av_len> function returns the highest index value in array (just
like $#array in Perl).  If the array is empty, -1 is returned.  The
C<av_fetch> function returns the value at index C<key>, but if C<lval>
is non-zero, then C<av_fetch> will store an undef value at that index.
The C<av_store> function stores the value C<val> at index C<key>, and does
not increment the reference count of C<val>.  Thus the caller is responsible
for taking care of that, and if C<av_store> returns NULL, the caller will
have to decrement the reference count to avoid a memory leak.  Note that
C<av_fetch> and C<av_store> both return C<SV**>'s, not C<SV*>'s as their
return value.

=end original

関数 C<av_len> は配列における最高位の添え字を(ちょうど Perl の $#array と
同じように)返します。
もし配列が空であれば、-1 を返します。
関数 C<av_fetch> は添え字 C<key> の位置にある値を返しますが、C<lval> が
非ゼロであれば、C<av_fetch> はその位置に undef を格納しようとします。
関数 C<av_store> は添え字 C<key> の位置に値 C<val> を格納し、C<val> の
参照カウントをインクリメントしません。
従って、呼び出し側はこの振る舞いに注意して対処し、C<av_store> が
NULL を返した場合には、メモリーリークを防ぐために参照カウントの
デクリメントを行う必要があるでしょう。
C<av_fetch> と C<av_store> の両方ともがその戻り値として
C<SV*> ではなく、C<SV**> を返すということに注意してください。

    void  av_clear(AV*);
    void  av_undef(AV*);
    void  av_extend(AV*, I32 key);

=begin original

The C<av_clear> function deletes all the elements in the AV* array, but
does not actually delete the array itself.  The C<av_undef> function will
delete all the elements in the array plus the array itself.  The
C<av_extend> function extends the array so that it contains at least C<key+1>
elements.  If C<key+1> is less than the currently allocated length of the array,
then nothing is done.

=end original

関数 C<av_clear> は、配列 AV* にあるすべての要素を削除しますが、
配列自身の削除は行いません。
関数 C<av_undef> は配列にあるすべての要素に加え、配列自身の削除も行います。
関数 C<av_extend>  は配列を C<key+1> 要素だけ拡張します。
C<key+1> が配列のその時点での長さより短ければ、何も行なわれません。

=begin original

If you know the name of an array variable, you can get a pointer to its AV
by using the following:

=end original

配列変数の名前がわかっているのであれば、次のようにしてその配列に
対応する AV へのポインタを得ることができます。

    AV*  get_av("package::varname", FALSE);

=begin original

This returns NULL if the variable does not exist.

=end original

これは変数が存在していない場合には NULL を返します。

=begin original

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use the array access functions on tied arrays.

=end original

tie された配列における配列アクセス関数の使い方についての詳細は
L<Understanding the Magic of Tied Hashes and Arrays> を参照してください。

=head2 Working with HVs

(HV に対する作業)

=begin original

To create an HV, you use the following routine:

=end original

HV を生成するには、

    HV*  newHV();

=begin original

Once the HV has been created, the following operations are possible on HVs:

=end original

というルーチンを使います。
いったん HV が生成されると HV に対して、

    SV**  hv_store(HV*, const char* key, U32 klen, SV* val, U32 hash);
    SV**  hv_fetch(HV*, const char* key, U32 klen, I32 lval);

=begin original

The C<klen> parameter is the length of the key being passed in (Note that
you cannot pass 0 in as a value of C<klen> to tell Perl to measure the
length of the key).  The C<val> argument contains the SV pointer to the
scalar being stored, and C<hash> is the precomputed hash value (zero if
you want C<hv_store> to calculate it for you).  The C<lval> parameter
indicates whether this fetch is actually a part of a store operation, in
which case a new undefined value will be added to the HV with the supplied
key and C<hv_fetch> will return as if the value had already existed.

=end original

という操作が行えます。
引数 C<klen> は、渡される key の長さです
(Perl にキーの長さを計算させるために、C<klen>> の値として 0 を渡すことは
できないということに注意してください)。
引数 C<val> は、設定されるスカラへの SV ポインタを入れ、hash は、
あらかじめ計算したハッシュ値 (C<hv_store> に計算させる場合には、
ゼロ) です。
引数 C<lval> で、このフェッチ操作が実はストア操作の一部であるかどうかを
示します。
ストア操作であれば、新たなundefind value が与えられた
キーを伴って HV に追加され、C<hv_fetch> はその値が既に
存在していたかのようにリターンします。

=begin original

Remember that C<hv_store> and C<hv_fetch> return C<SV**>'s and not just
C<SV*>.  To access the scalar value, you must first dereference the return
value.  However, you should check to make sure that the return value is
not NULL before dereferencing it.

=end original

C<hv_store> や C<hv_fetch> は、C<SV**> を返すもので、C<SV*> ではないことに
注意してください。
スカラ値をアクセスするには、まず戻り値の参照外し(dereference)をする
必要があります。
しかし、その前に返却値が NULL でないことを確認すべきです。

=begin original

These two functions check if a hash table entry exists, and deletes it.

=end original

ハッシュテーブルのエントリが存在するかをチェックし、削除を行う
関数があります。

    bool  hv_exists(HV*, const char* key, U32 klen);
    SV*   hv_delete(HV*, const char* key, U32 klen, I32 flags);

=begin original

If C<flags> does not include the C<G_DISCARD> flag then C<hv_delete> will
create and return a mortal copy of the deleted value.

=end original

C<flag> に C<G_DISCARD> フラグが含まれていなければ、C<hv_delete> は
削除された値の揮発性のコピー(mortal copy)を生成し、それを返します。

=begin original

And more miscellaneous functions:

=end original

さらに様々な関数があります:

    void   hv_clear(HV*);
    void   hv_undef(HV*);

=begin original

Like their AV counterparts, C<hv_clear> deletes all the entries in the hash
table but does not actually delete the hash table.  The C<hv_undef> deletes
both the entries and the hash table itself.

=end original

引数に AV を取る似たような関数と同様、C<hv_clear> はハッシュテーブルにある
すべてのエントリーを削除しますがハッシュテーブル自身は削除しません。
C<hv_undef> はエントリーとハッシュテーブル自身の両方を削除します。

=begin original

Perl keeps the actual data in linked list of structures with a typedef of HE.
These contain the actual key and value pointers (plus extra administrative
overhead).  The key is a string pointer; the value is an C<SV*>.  However,
once you have an C<HE*>, to get the actual key and value, use the routines
specified below.

=end original

Perl は実際のデータを HE と typedef された構造体のリンクリストを使って
保持しています。
これらは実際のキーと値のポインタ(それに加えて管理のための
ちょっとしたもの)を保持しています。
キーは文字列へのポインタであり、値は C<SV*> です。
しかしながら、一度 C<HE*> を持てば、実際のキーと値とを取得するためには
以下に挙げるようなルーチンを使います。

=begin original

    I32    hv_iterinit(HV*);
            /* Prepares starting point to traverse hash table */
    HE*    hv_iternext(HV*);
            /* Get the next entry, and return a pointer to a
               structure that has both the key and value */
    char*  hv_iterkey(HE* entry, I32* retlen);
            /* Get the key from an HE structure and also return
               the length of the key string */
    SV*    hv_iterval(HV*, HE* entry);
            /* Return an SV pointer to the value of the HE
               structure */
    SV*    hv_iternextsv(HV*, char** key, I32* retlen);
            /* This convenience routine combines hv_iternext,
	       hv_iterkey, and hv_iterval.  The key and retlen
	       arguments are return values for the key and its
	       length.  The value is returned in the SV* argument */

=end original

    I32    hv_iterinit(HV*);
            /* ハッシュテーブルをたどるための開始点を準備 */
    HE*    hv_iternext(HV*);
            /* 次のエントリーを取得して、キーと値両方を持つ構造
               体へのポインタを返す */
    char*  hv_iterkey(HE* entry, I32* retlen);
            /* HE 構造体からキーを取得し、そのキー文字列の長さを
               返す */
    SV*    hv_iterval(HV*, HE* entry);
            /* HE 構造体の値に対する SV ポインタを返す */
    SV*    hv_iternextsv(HV*, char** key, I32* retlen);
            /* この便利なルーチンは、hv_iternext、hv_iterkey、
                hv_itervalを組み合わせたものです。
                引数keyとretlenは、キーとその長さを表わす戻り値です。
                関数の戻り値はSV* で返されます。*/

=begin original

If you know the name of a hash variable, you can get a pointer to its HV
by using the following:

=end original

配列変数の名前がわかるのであれば、

    HV*  get_hv("package::varname", FALSE);

=begin original

This returns NULL if the variable does not exist.

=end original

を使えば、その変数の HV へのポインタが得られます。
その変数が存在しない場合には NULL を返します。

=begin original

The hash algorithm is defined in the C<PERL_HASH(hash, key, klen)> macro:

=end original

ハッシュアルゴリズムは C<PERL_HASH(hash, key, klen)> というマクロで
定義されています。

    hash = 0;
    while (klen--)
	hash = (hash * 33) + *key++;
    hash = hash + (hash >> 5);			/* after 5.6 */

=begin original

The last step was added in version 5.6 to improve distribution of
lower bits in the resulting hash value.

=end original

最後のステップは、結果となるハッシュ値の低位ビットの分散を改良するために
バージョン 5.6 で追加されました。

=begin original

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use the hash access functions on tied hashes.

=end original

tie されたハッシュに対するハッシュアクセス関数の使い方に
関する詳細は、L<Understanding the Magic of Tied Hashes and Arrays> を
参照してください。

=head2 Hash API Extensions

(ハッシュ API 拡張)

=begin original

Beginning with version 5.004, the following functions are also supported:

=end original

バージョン 5.004 から、以下の関数がサポートされました。

    HE*     hv_fetch_ent  (HV* tb, SV* key, I32 lval, U32 hash);
    HE*     hv_store_ent  (HV* tb, SV* key, SV* val, U32 hash);

    bool    hv_exists_ent (HV* tb, SV* key, U32 hash);
    SV*     hv_delete_ent (HV* tb, SV* key, I32 flags, U32 hash);

    SV*     hv_iterkeysv  (HE* entry);

=begin original

Note that these functions take C<SV*> keys, which simplifies writing
of extension code that deals with hash structures.  These functions
also allow passing of C<SV*> keys to C<tie> functions without forcing
you to stringify the keys (unlike the previous set of functions).

=end original

これらの関数が、ハッシュ構造を扱うエクステンションの記述を単純にする
C<SV*> キーを引数にとることに注意してください。
これらの関数はまた、C<SV*> キーを(先に挙げた関数群とは異なり)
文字列化することなしに C<tie> 関数に渡すことを許しています。

=begin original

They also return and accept whole hash entries (C<HE*>), making their
use more efficient (since the hash number for a particular string
doesn't have to be recomputed every time).  See L<perlapi> for detailed
descriptions.

=end original

これらの関数はまた、ハッシュエントリー全体 (C<HE*>) を返したり受け付けて、
より効率良く使用します(特定の文字列に対するハッシュ番号は
毎回計算しなおす必要はないからです)。
詳しくは L<perlapi> を参照してください。

=begin original

The following macros must always be used to access the contents of hash
entries.  Note that the arguments to these macros must be simple
variables, since they may get evaluated more than once.  See
L<perlapi> for detailed descriptions of these macros.

=end original

以下に挙げるマクロは、ハッシュエントリーの内容にアクセスするのに
常に使わなければならないものです。
これらのマクロはその引数を二度以上評価する可能性があるので、マクロに
対する引数は単純な変数でなければならないということに注意してください。
これらのマクロに関する詳細は L<perlapi> を参照してください。

    HePV(HE* he, STRLEN len)
    HeVAL(HE* he)
    HeHASH(HE* he)
    HeSVKEY(HE* he)
    HeSVKEY_force(HE* he)
    HeSVKEY_set(HE* he, SV* sv)

=begin original

These two lower level macros are defined, but must only be used when
dealing with keys that are not C<SV*>s:

=end original

低レベルマクロが二つ定義されていますが、これらは C<SV*> ではないキーを
扱うときにのみ使わなければならないものです。

    HeKEY(HE* he)
    HeKLEN(HE* he)

=begin original

Note that both C<hv_store> and C<hv_store_ent> do not increment the
reference count of the stored C<val>, which is the caller's responsibility.
If these functions return a NULL value, the caller will usually have to
decrement the reference count of C<val> to avoid a memory leak.

=end original

C<hv_store> と C<hv_store_ent> の両方ともが、C<val> に格納されている
参照カウントのインクリメントをしないということに注意してください。
それは呼び出し側の責任です。
これらの関数が NULL を返した場合、
呼び出し側はメモリーリークを防ぐために、C<val> の参照カウントの
デクリメントを行う必要が一般にはあるでしょう。

=head2 AVs, HVs and undefined values

(AV, HV と未定義値)

=begin original

Sometimes you have to store undefined values in AVs or HVs. Although
this may be a rare case, it can be tricky. That's because you're
used to using C<&PL_sv_undef> if you need an undefined SV.

=end original

AV や HV に未定義値を保管しなければならないこともあります。
これは珍しい場合ですが、手の込んだものになります。
なぜなら、未定義の SV が必要なら、C<&PL_sv_undef> を使うことになるからです。

=begin original

For example, intuition tells you that this XS code:

=end original

例えば、直感ではこの XS コードは:

    AV *av = newAV();
    av_store( av, 0, &PL_sv_undef );

=begin original

is equivalent to this Perl code:

=end original

以下の Perl コードと等価です:

    my @av;
    $av[0] = undef;

=begin original

Unfortunately, this isn't true. AVs use C<&PL_sv_undef> as a marker
for indicating that an array element has not yet been initialized.
Thus, C<exists $av[0]> would be true for the above Perl code, but
false for the array generated by the XS code.

=end original

残念ながら、これは正しくありません。
AV は、配列要素がまだ初期化されていないことを示すための印として
C<&PL_sv_undef> を使います。
従って、上述の Perl コードは C<exists $av[0]> は真ですが、
XS コードによって生成された配列では偽です。

=begin original

Other problems can occur when storing C<&PL_sv_undef> in HVs:

=end original

HV に C<&PL_sv_undef> を保管する時にも別の問題が起こりえます:

    hv_store( hv, "key", 3, &PL_sv_undef, 0 );

=begin original

This will indeed make the value C<undef>, but if you try to modify
the value of C<key>, you'll get the following error:

=end original

実際これは C<undef> 値を作りますが、C<key> の値を変更しようとすると、
以下のようなエラーが出ます:

    Modification of non-creatable hash value attempted

=begin original

In perl 5.8.0, C<&PL_sv_undef> was also used to mark placeholders
in restricted hashes. This caused such hash entries not to appear
when iterating over the hash or when checking for the keys
with the C<hv_exists> function.

=end original

In perl 5.8.0, C<&PL_sv_undef> was also used to mark placeholders
in restricted hashes. This caused such hash entries not to appear
when iterating over the hash or when checking for the keys
with the C<hv_exists> function.
(TBT)

=begin original

You can run into similar problems when you store C<&PL_sv_true> or
C<&PL_sv_false> into AVs or HVs. Trying to modify such elements
will give you the following error:

=end original

You can run into similar problems when you store C<&PL_sv_true> or
C<&PL_sv_false> into AVs or HVs. Trying to modify such elements
will give you the following error:
(TBT)

    Modification of a read-only value attempted

=begin original

To make a long story short, you can use the special variables
C<&PL_sv_undef>, C<&PL_sv_true> and C<&PL_sv_false> with AVs and
HVs, but you have to make sure you know what you're doing.

=end original

To make a long story short, you can use the special variables
C<&PL_sv_undef>, C<&PL_sv_true> and C<&PL_sv_false> with AVs and
HVs, but you have to make sure you know what you're doing.
(TBT)

=begin original

Generally, if you want to store an undefined value in an AV
or HV, you should not use C<&PL_sv_undef>, but rather create a
new undefined value using the C<newSV> function, for example:

=end original

Generally, if you want to store an undefined value in an AV
or HV, you should not use C<&PL_sv_undef>, but rather create a
new undefined value using the C<newSV> function, for example:
(TBT)

    av_store( av, 42, newSV(0) );
    hv_store( hv, "foo", 3, newSV(0), 0 );

=head2 References

(リファレンス)

=begin original

References are a special type of scalar that point to other data types
(including references).

=end original

リファレンスは、(リファレンスを含む) 他のスカラ型を指す特別な
スカラ型です。

=begin original

To create a reference, use either of the following functions:

=end original

リファレンスを生成するには、

    SV* newRV_inc((SV*) thing);
    SV* newRV_noinc((SV*) thing);

=begin original

The C<thing> argument can be any of an C<SV*>, C<AV*>, or C<HV*>.  The
functions are identical except that C<newRV_inc> increments the reference
count of the C<thing>, while C<newRV_noinc> does not.  For historical
reasons, C<newRV> is a synonym for C<newRV_inc>.

=end original

C<thing> には、C<SV*>, C<AV*>, C<HV*> のいずれかを置くことができます。
これら二つの関数は、C<newRV_inc> が C<thing> の参照カウントを
インクリメントするが C<newRV_noinc> はインクリメントしないという点を
除き、同一です。
歴史的な理由により、C<newRV> は C<newRV_inc> の同義語となっています。

=begin original

Once you have a reference, you can use the following macro to dereference
the reference:

=end original

リファレンスができれば、以下のマクロを使ってリファレンスの参照外し
(dereference)ができます。

    SvRV(SV*)

=begin original

then call the appropriate routines, casting the returned C<SV*> to either an
C<AV*> or C<HV*>, if required.

=end original

というマクロが使うことができ、返された C<SV*> を C<AV*> か C<HV*> に
キャストして、適切なルーチンを呼ぶことになります。

=begin original

To determine if an SV is a reference, you can use the following macro:

=end original

SV がリファレンスであるかどうかを確認するために、
以下のマクロを使うことができます。

    SvROK(SV*)

=begin original

To discover what type of value the reference refers to, use the following
macro and then check the return value.

=end original

リファレンスが参照している型を見つけるために、以下のマクロを
使いその戻り値をチェックします。

    SvTYPE(SvRV(SV*))

=begin original

The most useful types that will be returned are:

=end original

戻り値として返される型で有益なものは以下の通りです。

=begin original

    SVt_IV    Scalar
    SVt_NV    Scalar
    SVt_PV    Scalar
    SVt_RV    Scalar
    SVt_PVAV  Array
    SVt_PVHV  Hash
    SVt_PVCV  Code
    SVt_PVGV  Glob (possible a file handle)
    SVt_PVMG  Blessed or Magical Scalar

=end original

    SVt_IV    スカラ
    SVt_NV    スカラ
    SVt_PV    スカラ
    SVt_RV    スカラ
    SVt_PVAV  配列
    SVt_PVHV  ハッシュ
    SVt_PVCV  Code
    SVt_PVGV  グロブ (possible a file handle)
    SVt_PVMG  Blessed or Magical Scalar
(TBT)

=begin original

    See the sv.h header file for more details.

=end original

    詳しくはヘッダーファイル sv.hを参照してください。

=head2 Blessed References and Class Objects

(Bless されたリファレンスとクラスオブジェクト)

=begin original

References are also used to support object-oriented programming.  In perl's
OO lexicon, an object is simply a reference that has been blessed into a
package (or class).  Once blessed, the programmer may now use the reference
to access the various methods in the class.

=end original

リファレンスはオブジェクト指向プログラミングをサポートするためにも
使われます。
perl のオブジェクト指向用語では、オブジェクトとはパッケージ
(もしくはクラス)に bless された単純なリファレンスです。
一度 bless されれば、プログラマーはそのリファレンスをクラスにおける様々な
メソッドにアクセスするために使うことができます。

=begin original

A reference can be blessed into a package with the following function:

=end original

以下の関数を使って、リファレンスをパッケージに bless することができます。

    SV* sv_bless(SV* sv, HV* stash);

=begin original

The C<sv> argument must be a reference value.  The C<stash> argument
specifies which class the reference will belong to.  See
L<Stashes and Globs> for information on converting class names into stashes.

=end original

引数 C<sv> はリファレンス値でなければなりません。
引数 C<stash> はリファレンスが属するクラスを指定します。
クラス名のstashへの変換についての詳細は L<Stashes and Globs> を
参照してください。

=begin original

/* Still under construction */

=end original

/* Still under construction */

=begin original

Upgrades rv to reference if not already one.  Creates new SV for rv to
point to.  If C<classname> is non-null, the SV is blessed into the specified
class.  SV is returned.

=end original

まだ存在していなければ、rv をリファレンスにアップグレードします。
rv が指し示すための新たな SV を生成します。
C<classname> がナルでなければ、SV は指定されたクラスに bless され、
SV が返されます。

	SV* newSVrv(SV* rv, const char* classname);

=begin original

Copies integer, unsigned integer or double into an SV whose reference is C<rv>.  SV is blessed
if C<classname> is non-null.

=end original

整数、符号なし整数、倍精度実数を C<rv> が参照している SV へコピーします。
SV は C<classname> がナルでなければblessされます。

	SV* sv_setref_iv(SV* rv, const char* classname, IV iv);
	SV* sv_setref_uv(SV* rv, const char* classname, UV uv);
	SV* sv_setref_nv(SV* rv, const char* classname, NV iv);

=begin original

Copies the pointer value (I<the address, not the string!>) into an SV whose
reference is rv.  SV is blessed if C<classname> is non-null.

=end original

ポインタ値(B<アドレスであって、文字列ではありません!>)を rv が
参照しているSVへコピーします。
SV は C<classname> がナルでなければ bless されます。

	SV* sv_setref_pv(SV* rv, const char* classname, PV iv);

=begin original

Copies string into an SV whose reference is C<rv>.  Set length to 0 to let
Perl calculate the string length.  SV is blessed if C<classname> is non-null.

=end original

文字列を C<rv> が参照している SV へコピーします。
length に 0 を設定すると、Perl が文字列の長さを計算します。
SV は C<classname> がナルでなければ bless されます。

	SV* sv_setref_pvn(SV* rv, const char* classname, PV iv, STRLEN length);

=begin original

Tests whether the SV is blessed into the specified class.  It does not
check inheritance relationships.

=end original

SV が特定のクラスに bless されているかどうかを検査します。
これは継承の関係のチェックはしません。

	int  sv_isa(SV* sv, const char* name);

=begin original

Tests whether the SV is a reference to a blessed object.

=end original

SV が bless されたオブジェクトのリファレンスであるかどうかを検査します。

	int  sv_isobject(SV* sv);

=begin original

Tests whether the SV is derived from the specified class. SV can be either
a reference to a blessed object or a string containing a class name. This
is the function implementing the C<UNIVERSAL::isa> functionality.

=end original

SV が特定のクラスから派生したものがどうかを検査します。
SV は bless されたオブジェクトのリファレンスでも、
クラス名を保持している文字列であってもかまいません。
これは C<UNIVERSAL::isa> の機能を実装している関数です。

	bool sv_derived_from(SV* sv, const char* name);

=begin original

To check if you've got an object derived from a specific class you have
to write:

=end original

ある特定のクラスの派生オブジェクトを受け取ったかどうか検査するには、
以下のように書く必要があります。

	if (sv_isobject(sv) && sv_derived_from(sv, class)) { ... }

=head2 Creating New Variables

(新しい変数の作成)

=begin original

To create a new Perl variable with an undef value which can be accessed from
your Perl script, use the following routines, depending on the variable type.

=end original

undef という値を持つあなたの Perl スクリプトからアクセスできる新たな
Perl の変数を生成するには、以下に示すルーチンを変数の型に応じて
使います。

    SV*  get_sv("package::varname", TRUE);
    AV*  get_av("package::varname", TRUE);
    HV*  get_hv("package::varname", TRUE);

=begin original

Notice the use of TRUE as the second parameter.  The new variable can now
be set, using the routines appropriate to the data type.

=end original

二番目のパラメータとして TRUE を使っているということに注意してください。
新しい変数はここでデータ型に対する適切なルーチンを使うことで
設定することができます。

=begin original

There are additional macros whose values may be bitwise OR'ed with the
C<TRUE> argument to enable certain extra features.  Those bits are:

=end original

C<TRUE> 引数とビット和を取って、幾つかの追加機能を有効とするような
二つのマクロがあります。

=over

=item GV_ADDMULTI

=begin original

Marks the variable as multiply defined, thus preventing the:

=end original

変数に多重定義 (multiply defined) であると印を付け:

  Name <varname> used only once: possible typo

=begin original

warning.

=end original

警告を防ぎます。

=item GV_ADDWARN

=begin original

Issues the warning:

=end original

以下の警告を:

  Had to create <varname> unexpectedly

=begin original

if the variable did not exist before the function was called.

=end original

変数が、その関数の呼び出し以前に存在してなかった場合に発生させます。

=back

=begin original

If you do not specify a package name, the variable is created in the current
package.

=end original

パッケージ名を指定しなかった場合、変数はカレントパッケージで
生成されます。

=head2 Reference Counts and Mortality

(参照カウントと揮発性)

=begin original

Perl uses a reference count-driven garbage collection mechanism. SVs,
AVs, or HVs (xV for short in the following) start their life with a
reference count of 1.  If the reference count of an xV ever drops to 0,
then it will be destroyed and its memory made available for reuse.

=end original

Perl は参照カウント駆動(reference count-driven)のガベージコレクション
機構を使用しています。
SV、AV、そしてHV(以下 xV と省略します)
はその一生を参照カウント 1 から始めます。
xV の参照カウントが0まで落ちた場合、そのリファレンスは破棄されて、
それが使っていたメモリは
再利用できるようにされます。

=begin original

This normally doesn't happen at the Perl level unless a variable is
undef'ed or the last variable holding a reference to it is changed or
overwritten.  At the internal level, however, reference counts can be
manipulated with the following macros:

=end original

これは、Perl レベルにおいては、変数が undef されるとかリファレンスを
保持している最後の変数が変更されたとか上書きされるということがない限りは
起こりません。
しかし内部的には、参照カウントは以下に挙げるマクロを使って
操作することができます。

    int SvREFCNT(SV* sv);
    SV* SvREFCNT_inc(SV* sv);
    void SvREFCNT_dec(SV* sv);

=begin original

However, there is one other function which manipulates the reference
count of its argument.  The C<newRV_inc> function, you will recall,
creates a reference to the specified argument.  As a side effect,
it increments the argument's reference count.  If this is not what
you want, use C<newRV_noinc> instead.

=end original

その引数の参照カウントを操作する別の関数が一つあります。
C<newRV_inc> という関数がそれです。
これは指定された引数の参照を生成して、その副作用として引数の
参照カウントをインクリメントします。
もしこの副作用が邪魔であれば、C<newRV_noinc> を代わりに使ってください。

=begin original

For example, imagine you want to return a reference from an XSUB function.
Inside the XSUB routine, you create an SV which initially has a reference
count of one.  Then you call C<newRV_inc>, passing it the just-created SV.
This returns the reference as a new SV, but the reference count of the
SV you passed to C<newRV_inc> has been incremented to two.  Now you
return the reference from the XSUB routine and forget about the SV.
But Perl hasn't!  Whenever the returned reference is destroyed, the
reference count of the original SV is decreased to one and nothing happens.
The SV will hang around without any way to access it until Perl itself
terminates.  This is a memory leak.

=end original

たとえば、XSUB 関数からリファレンスを返したいと思ったとしましょう。
XSUB ルーチンの中で、初期値として参照カウント 1 を持つ SV を生成します。
それから今作成した SV を引数にして C<newRV_inc> を呼びます。
これは新たな SV としての参照を返しますが、C<newRV_inc> に引数として渡した
SV の参照カウントは 2 にインクリメントされます。
ここで XSUB ルーチンからそのリファレンスを戻り値として返し、SV のことは
忘れましょう。
けれども Perl は忘れてません! 
戻り値で返されたリファレンスが破棄されたときにはいつも、元々の SV の
参照カウントが 1 へと減じられ、そして何事もおこりません。
その SV は、Perl 自身が終了するまではそれにアクセスするなんの手段も
持たずに中ぶらりんになります。

=begin original

The correct procedure, then, is to use C<newRV_noinc> instead of
C<newRV_inc>.  Then, if and when the last reference is destroyed,
the reference count of the SV will go to zero and it will be destroyed,
stopping any memory leak.

=end original

ここでの正しい手順は、C<newRV_inc> ではなく C<newRV_noinc> を
使うということです。
これによって、最後のリファレンスが破棄されたときに
SV のリファレンスカウントは0となってその SV が破棄されて、メモリー
リークを食い止めます。

=begin original

There are some convenience functions available that can help with the
destruction of xVs.  These functions introduce the concept of "mortality".
An xV that is mortal has had its reference count marked to be decremented,
but not actually decremented, until "a short time later".  Generally the
term "short time later" means a single Perl statement, such as a call to
an XSUB function.  The actual determinant for when mortal xVs have their
reference count decremented depends on two macros, SAVETMPS and FREETMPS.
See L<perlcall> and L<perlxs> for more details on these macros.

=end original

xVsを破棄するのを助けるような便利な関数が幾つかあります。
これらの関数は “揮発性”(mortality)のコンセプトを導入します。
ある揮発性のxVはその参照カウントをデクリメントするようにマークしますが、
実際には“ちょっと後”(a short time later)までデクリメントが
行なわれません。
一般的には、“ちょっと後”とは、XSUB 関数の呼び出しのような
Perl の一つの文です。
揮発性の xV が持っている参照カウントの
デクリメントを行うタイミングの決定は二つのマクロ、SAVETMPS と
FREETMPS に依存しています。
これら二つのマクロについての説明は
L<perlcall> と L<perlxs> を参照してください。

=begin original

"Mortalization" then is at its simplest a deferred C<SvREFCNT_dec>.
However, if you mortalize a variable twice, the reference count will
later be decremented twice.

=end original

“Mortalization”はそれから、C<SvREFCNT_dec> に決定権を委ねます。
しかし、ある変数を二度揮発的にした場合、その参照カウントは後で
二度デクリメントされます。

=begin original

"Mortal" SVs are mainly used for SVs that are placed on perl's stack.
For example an SV which is created just to pass a number to a called sub
is made mortal to have it cleaned up automatically when it's popped off
the stack. Similarly, results returned by XSUBs (which are pushed on the
stack) are often made mortal.

=end original

"Mortal" SVs are mainly used for SVs that are placed on perl's stack.
For example an SV which is created just to pass a number to a called sub
is made mortal to have it cleaned up automatically when it's popped off
the stack. Similarly, results returned by XSUBs (which are pushed on the
stack) are often made mortal.
(TBT)

=begin original

To create a mortal variable, use the functions:

=end original

揮発性の変数を生成するには、以下の関数を使います:

    SV*  sv_newmortal()
    SV*  sv_2mortal(SV*)
    SV*  sv_mortalcopy(SV*)

=begin original

The first call creates a mortal SV (with no value), the second converts an existing
SV to a mortal SV (and thus defers a call to C<SvREFCNT_dec>), and the
third creates a mortal copy of an existing SV.
Because C<sv_newmortal> gives the new SV no value,it must normally be given one
via C<sv_setpv>, C<sv_setiv>, etc. :

=end original

最初のものは(値のない)揮発性の SV を生成し、ふたつめ
は既にある SV を揮発性の SV に変換します(そして、このために
C<SvREFCNT_dec> を呼び出しを遅らせます)。
三つめは、既に存在する SV の揮発性のコピーを生成します。
C<sv_newmortal> は値のない新しい SV を作るので、普通は
C<sv_setpv>, C<sv_setiv> などを使って作らなければなりません:

    SV *tmp = sv_newmortal();
    sv_setiv(tmp, an_integer);

=begin original

As that is multiple C statements it is quite common so see this idiom instead:

=end original

これは C の複数文なので、代わりにこの慣用法がとても一般的です:

    SV *tmp = sv_2mortal(newSViv(an_integer));


=begin original

You should be careful about creating mortal variables.  Strange things
can happen if you make the same value mortal within multiple contexts,
or if you make a variable mortal multiple times. Thinking of "Mortalization"
as deferred C<SvREFCNT_dec> should help to minimize such problems.
For example if you are passing an SV which you I<know> has high enough REFCNT
to survive its use on the stack you need not do any mortalization.
If you are not sure then doing an C<SvREFCNT_inc> and C<sv_2mortal>, or
making a C<sv_mortalcopy> is safer.

=end original

揮発性の変数を生成するに当たっては十分注意すべきです。
もし、同じ変数を複合コンテキストの中で揮発性にしたり、ある変数を複数回
揮発性にしてしまったりすればおかしな自体が起こるかもしれません。
Thinking of "Mortalization"
as deferred C<SvREFCNT_dec> should help to minimize such problems.
For example if you are passing an SV which you I<know> has high enough REFCNT
to survive its use on the stack you need not do any mortalization.
If you are not sure then doing an C<SvREFCNT_inc> and C<sv_2mortal>, or
making a C<sv_mortalcopy> is safer.
(TBT)

=begin original

The mortal routines are not just for SVs -- AVs and HVs can be
made mortal by passing their address (type-casted to C<SV*>) to the
C<sv_2mortal> or C<sv_mortalcopy> routines.

=end original

揮発性のルーチンは、単に SV のためだけではありません。
AV や HV も、C<sv_2mortal> や C<sv_mortalcopy> ルーチンに、アドレスを
(C<SV*> にキャストして) 渡すことで、揮発性にすることができます。

=head2 Stashes and Globs

(スタッシュとグロブ)

=begin original

A B<stash> is a hash that contains all variables that are defined
within a package.  Each key of the stash is a symbol
name (shared by all the different types of objects that have the same
name), and each value in the hash table is a GV (Glob Value).  This GV
in turn contains references to the various objects of that name,
including (but not limited to) the following:

=end original

スタッシュ("stash")とは、パッケージ内で定義された全ての変数が
入っているハッシュのことです。
ハッシュテーブルにあるそれぞれの key は、(同じ名前のすべての異なる型の
オブジェクトで共有される) シンボル名で、ハッシュテーブルの個々の
値は、(グローバル値のための) GV と呼ばれます。
GV には、以下のものを含む (これらに限りませんが)、その名前の様々な
オブジェクトへのリファレンスが次々に入ることになります。

    Scalar Value
    Array Value
    Hash Value
    I/O Handle
    Format
    Subroutine

=begin original

There is a single stash called C<PL_defstash> that holds the items that exist
in the C<main> package.  To get at the items in other packages, append the
string "::" to the package name.  The items in the C<Foo> package are in
the stash C<Foo::> in PL_defstash.  The items in the C<Bar::Baz> package are
in the stash C<Baz::> in C<Bar::>'s stash.

=end original

C<main> パッケージにあるアイテムを保持する C<PL_defstash> と呼ばれる
スタッシュがあります。
他のパッケージにあるアイテムを取得するため
には、パッケージ名に“::”を付加します。
C<Foo> というパッケージにあるアイテムは C<Foo::> という
PL_defstash の中にあります。
パッケージ C<Bar::Baz> にあるアイテムは C<Bar::> のスタッシュの中の
C<Baz::> のスタッシュの中にあります。

=begin original

To get the stash pointer for a particular package, use the function:

=end original

特定のパッケージの HV ポインタの入手には、以下の関数が使えます:

    HV*  gv_stashpv(const char* name, I32 flags)
    HV*  gv_stashsv(SV*, I32 flags)

=begin original

The first function takes a literal string, the second uses the string stored
in the SV.  Remember that a stash is just a hash table, so you get back an
C<HV*>.  The C<flags> flag will create a new package if it is set to GV_ADD.

=end original

最初の関数が、リテラル文字列をとり、二番目が SV に入れた文字列を使います。
stash は単なるハッシュなので、C<HV*> を受け取るということを
忘れないでください。
C<flag> フラグが
GV_ADD にセットされている場合には新たなパッケージを生成します。

=begin original

The name that C<gv_stash*v> wants is the name of the package whose symbol table
you want.  The default package is called C<main>.  If you have multiply nested
packages, pass their names to C<gv_stash*v>, separated by C<::> as in the Perl
language itself.

=end original

C<gv_stash*v> が要求する name はシンボルテーブルを手に入れようとする
パッケージの名前です。
デフォルトのパッケージは、C<main> というものです。
多重にネストしたパッケージであれば、Perl での場合と同様に、
C<::> で区切って C<gv_stash*v> に名前を渡すのが正しい方法です。

=begin original

Alternately, if you have an SV that is a blessed reference, you can find
out the stash pointer by using:

=end original

あるいは、もし bless されたリファレンスである SV があれば、
以下のようにしてを使ってもスタッシュポインタを探すことができ:

    HV*  SvSTASH(SvRV(SV*));

=begin original

then use the following to get the package name itself:

=end original

パッケージ名自身は、以下のようにして得られます:

    char*  HvNAME(HV* stash);

=begin original

If you need to bless or re-bless an object you can use the following
function:

=end original

Perl スクリプトへ bless された値を返す必要があれば、以下の関数が使えます:

    SV*  sv_bless(SV*, HV* stash)

=begin original

where the first argument, an C<SV*>, must be a reference, and the second
argument is a stash.  The returned C<SV*> can now be used in the same way
as any other SV.

=end original

最初の引数 C<SV*> はリファレンスで、二番目の引数がスタッシュです。
返された C<SV*> は、他の SV と同様に使うことができます。

=begin original

For more information on references and blessings, consult L<perlref>.

=end original

リファレンスと bless についてのより詳しい情報は L<perlref> を
参照してください。

=head2 Double-Typed SVs

(二重型 SV)

=begin original

Scalar variables normally contain only one type of value, an integer,
double, pointer, or reference.  Perl will automatically convert the
actual scalar data from the stored type into the requested type.

=end original

スカラ変数は通常、整数、倍精度、ポインタ、リファレンスのうちの
いずれか 一つの型をとります。
Perl は実際のデータに対して、蓄積されている型から要求されている型へ、
自動的に変換を行ないます。

=begin original

Some scalar variables contain more than one type of scalar data.  For
example, the variable C<$!> contains either the numeric value of C<errno>
or its string equivalent from either C<strerror> or C<sys_errlist[]>.

=end original

ある種のスカラ変数は、複数の型のスカラデータを持つようになっています。
たとえば変数 C<$!> は、C<errno> の数値としての値と、
C<strerror> や C<sys_errlist[]> から得たのと同値な文字列を持っています。

=begin original

To force multiple data values into an SV, you must do two things: use the
C<sv_set*v> routines to add the additional scalar type, then set a flag
so that Perl will believe it contains more than one type of data.  The
four macros to set the flags are:

=end original

SV に複数のデータ値を入れるようにするには、二つのことを
しなくてはなりません。
スカラ型を別に追加するために C<sv_set*v> ルーチンを使用すること。
それから、フラグを設定して Perl に複数のデータを
持っていることを知らせることです。
フラグを設定するための四つのマクロは以下のものです:

	SvIOK_on
	SvNOK_on
	SvPOK_on
	SvROK_on

=begin original

The particular macro you must use depends on which C<sv_set*v> routine
you called first.  This is because every C<sv_set*v> routine turns on
only the bit for the particular type of data being set, and turns off
all the rest.

=end original

使用するマクロは、最初にどの C<sv_set*v> ルーチンを呼ぶのかに
関わってきます。
これは、C<sv_set*v> ルーチンはすべて特定のデータ型のビットだけを
設定して、他をクリアしてしまうからです。

=begin original

For example, to create a new Perl variable called "dberror" that contains
both the numeric and descriptive string error values, you could use the
following code:

=end original

たとえば、"dberror" という新しい Perl 変数を作って、エラー値を数値と
メッセージ文字列で持つようにするには、以下のように書きます:

    extern int  dberror;
    extern char *dberror_list;

    SV* sv = get_sv("dberror", TRUE);
    sv_setiv(sv, (IV) dberror);
    sv_setpv(sv, dberror_list[dberror]);
    SvIOK_on(sv);

=begin original

If the order of C<sv_setiv> and C<sv_setpv> had been reversed, then the
macro C<SvPOK_on> would need to be called instead of C<SvIOK_on>.

=end original

C<sv_setiv> と C<sv_setpv> の順序が逆であった場合、C<SvIOK_on> マクロの
代わりに C<SvPOK_on> マクロを呼ばなければなりません。

=head2 Magic Variables

(マジック変数)

=begin original

[This section still under construction.  Ignore everything here.  Post no
bills.  Everything not permitted is forbidden.]

=end original

[This section still under construction.  Ignore everything here.  Post no
bills.  Everything not permitted is forbidden.]
(TBT)

=begin original

Any SV may be magical, that is, it has special features that a normal
SV does not have.  These features are stored in the SV structure in a
linked list of C<struct magic>'s, typedef'ed to C<MAGIC>.

=end original

すべての SV は magical、つまり、通常の SV が持っていないような特殊な
属性を持つようにすることができます。
これらの属性は C<MAGIC> として typedef されている C<struct magic> の
リンクリストにある SV 構造体に格納されます。

    struct magic {
        MAGIC*      mg_moremagic;
        MGVTBL*     mg_virtual;
        U16         mg_private;
        char        mg_type;
        U8          mg_flags;
        I32         mg_len;
        SV*         mg_obj;
        char*       mg_ptr;
    };

=begin original

Note this is current as of patchlevel 0, and could change at any time.

=end original

これは、パッチレベル0の時点でのものです。
変更される可能性があります。

=head2 Assigning Magic

(マジックの代入)

=begin original

Perl adds magic to an SV using the sv_magic function:

=end original

Perl は sv_magic 関数を使った SV にマジックを追加します。

    void sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen);

=begin original

The C<sv> argument is a pointer to the SV that is to acquire a new magical
feature.

=end original

引数 C<sv> は、新たにマジック機能を獲得する SV へのポインタです。

=begin original

If C<sv> is not already magical, Perl uses the C<SvUPGRADE> macro to
convert C<sv> to type C<SVt_PVMG>. Perl then continues by adding new magic
to the beginning of the linked list of magical features.  Any prior entry
of the same type of magic is deleted.  Note that this can be overridden,
and multiple instances of the same type of magic can be associated with an
SV.

=end original

C<sv> がまだ magical でなければ、Perl は C<sv> を C<SVt_PVMG> に変換
するために C<SvUPGRADE> を使います。
Perl はそれから、マジック機能のリンクリストの先頭にそれを追加します。
以前に存在していた同じタイプのマジックは削除されます。
これはオーバーライドすることができ、
複数の同じ型のマジックのインスタンスを一つの SV に
結び付けることができるということに注意してください。

=begin original

The C<name> and C<namlen> arguments are used to associate a string with
the magic, typically the name of a variable. C<namlen> is stored in the
C<mg_len> field and if C<name> is non-null then either a C<savepvn> copy of
C<name> or C<name> itself is stored in the C<mg_ptr> field, depending on
whether C<namlen> is greater than zero or equal to zero respectively.  As a
special case, if C<(name && namlen == HEf_SVKEY)> then C<name> is assumed
to contain an C<SV*> and is stored as-is with its REFCNT incremented.

=end original

引数 C<name> と C<namlen> はある文字列と magic とを結び付けるために
使われます。
典型的には変数の名前です。
C<namlen> は C<mg_len> フィールドに格納され、C<name> がヌルなら、
then either a C<savepvn> copy of
C<name> or C<name> itself is stored in the C<mg_ptr> field, depending on
whether C<namlen> is greater than zero or equal to zero respectively.  As a
special case, if C<(name && namlen == HEf_SVKEY)> then C<name> is assumed
to contain an C<SV*> and is stored as-is with its REFCNT incremented.
(TBT)

=begin original

The sv_magic function uses C<how> to determine which, if any, predefined
"Magic Virtual Table" should be assigned to the C<mg_virtual> field.
See the L<Magic Virtual Tables> section below.  The C<how> argument is also
stored in the C<mg_type> field. The value of C<how> should be chosen
from the set of macros C<PERL_MAGIC_foo> found in F<perl.h>. Note that before
these macros were added, Perl internals used to directly use character
literals, so you may occasionally come across old code or documentation
referring to 'U' magic rather than C<PERL_MAGIC_uvar> for example.

=end original

関数 sv_magic は C<how> を、あらかじめ定義されている
マジック仮想テーブル("Magic Virtual Table") のどれを
C<mg_virtual> フィールドに設定するかを決定するのに使います。
See the L<Magic Virtual Tables> section below.  The C<how> argument is also
stored in the C<mg_type> field. The value of C<how> should be chosen
from the set of macros C<PERL_MAGIC_foo> found in F<perl.h>. Note that before
these macros were added, Perl internals used to directly use character
literals, so you may occasionally come across old code or documentation
referring to 'U' magic rather than C<PERL_MAGIC_uvar> for example.
(TBT)

=begin original

The C<obj> argument is stored in the C<mg_obj> field of the C<MAGIC>
structure.  If it is not the same as the C<sv> argument, the reference
count of the C<obj> object is incremented.  If it is the same, or if
the C<how> argument is C<PERL_MAGIC_arylen>, or if it is a NULL pointer,
then C<obj> is merely stored, without the reference count being incremented.

=end original

引数 C<obj> は C<MAGIC> 構造体の C<mg_obj> フィールドに格納されます。
これが C<sv> 引数と同じでなかった場合、C<obj> の参照カウントは
インクリメントされます。
同じであった場合、もしくは引数 C<how> が
C<PERL_MAGIC_arylen> かナルポインタであった場合には、C<obj> は
参照カウントのインクリメントをさせることなく格納されます。

=begin original

See also C<sv_magicext> in L<perlapi> for a more flexible way to add magic
to an SV.

=end original

SV にマジックを追加する、より柔軟な方法については L<perlapi> の
C<sv_magicext> も参照してください。

=begin original

There is also a function to add magic to an C<HV>:

=end original

同様に C<HV> にマジックを付加する関数があります。

    void hv_magic(HV *hv, GV *gv, int how);

=begin original

This simply calls C<sv_magic> and coerces the C<gv> argument into an C<SV>.

=end original

これは単純に C<sv_magic> を呼び出し、引数 C<gv> を強制的に C<SV> にします。

=begin original

To remove the magic from an SV, call the function sv_unmagic:

=end original

SV からマジックを取り除くには、sv_unmagic という関数を呼び出します。

    void sv_unmagic(SV *sv, int type);

=begin original

The C<type> argument should be equal to the C<how> value when the C<SV>
was initially made magical.

=end original

引数 C<type> は、C<SV> が magical にされたときの C<how> の値と同じに
なるようにすべきです。

=head2 Magic Virtual Tables

(マジック仮想テーブル)

=begin original

The C<mg_virtual> field in the C<MAGIC> structure is a pointer to an
C<MGVTBL>, which is a structure of function pointers and stands for
"Magic Virtual Table" to handle the various operations that might be
applied to that variable.

=end original

C<MAGIC> 構造体の C<mg_virtual> フィールドは C<MGVTBL> へのポインタで、
これは関数ポインタの構造体であり、また対応する変数に対して
適用される可能性のあるさまざまな操作を扱うための
「マジック仮想テーブル」("Magic Virtual Table") を意味しています。

=begin original

The C<MGVTBL> has five (or sometimes eight) pointers to the following
routine types:

=end original

C<MGVTBL> は、以下に挙げる 5 種類(あるいは時々 8 種類)の
ポインタを持っています。

    int  (*svt_get)(SV* sv, MAGIC* mg);
    int  (*svt_set)(SV* sv, MAGIC* mg);
    U32  (*svt_len)(SV* sv, MAGIC* mg);
    int  (*svt_clear)(SV* sv, MAGIC* mg);
    int  (*svt_free)(SV* sv, MAGIC* mg);

    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv, const char *name, int namlen);
    int  (*svt_dup)(MAGIC *mg, CLONE_PARAMS *param);
    int  (*svt_local)(SV *nsv, MAGIC *mg);


=begin original

This MGVTBL structure is set at compile-time in F<perl.h> and there are
currently 19 types (or 21 with overloading turned on).  These different
structures contain pointers to various routines that perform additional
actions depending on which function is being called.

=end original

この MGVTBL は F<perl.h> の中でコンパイル時に設定され、現在 19 の型
(オーバーロード込みで 21)があります。
これらの異なった構造体は、関数が呼び出されたときに依存して
追加動作を行うような様々なルーチンへのポインタを保持しています。

=begin original

    Function pointer    Action taken
    ----------------    ------------
    svt_get             Do something before the value of the SV is retrieved.
    svt_set             Do something after the SV is assigned a value.
    svt_len             Report on the SV's length.
    svt_clear           Clear something the SV represents.
    svt_free            Free any extra storage associated with the SV.

=end original

     関数ポインタ     その振る舞い
    ----------------    ------------
    svt_get             SV の値が取得された前に何かを行う。
    svt_set             SV に値を代入した後で何かを行う。
    svt_len             SV の長さを報告する。
    svt_clear		SV が表わしているものををクリアする。
    svt_free            SV に結び付けられてい領域を解放する。

=begin original

    svt_copy            copy tied variable magic to a tied element
    svt_dup             duplicate a magic structure during thread cloning
    svt_local           copy magic to local value during 'local'

=end original

    svt_copy            copy tied variable magic to a tied element
    svt_dup             duplicate a magic structure during thread cloning
    svt_local           copy magic to local value during 'local'
(TBT)

=begin original

For instance, the MGVTBL structure called C<vtbl_sv> (which corresponds
to an C<mg_type> of C<PERL_MAGIC_sv>) contains:

=end original

たとえば、C<vtbl_sv> (C<PERL_MAGIC_sv> の C<mg_type> に対応します)と
呼ばれる MGVTBL 構造体の内容は以下の様になっています。

    { magic_get, magic_set, magic_len, 0, 0 }

=begin original

Thus, when an SV is determined to be magical and of type C<PERL_MAGIC_sv>,
if a get operation is being performed, the routine C<magic_get> is
called.  All the various routines for the various magical types begin
with C<magic_>.  NOTE: the magic routines are not considered part of
the Perl API, and may not be exported by the Perl library.

=end original

したがって、ある SV が magical であると決定されてその型が
C<PERL_MAGIC_sv> であったとき、操作が実行されたならば、C<magic_get> が
呼び出されます。
magical 型に対するルーチンはすべて、C<magic_> で始まります。
NOTE: the magic routines are not considered part of
the Perl API, and may not be exported by the Perl library.
(TBT)

=begin original

The last three slots are a recent addition, and for source code
compatibility they are only checked for if one of the three flags
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags. This means that most
code can continue declaring a vtable as a 5-element value. These three are
currently used exclusively by the threading code, and are highly subject
to change.

=end original

The last three slots are a recent addition, and for source code
compatibility they are only checked for if one of the three flags
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags. This means that most
code can continue declaring a vtable as a 5-element value. These three are
currently used exclusively by the threading code, and are highly subject
to change.
(TBT)

=begin original

The current kinds of Magic Virtual Tables are:

=end original

現時点でのMagic Virtual Tables の種類は以下の通りです。

=begin original

    mg_type
    (old-style char and macro)   MGVTBL          Type of magic
    --------------------------   ------          -------------
    \0 PERL_MAGIC_sv             vtbl_sv         Special scalar variable
    A  PERL_MAGIC_overload       vtbl_amagic     %OVERLOAD hash
    a  PERL_MAGIC_overload_elem  vtbl_amagicelem %OVERLOAD hash element
    c  PERL_MAGIC_overload_table (none)          Holds overload table (AMT)
                                                 on stash
    B  PERL_MAGIC_bm             vtbl_bm         Boyer-Moore (fast string search)
    D  PERL_MAGIC_regdata        vtbl_regdata    Regex match position data
                                                 (@+ and @- vars)
    d  PERL_MAGIC_regdatum       vtbl_regdatum   Regex match position data
                                                 element
    E  PERL_MAGIC_env            vtbl_env        %ENV hash
    e  PERL_MAGIC_envelem        vtbl_envelem    %ENV hash element
    f  PERL_MAGIC_fm             vtbl_fm         Formline ('compiled' format)
    g  PERL_MAGIC_regex_global   vtbl_mglob      m//g target / study()ed string
    H  PERL_MAGIC_hints          vtbl_sig        %^H hash
    h  PERL_MAGIC_hintselem      vtbl_hintselem  %^H hash element
    I  PERL_MAGIC_isa            vtbl_isa        @ISA array
    i  PERL_MAGIC_isaelem        vtbl_isaelem    @ISA array element
    k  PERL_MAGIC_nkeys          vtbl_nkeys      scalar(keys()) lvalue
    L  PERL_MAGIC_dbfile         (none)          Debugger %_<filename
    l  PERL_MAGIC_dbline         vtbl_dbline     Debugger %_<filename element
    o  PERL_MAGIC_collxfrm       vtbl_collxfrm   Locale collate transformation
    P  PERL_MAGIC_tied           vtbl_pack       Tied array or hash
    p  PERL_MAGIC_tiedelem       vtbl_packelem   Tied array or hash element
    q  PERL_MAGIC_tiedscalar     vtbl_packelem   Tied scalar or handle
    r  PERL_MAGIC_qr             vtbl_qr         precompiled qr// regex
    S  PERL_MAGIC_sig            vtbl_sig        %SIG hash
    s  PERL_MAGIC_sigelem        vtbl_sigelem    %SIG hash element
    t  PERL_MAGIC_taint          vtbl_taint      Taintedness
    U  PERL_MAGIC_uvar           vtbl_uvar       Available for use by extensions
    v  PERL_MAGIC_vec            vtbl_vec        vec() lvalue
    V  PERL_MAGIC_vstring        (none)          v-string scalars
    w  PERL_MAGIC_utf8           vtbl_utf8       UTF-8 length+offset cache
    x  PERL_MAGIC_substr         vtbl_substr     substr() lvalue
    y  PERL_MAGIC_defelem        vtbl_defelem    Shadow "foreach" iterator
                                                 variable / smart parameter
                                                 vivification
    #  PERL_MAGIC_arylen         vtbl_arylen     Array length ($#ary)
    .  PERL_MAGIC_pos            vtbl_pos        pos() lvalue
    <  PERL_MAGIC_backref        vtbl_backref    back pointer to a weak ref 
    ~  PERL_MAGIC_ext            (none)          Available for use by extensions
    :  PERL_MAGIC_symtab         (none)          hash used as symbol table
    %  PERL_MAGIC_rhash          (none)          hash used as restricted hash
    @  PERL_MAGIC_arylen_p       vtbl_arylen_p   pointer to $#a from @a

=end original

    mg_type
    (old-style char and macro)   MGVTBL          Type of magic
    --------------------------   ------          -------------
    \0 PERL_MAGIC_sv             vtbl_sv         特殊スカラ変数
    A  PERL_MAGIC_overload       vtbl_amagic     %OVERLOAD ハッシュ
    a  PERL_MAGIC_overload_elem  vtbl_amagicelem %OVERLOAD ハッシュ要素
    c  PERL_MAGIC_overload_table (none)          スタッシュのオーバーロード
                                                 テーブル(AMT) を保持
    B  PERL_MAGIC_bm             vtbl_bm         Boyer-Moore (高速文字列検索)
    D  PERL_MAGIC_regdata        vtbl_regdata    正規表現マッチング位置データ
                                                 (@+ と @- の変数)
    d  PERL_MAGIC_regdatum       vtbl_regdatum   正規表現マッチング位置データ
                                                 要素
    E  PERL_MAGIC_env            vtbl_env        %ENV ハッシュ
    e  PERL_MAGIC_envelem        vtbl_envelem    %ENV ハッシュ要素
    f  PERL_MAGIC_fm             vtbl_fm         フォーム行(「コンパイル済み」
                                                 フォーマット)
    g  PERL_MAGIC_regex_global   vtbl_mglob      m//g のターゲット / study() した文字列
    H  PERL_MAGIC_hints          vtbl_sig        %^H ハッシュ
    h  PERL_MAGIC_hintselem      vtbl_hintselem  %^H ハッシュ要素
    I  PERL_MAGIC_isa            vtbl_isa        @ISA 配列
    i  PERL_MAGIC_isaelem        vtbl_isaelem    @ISA 配列要素
    k  PERL_MAGIC_nkeys          vtbl_nkeys      scalar(keys()) 左辺値
    L  PERL_MAGIC_dbfile         (none)          デバッガの %_<filename
    l  PERL_MAGIC_dbline         vtbl_dbline     デバッガの %_<filename 要素
    o  PERL_MAGIC_collxfrm       vtbl_collxfrm   ロケール照合変換
    P  PERL_MAGIC_tied           vtbl_pack       tie された配列やハッシュ
    p  PERL_MAGIC_tiedelem       vtbl_packelem   tie された配列やハッシュの要素
    q  PERL_MAGIC_tiedscalar     vtbl_packelem   tie されたスカラやハンドル
    r  PERL_MAGIC_qr             vtbl_qr         事前コンパイルされた qr// 正規表現
    S  PERL_MAGIC_sig            vtbl_sig        %SIG ハッシュ
    s  PERL_MAGIC_sigelem        vtbl_sigelem    %SIG ハッシュ要素
    t  PERL_MAGIC_taint          vtbl_taint      汚染性
    U  PERL_MAGIC_uvar           vtbl_uvar       エクステンションで使用可能
    v  PERL_MAGIC_vec            vtbl_vec        vec() 左辺値
    V  PERL_MAGIC_vstring        (none)          v-文字列スカラ
    w  PERL_MAGIC_utf8           vtbl_utf8       UTF-8 長さ+オフセットキャッシュ
    x  PERL_MAGIC_substr         vtbl_substr     substr() 左辺値
    y  PERL_MAGIC_defelem        vtbl_defelem    影の "foreach" 反復子
                                                 変数 / スマート引数
                                                 自動有効化
    #  PERL_MAGIC_arylen         vtbl_arylen     配列の長さ ($#ary)
    .  PERL_MAGIC_pos            vtbl_pos        pos() 左辺値
    <  PERL_MAGIC_backref        vtbl_backref    弱いリファレンスへの後方ポインタ
    ~  PERL_MAGIC_ext            (none)          エクステンションで使用可能
    :  PERL_MAGIC_symtab         (none)          シンボルテーブルとして使われるハッシュ
    %  PERL_MAGIC_rhash          (none)          制限ハッシュとして使われるハッシュ
    @  PERL_MAGIC_arylen_p       vtbl_arylen_p   @a から $#a へのポインタ

=begin original

When an uppercase and lowercase letter both exist in the table, then the
uppercase letter is typically used to represent some kind of composite type
(a list or a hash), and the lowercase letter is used to represent an element
of that composite type. Some internals code makes use of this case
relationship.  However, 'v' and 'V' (vec and v-string) are in no way related.

=end original

テーブル中で大文字小文字の両方が存在していた場合、大文字は典型的には複合型
(リストもしくはハッシュ)の種類を表わすのに使われ、小文字はその複合型の
要素を表わすのに使われます。
内部コードにはこの大文字小文字の関係を使っているものもあります。
しかし、'v' と 'V' (ベクタと v-文字列) は全く関係がありません。

=begin original

The C<PERL_MAGIC_ext> and C<PERL_MAGIC_uvar> magic types are defined
specifically for use by extensions and will not be used by perl itself.
Extensions can use C<PERL_MAGIC_ext> magic to 'attach' private information
to variables (typically objects).  This is especially useful because
there is no way for normal perl code to corrupt this private information
(unlike using extra elements of a hash object).

=end original

magic type C<PERL_MAGIC_ext> と C<PERL_MAGIC_uvar> は
エクステンションから使われ、Perl自身からは使われないように特別に
定義されています。
エクステンションは ~ magic を
プライベート情報を変数(典型的なオブジェクト)に‘アタッチ’(attach)
するために使うことができます。
これは、通常の perl コードが(ハッシュオブジェクトの要素を使うのとは違って)
そのプライベート情報を壊す恐れがないのでとても便利です。

=begin original

Similarly, C<PERL_MAGIC_uvar> magic can be used much like tie() to call a
C function any time a scalar's value is used or changed.  The C<MAGIC>'s
C<mg_ptr> field points to a C<ufuncs> structure:

=end original

Similarly, C<PERL_MAGIC_uvar> magic can be used much like tie() to call a
C function any time a scalar's value is used or changed.  The C<MAGIC>'s
C<mg_ptr> field points to a C<ufuncs> structure:
(TBT)

    struct ufuncs {
        I32 (*uf_val)(pTHX_ IV, SV*);
        I32 (*uf_set)(pTHX_ IV, SV*);
        IV uf_index;
    };

=begin original

When the SV is read from or written to, the C<uf_val> or C<uf_set>
function will be called with C<uf_index> as the first arg and a pointer to
the SV as the second.  A simple example of how to add C<PERL_MAGIC_uvar>
magic is shown below.  Note that the ufuncs structure is copied by
sv_magic, so you can safely allocate it on the stack.

=end original

When the SV is read from or written to, the C<uf_val> or C<uf_set>
function will be called with C<uf_index> as the first arg and a pointer to
the SV as the second.  A simple example of how to add C<PERL_MAGIC_uvar>
magic is shown below.  Note that the ufuncs structure is copied by
sv_magic, so you can safely allocate it on the stack.
(TBT)

    void
    Umagic(sv)
        SV *sv;
    PREINIT:
        struct ufuncs uf;
    CODE:
        uf.uf_val   = &my_get_fn;
        uf.uf_set   = &my_set_fn;
        uf.uf_index = 0;
        sv_magic(sv, 0, PERL_MAGIC_uvar, (char*)&uf, sizeof(uf));

=begin original

Attaching C<PERL_MAGIC_uvar> to arrays is permissible but has no effect.

=end original

C<PERL_MAGIC_uvar> を配列に添付するのは可能ですが、何の意味もありません。

=begin original

For hashes there is a specialized hook that gives control over hash
keys (but not values).  This hook calls C<PERL_MAGIC_uvar> 'get' magic
if the "set" function in the C<ufuncs> structure is NULL.  The hook
is activated whenever the hash is accessed with a key specified as
an C<SV> through the functions C<hv_store_ent>, C<hv_fetch_ent>,
C<hv_delete_ent>, and C<hv_exists_ent>.  Accessing the key as a string
through the functions without the C<..._ent> suffix circumvents the
hook.  See L<Hash::Util::Fieldhash/Guts> for a detailed description.

=end original

For hashes there is a specialized hook that gives control over hash
keys (but not values).  This hook calls C<PERL_MAGIC_uvar> 'get' magic
if the "set" function in the C<ufuncs> structure is NULL.  The hook
is activated whenever the hash is accessed with a key specified as
an C<SV> through the functions C<hv_store_ent>, C<hv_fetch_ent>,
C<hv_delete_ent>, and C<hv_exists_ent>.  Accessing the key as a string
through the functions without the C<..._ent> suffix circumvents the
hook.  See L<Hash::Util::Fieldhash/Guts> for a detailed description.
(TBT)

=begin original

Note that because multiple extensions may be using C<PERL_MAGIC_ext>
or C<PERL_MAGIC_uvar> magic, it is important for extensions to take
extra care to avoid conflict.  Typically only using the magic on
objects blessed into the same class as the extension is sufficient.
For C<PERL_MAGIC_ext> magic, it may also be appropriate to add an I32
'signature' at the top of the private data area and check that.

=end original

複数のエクステンションが 
C<PERL_MAGIC_ext> や C<PERL_MAGIC_uvar> magic を使う可能性があるので
エクステンションがそれを扱うには気をつけることが重要であることに
注意してください。
典型的には、これはオブジェクトをエクステンションが扱えるように同じクラスに
bless するときにのみ使います。
C<PERL_MAGIC_ext> magic では、
これはまた、プライベートなデータ領域の先頭においてそれをチェックするために
I32 ‘シグネチャー’(signature)を付加するのに適切なものです。

=begin original

Also note that the C<sv_set*()> and C<sv_cat*()> functions described
earlier do B<not> invoke 'set' magic on their targets.  This must
be done by the user either by calling the C<SvSETMAGIC()> macro after
calling these functions, or by using one of the C<sv_set*_mg()> or
C<sv_cat*_mg()> functions.  Similarly, generic C code must call the
C<SvGETMAGIC()> macro to invoke any 'get' magic if they use an SV
obtained from external sources in functions that don't handle magic.
See L<perlapi> for a description of these functions.
For example, calls to the C<sv_cat*()> functions typically need to be
followed by C<SvSETMAGIC()>, but they don't need a prior C<SvGETMAGIC()>
since their implementation handles 'get' magic.

=end original

C<sv_set*()> と C<sv_cat*()> といった関数群は
そのターゲットに対して magic を'セットしない'ということにも
注意してください。
magic をセットするには、ユーザーが
C<svSETMAGIC> マクロを呼び出した後でこれらの関数を呼び出すか、
あるいは C<sv_set*_mg()> か
C<sv_cat*_mg()> の何れかの関数を使わなければなりません。
同様に generic な C コードは、それが
magic を扱っていないような関数から得られた
SV を使っているのであれば、magic を'get'するために C<SvGETMAGIC> を
呼び出してやらなければなりません。
これらの関数についてはL<perlapi>を参照してください。
例を挙げると、C<sv_cat*()> 関数群の
呼び出しは通常 C<SvSETMAGIC()> が続いている必要がありますが、
C<SvGETMAGIC> が先行している必要はありません。
なぜなら、
その実装において magic を 'get' するようになっているからです。

=head2 Finding Magic

(マジックを見つけだす)

    MAGIC* mg_find(SV*, int type); /* Finds the magic pointer of that type */

=begin original

This routine returns a pointer to the C<MAGIC> structure stored in the SV.
If the SV does not have that magical feature, C<NULL> is returned.  Also,
if the SV is not of type SVt_PVMG, Perl may core dump.

=end original

このルーチンは SV に格納されている C<MAGIC> 構造体へのポインタを
返します。
SV が magical feature を持っていなければ、C<NULL> が返され、
SV が Svt_PVMG の型でなければPerlはコアダンプするかもしれません。

    int mg_copy(SV* sv, SV* nsv, const char* key, STRLEN klen);

=begin original

This routine checks to see what types of magic C<sv> has.  If the mg_type
field is an uppercase letter, then the mg_obj is copied to C<nsv>, but
the mg_type field is changed to be the lowercase letter.

=end original

このルーチンは C<sv >が持っている magic の型を検査します。
その mg_type フィールドが大文字であれば、mg_obj が C<nsv> にコピーされますが、
mg_type フィールドは小文字に変更されます。

=head2 Understanding the Magic of Tied Hashes and Arrays

(tie されたハッシュと配列の magic を理解する)

=begin original

Tied hashes and arrays are magical beasts of the C<PERL_MAGIC_tied>
magic type.

=end original

tie されたハッシュと配列は magic type 
C<PERL_MAGIC_tied> の magical beast です。

=begin original

WARNING: As of the 5.004 release, proper usage of the array and hash
access functions requires understanding a few caveats.  Some
of these caveats are actually considered bugs in the API, to be fixed
in later releases, and are bracketed with [MAYCHANGE] below. If
you find yourself actually applying such information in this section, be
aware that the behavior may change in the future, umm, without warning.

=end original

警告: リリース 5.004 以降、配列やハッシュに対するアクセス
関数の正しい使い方は、幾つかの注意点を理解していることを要求しています。
これら幾つかの注意点は実際には API におけるバグとして
みなされるものであって、将来のリリースにおいては修正されます。
また、注意点は [MAYCHANGE] というブラケットで囲まれています。
このセクションにある情報をあなたが実際に使おうというのであれば、
将来それらは警告なしに変わる可能性があることに注意してください。

=begin original

The perl tie function associates a variable with an object that implements
the various GET, SET, etc methods.  To perform the equivalent of the perl
tie function from an XSUB, you must mimic this behaviour.  The code below
carries out the necessary steps - firstly it creates a new hash, and then
creates a second hash which it blesses into the class which will implement
the tie methods. Lastly it ties the two hashes together, and returns a
reference to the new tied hash.  Note that the code below does NOT call the
TIEHASH method in the MyTie class -
see L<Calling Perl Routines from within C Programs> for details on how
to do this.

=end original

perlのtie関数は、ある変数と GET、SET 等といった様々なメソッドを実装している
オブジェクトとを結び付けるものです。
XSUB から perl の tie 関数と等価な働きをさせるには、
ちょっとしたオマジナイをしなければなりません。
以下の例が必要なステップです。
まず最初にハッシュを作り、それから
tie メソッドを実装するクラスに bless した二番目のハッシュを作ります。
最後に二つのハッシュを tie し、新たに生成した tie されたハッシュに対する
リファレンスを返します。
以下の例では MyTie クラスの中で TIEHASH を呼び出していないということに
注意してください。
この件に関する詳細は L<Calling Perl Routines from within C Programs> を
参照してください。

    SV*
    mytie()
    PREINIT:
        HV *hash;
        HV *stash;
        SV *tie;
    CODE:
        hash = newHV();
        tie = newRV_noinc((SV*)newHV());
        stash = gv_stashpv("MyTie", GV_ADD);
        sv_bless(tie, stash);
        hv_magic(hash, (GV*)tie, PERL_MAGIC_tied);
        RETVAL = newRV_noinc(hash);
    OUTPUT:
        RETVAL

=begin original

The C<av_store> function, when given a tied array argument, merely
copies the magic of the array onto the value to be "stored", using
C<mg_copy>.  It may also return NULL, indicating that the value did not
actually need to be stored in the array.  [MAYCHANGE] After a call to
C<av_store> on a tied array, the caller will usually need to call
C<mg_set(val)> to actually invoke the perl level "STORE" method on the
TIEARRAY object.  If C<av_store> did return NULL, a call to
C<SvREFCNT_dec(val)> will also be usually necessary to avoid a memory
leak. [/MAYCHANGE]

=end original

tie された配列を引数に与えられたときの C<av_store> 関数は、単に配列の
magic を C<mg_copy> を使って“stored”されるように値をコピーするだけです。
この関数は、その値が実際には配列に格納する必要のないものであることを
示す NULL を返す可能性があります。
[MAYCHANGE]
tie された配列に対して C<av_store> を呼び出した後、呼び出し側は TIEARRAY
オブジェクトに対して Perl レベルの“STORE”メソッドを起動するために
C<av_store> を呼び出すことが通常は必要となります。
C<av_store> が NULL を返したならば、メモリーリークを防ぐために
C<SvREFCNT_dec(val)> を呼び出すことが必要となります。
[/MAYCHANGE] 

=begin original

The previous paragraph is applicable verbatim to tied hash access using the
C<hv_store> and C<hv_store_ent> functions as well.

=end original

先のパラグラフの説明は、tie されたハッシュにアクセスするのに使用する
C<hv_store> と C<hv_store_ent> についても同様です。

=begin original

C<av_fetch> and the corresponding hash functions C<hv_fetch> and
C<hv_fetch_ent> actually return an undefined mortal value whose magic
has been initialized using C<mg_copy>.  Note the value so returned does not
need to be deallocated, as it is already mortal.  [MAYCHANGE] But you will
need to call C<mg_get()> on the returned value in order to actually invoke
the perl level "FETCH" method on the underlying TIE object.  Similarly,
you may also call C<mg_set()> on the return value after possibly assigning
a suitable value to it using C<sv_setsv>,  which will invoke the "STORE"
method on the TIE object. [/MAYCHANGE]

=end original

C<av_fetch> と、対応するハッシュ関数 C<hv_fetch> および C<hv_fetch_ent> は
C<mg_copy> を使って初期化が行なわれている未定義の揮発値を返します。
返された値は、すでに揮発的であるかのように解放する必要のないものです。
[MAYCHANGE]
しかし、TIE オブジェクトに対応した perl レベルの
"FETCH" メソッドを実行するには、返されたその値に対して
C<mg_get()> を呼び出す必要があるでしょう。
同様に、TIE オブジェクトに対する“STORE”メソッドの起動である
C<sv_setsv> を使って適切な値を代入した後で、返された値に対して
C<mg_set()> を呼び出すことができます。
[/MAYCHANGE]

=begin original

[MAYCHANGE]
In other words, the array or hash fetch/store functions don't really
fetch and store actual values in the case of tied arrays and hashes.  They
merely call C<mg_copy> to attach magic to the values that were meant to be
"stored" or "fetched".  Later calls to C<mg_get> and C<mg_set> actually
do the job of invoking the TIE methods on the underlying objects.  Thus
the magic mechanism currently implements a kind of lazy access to arrays
and hashes.

=end original

[MAYCHANGE]
言い換えれば、配列やハッシュをフェッチしたりストアする関数は、
tieされている配列やハッシュに対する場合には実際に値をフェッチしたり
ストアしたりするわけではないということです。
それらの関数は
“ストア”されたり“フェッチ”された値に対して magic を付加するために、
単に C<mg_copy> を呼び出すだけです。

=begin original

Currently (as of perl version 5.004), use of the hash and array access
functions requires the user to be aware of whether they are operating on
"normal" hashes and arrays, or on their tied variants.  The API may be
changed to provide more transparent access to both tied and normal data
types in future versions.
[/MAYCHANGE]

=end original

現在(バージョン 5.004)、ハッシュや配列に対するアクセス関数の使用する
際には、ユーザーが“通常の”ハッシュや配列なのか、あるいはそれが
tie されたものであるのかを気をつけることが要求されています。
将来のバージョンでは、このAPIはtieされたデータに対するアクセスと
通常のデータに対するアクセスをより透過的にするために変更されるかも
しれません。
[/MAYCHANGE]

=begin original

You would do well to understand that the TIEARRAY and TIEHASH interfaces
are mere sugar to invoke some perl method calls while using the uniform hash
and array syntax.  The use of this sugar imposes some overhead (typically
about two to four extra opcodes per FETCH/STORE operation, in addition to
the creation of all the mortal variables required to invoke the methods).
This overhead will be comparatively small if the TIE methods are themselves
substantial, but if they are only a few statements long, the overhead
will not be insignificant.

=end original

TIEARRAY や TIEHASH といったインターフェースが、統一的な
ハッシュ/配列構文を使うための perl メソッドを起動をするための単なる
“砂糖”であることを良く理解したことでしょう。
これらの“砂糖”の使用は幾らかのオーバーヘッド(通常、FETCH/STORE 操作
当たり二つから四つの余分なオペコード、それに加えてメソッドを
起動するために必要なすべての揮発性変数の生成)を招きます。
このオーバーヘッドは TIE メソッド自身がしっかりしたものであれば、ほぼ
同等なくらい小さなものでしかありませんが、ほんの少し文が長いだけでも
オーバーヘッドは無視できないものになります。

=head2 Localizing changes

(変更を局所化する)

=begin original

Perl has a very handy construction

=end original

Perl には非常に便利な構造があります。

  {
    local $var = 2;
    ...
  }

=begin original

This construction is I<approximately> equivalent to

=end original

この構造は以下のものと B<ほぼ> 同じです

  {
    my $oldvar = $var;
    $var = 2;
    ...
    $var = $oldvar;
  }

=begin original

The biggest difference is that the first construction would
reinstate the initial value of $var, irrespective of how control exits
the block: C<goto>, C<return>, C<die>/C<eval>, etc. It is a little bit
more efficient as well.

=end original

両者の最も大きな違いは、最初のものが
C<goto>、C<return>、C<die>/C<eval> など
どのようにブロックから脱出しようとも、
$var の元々の値を復帰するということです。
効率といった面では大きな違いはありません。

=begin original

There is a way to achieve a similar task from C via Perl API: create a
I<pseudo-block>, and arrange for some changes to be automatically
undone at the end of it, either explicit, or via a non-local exit (via
die()). A I<block>-like construct is created by a pair of
C<ENTER>/C<LEAVE> macros (see L<perlcall/"Returning a Scalar">).
Such a construct may be created specially for some important localized
task, or an existing one (like boundaries of enclosing Perl
subroutine/block, or an existing pair for freeing TMPs) may be
used. (In the second case the overhead of additional localization must
be almost negligible.) Note that any XSUB is automatically enclosed in
an C<ENTER>/C<LEAVE> pair.

=end original

Perl API を通して C から同様の処理を行う方法もあります。
I<擬似ブロック>(pseudo-block)を生成し、そのブロックの最後で自動的に
復帰するような幾つかの変更を行います。
ブロックから抜けるのは
陽に抜けるための指示があっても良いし、非局所的な脱出
(die() を使ったもの)でもかまいません。
ブロックに似たこの構造は C<ENTER>/C<LEAVE> マクロのペアによって
生成されます(L<perlcall/"Returning a Scalar"> を
参照してください)。
このような構造ではなにか重要な局所化された
タスクのための特別なものを作成したり、あるいは
既に存在しているもの(Perl のサブルーチン/ブロックに束縛されたものとか、
あるいは解放する一時変数のペア)を使うことも可能です
(二番目のケースでは、局所化するためのオーバーヘッドはほとんど
無視できるものです)。
すべての XSUB は自動的に C<ENTER>/C<LEAVE> の
ペアによって囲まれているということに注意してください。

=begin original

Inside such a I<pseudo-block> the following service is available:

=end original

このような I<擬似ブロック> の中では以下のサービスが利用可能です:

=over 4

=item C<SAVEINT(int i)>

=item C<SAVEIV(IV i)>

=item C<SAVEI32(I32 i)>

=item C<SAVELONG(long i)>

=begin original

These macros arrange things to restore the value of integer variable
C<i> at the end of enclosing I<pseudo-block>.

=end original

これらのマクロはそれを囲む B<擬似ブロック> において
整数変数 C<i> の値をリストアするようにします。

=item C<SAVESPTR(s)>

=item C<SAVEPPTR(p)>

=begin original

These macros arrange things to restore the value of pointers C<s> and
C<p>. C<s> must be a pointer of a type which survives conversion to
C<SV*> and back, C<p> should be able to survive conversion to C<char*>
and back.

=end original

これらのマクロは、ポインタC<s>もしくは C<p> の値を
リストアします。
C<s> は C<SV*> に対する型変換をできるポインタでなければなりません。
C<p> は C<char*> への型変換が可能であるべきものです。

=item C<SAVEFREESV(SV *sv)>

=begin original

The refcount of C<sv> would be decremented at the end of
I<pseudo-block>.  This is similar to C<sv_2mortal> in that it is also a
mechanism for doing a delayed C<SvREFCNT_dec>.  However, while C<sv_2mortal>
extends the lifetime of C<sv> until the beginning of the next statement,
C<SAVEFREESV> extends it until the end of the enclosing scope.  These
lifetimes can be wildly different.

=end original

B<擬似ブロック> の終端において C<sv> の参照カウントは
デクリメントされます。
これは
in that it is also a
mechanism for doing a delayed C<SvREFCNT_dec>
C<sv_2motral> に似たものです。
However, while C<sv_2mortal>
extends the lifetime of C<sv> until the beginning of the next statement,
C<SAVEFREESV> extends it until the end of the enclosing scope.  These
lifetimes can be wildly different.
(TBT)

=begin original

Also compare C<SAVEMORTALIZESV>.

=end original

また、C<SAVEMORTALIZESV> を比較します。

=item C<SAVEMORTALIZESV(SV *sv)>

=begin original

Just like C<SAVEFREESV>, but mortalizes C<sv> at the end of the current
scope instead of decrementing its reference count.  This usually has the
effect of keeping C<sv> alive until the statement that called the currently
live scope has finished executing.

=end original

Just like C<SAVEFREESV>, but mortalizes C<sv> at the end of the current
scope instead of decrementing its reference count.  This usually has the
effect of keeping C<sv> alive until the statement that called the currently
live scope has finished executing.
(TBT)

=item C<SAVEFREEOP(OP *op)>

=begin original

The C<OP *> is op_free()ed at the end of I<pseudo-block>.

=end original

C<OP *> は B<擬似ブロック> の終端において op_free() されます。

=item C<SAVEFREEPV(p)>

=begin original

The chunk of memory which is pointed to by C<p> is Safefree()ed at the
end of I<pseudo-block>.

=end original

C<p> によって指し示されているメモリーの塊は B<擬似ブロック> の終端で
Safefree() されます。

=item C<SAVECLEARSV(SV *sv)>

=begin original

Clears a slot in the current scratchpad which corresponds to C<sv> at
the end of I<pseudo-block>.

=end original

B<擬似ブロック> の終端において、
C<sv> に対応している
カレントのスクラッチパッドにおけるスロットをクリアします。

=item C<SAVEDELETE(HV *hv, char *key, I32 length)>

=begin original

The key C<key> of C<hv> is deleted at the end of I<pseudo-block>. The
string pointed to by C<key> is Safefree()ed.  If one has a I<key> in
short-lived storage, the corresponding string may be reallocated like
this:

=end original

B<擬似ブロック> の終端で C<hv> にあるキー C<key> は削除されます。
C<key> によって指し示されている文字列は Safefree() されます。
short-lived storageにある I<key> を持っているものがあった場合には
以下のようにして対応する文字列が再割り当てされます。

  SAVEDELETE(PL_defstash, savepv(tmpbuf), strlen(tmpbuf));

=item C<SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)>

=begin original

At the end of I<pseudo-block> the function C<f> is called with the
only argument C<p>.

=end original

B<擬似ブロック> の終端において関数 C<f> が呼び出されます。
この関数 C<f> は C<p> のみを引数に取ります。

=item C<SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)>

=begin original

At the end of I<pseudo-block> the function C<f> is called with the
implicit context argument (if any), and C<p>.

=end original

At the end of I<pseudo-block> the function C<f> is called with the
implicit context argument (if any), and C<p>.
(TBT)

=item C<SAVESTACK_POS()>

=begin original

The current offset on the Perl internal stack (cf. C<SP>) is restored
at the end of I<pseudo-block>.

=end original

B<擬似ブロック> の終端においてPerlの内部スタック(C<SP>)のカレント
オフセットがリストアされます。

=back

=begin original

The following API list contains functions, thus one needs to
provide pointers to the modifiable data explicitly (either C pointers,
or Perlish C<GV *>s).  Where the above macros take C<int>, a similar
function takes C<int *>.

=end original

以下の API リストは、変更可能なデータを指し示すポインタ
(C のポインタか、Perl 的な C<GV *> のいずれか)
を必要とする関数群です。
前述の C<int> を引数に取るマクロに似て、
C<int *> を引数に取る関数があります。

=over 4

=item C<SV* save_scalar(GV *gv)>

=begin original

Equivalent to Perl code C<local $gv>.

=end original

Perl コード C<local $gv> と等価です。

=item C<AV* save_ary(GV *gv)>

=item C<HV* save_hash(GV *gv)>

=begin original

Similar to C<save_scalar>, but localize C<@gv> and C<%gv>.

=end original

C<save_scalar> に似ていますが、C<@gv> と C<%gv> の局所化を行います。

=item C<void save_item(SV *item)>

=begin original

Duplicates the current value of C<SV>, on the exit from the current
C<ENTER>/C<LEAVE> I<pseudo-block> will restore the value of C<SV>
using the stored value. It doesn't handle magic. Use C<save_scalar> if
magic is affected.

=end original

C<SV> のカレントの値を複製し、カレントの C<ENTER>/C<LEAVE>
B<擬似ブロック> を抜けるときに C<SV> の保存した値を復帰します。
It doesn't handle magic. Use C<save_scalar> if
magic is affected.
(TBT)

=item C<void save_list(SV **sarg, I32 maxsarg)>

=begin original

A variant of C<save_item> which takes multiple arguments via an array
C<sarg> of C<SV*> of length C<maxsarg>.

=end original

複数の引数を長さ C<maxarg> の C<SV*> の配列 C<sarg> として取る
C<save_item> の複数の値を取るバリエーションです。

=item C<SV* save_svref(SV **sptr)>

=begin original

Similar to C<save_scalar>, but will reinstate an C<SV *>.

=end original

C<save_scalar> に似ていますが、C<SV *> の復帰を行います。

=item C<void save_aptr(AV **aptr)>

=item C<void save_hptr(HV **hptr)>

=begin original

Similar to C<save_svref>, but localize C<AV *> and C<HV *>.

=end original

C<save_svref> に似ていますが、C<AV *> と C<HV *> の局所化を行います。

=back

=begin original

The C<Alias> module implements localization of the basic types within the
I<caller's scope>.  People who are interested in how to localize things in
the containing scope should take a look there too.

=end original

C<Alias> モジュールは B<呼び出し側のスコープ> 中での基本型の局所化を
実装します。
スコープを持った何かの局所化に興味のある人は
そこに何があるかも見ておいた方が良いでしょう。

=head1 Subroutines

=head2 XSUBs and the Argument Stack

(XSUB と引数スタック)

=begin original

The XSUB mechanism is a simple way for Perl programs to access C subroutines.
An XSUB routine will have a stack that contains the arguments from the Perl
program, and a way to map from the Perl data structures to a C equivalent.

=end original

XSUB の仕組みは、Perl プログラムが C のサブルーチンを
アクセスするための単純な方法です。
XSUB には、Perl プログラムからの引数を入れるスタックと、Perl のデータ
構造を C の等価なものにマッピングする方法を用意しています。

=begin original

The stack arguments are accessible through the C<ST(n)> macro, which returns
the C<n>'th stack argument.  Argument 0 is the first argument passed in the
Perl subroutine call.  These arguments are C<SV*>, and can be used anywhere
an C<SV*> is used.

=end original

スタック引数は C<ST(n)> というマクロを使ってアクセスできます。
これは、C<n> 番目のスタック引数を返すものです。
引数 0 は、Perl の
サブルーチン呼び出しで渡された最初の引数です。
これらの引数は 
C<SV*> で、C<SV*> が使われるところであればどこでも使うことができます。

=begin original

Most of the time, output from the C routine can be handled through use of
the RETVAL and OUTPUT directives.  However, there are some cases where the
argument stack is not already long enough to handle all the return values.
An example is the POSIX tzname() call, which takes no arguments, but returns
two, the local time zone's standard and summer time abbreviations.

=end original

ほとんどの場合には、C ルーチンからの出力は RETVAL ディレクティブ
とOUTPUT ディレクティブを使って扱うことができます。
しかし、引数スタックのスペースがすべての返却値を扱うのに十分で
なくなる場合があります。
例としては、引数をとらないでローカルなタイムゾーンと夏時間の省略形の
二つの返却値を返す、POSIX の tzname() の呼び出しがあります。

=begin original

To handle this situation, the PPCODE directive is used and the stack is
extended using the macro:

=end original

このような状況を扱うためには、PPCODE ディレクティブを使い、さらに

    EXTEND(SP, num);

=begin original

where C<SP> is the macro that represents the local copy of the stack pointer,
and C<num> is the number of elements the stack should be extended by.

=end original

というマクロを使ってスタックを拡張します。
ここで C<SP> はスタックポインタで、C<num> はスタックを拡張すべき
要素の数です。

=begin original

Now that there is room on the stack, values can be pushed on it using C<PUSHs>
macro. The pushed values will often need to be "mortal" (See
L</Reference Counts and Mortality>):

=end original

スタック上に場所を確保したら、C<PUSHs> マクロを使って
値をスタックへプッシュします。
The pushed values will often need to be "mortal" (See
L</Reference Counts and Mortality>):
(TBT)

    PUSHs(sv_2mortal(newSViv(an_integer)))
    PUSHs(sv_2mortal(newSVuv(an_unsigned_integer)))
    PUSHs(sv_2mortal(newSVnv(a_double)))
    PUSHs(sv_2mortal(newSVpv("Some String",0)))

=begin original

And now the Perl program calling C<tzname>, the two values will be assigned
as in:

=end original

これで、C<tzname> を呼ぶ Perl プログラムでは、二つの値は
以下のように代入できます。

    ($standard_abbrev, $summer_abbrev) = POSIX::tzname;

=begin original

An alternate (and possibly simpler) method to pushing values on the stack is
to use the macro:

=end original

スタックに値を積む、別の (おそらくはより簡単な) 方法は、
以下のマクロを使うことです。

    XPUSHs(SV*)

=begin original

This macro automatically adjust the stack for you, if needed.  Thus, you
do not need to call C<EXTEND> to extend the stack.

=end original

こちらのマクロは、必要ならば自動的にスタックを調整してくれます。
このため、C<EXTEND> をスタックを拡張するために呼ぶ必要はありません。

=begin original

Despite their suggestions in earlier versions of this document the macros
C<(X)PUSH[iunp]> are I<not> suited to XSUBs which return multiple results.
For that, either stick to the C<(X)PUSHs> macros shown above, or use the new
C<m(X)PUSH[iunp]> macros instead; see L</Putting a C value on Perl stack>.

=end original

Despite their suggestions in earlier versions of this document the macros
C<(X)PUSH[iunp]> are I<not> suited to XSUBs which return multiple results.
For that, either stick to the C<(X)PUSHs> macros shown above, or use the new
C<m(X)PUSH[iunp]> macros instead; see L</Putting a C value on Perl stack>.
(TBT)

=begin original

For more information, consult L<perlxs> and L<perlxstut>.

=end original

より詳しい情報は、L<perlxs> と L<perlxstut> を参照してください。

=head2 Calling Perl Routines from within C Programs

(CプログラムからのPerlルーチンの呼び出し)

=begin original

There are four routines that can be used to call a Perl subroutine from
within a C program.  These four are:

=end original

C プログラムから Perl サブルーチンを呼び出すために使用することのできる
ルーチンが 四つあります。
その四つは:

    I32  call_sv(SV*, I32);
    I32  call_pv(const char*, I32);
    I32  call_method(const char*, I32);
    I32  call_argv(const char*, I32, register char**);

=begin original

The routine most often used is C<call_sv>.  The C<SV*> argument
contains either the name of the Perl subroutine to be called, or a
reference to the subroutine.  The second argument consists of flags
that control the context in which the subroutine is called, whether
or not the subroutine is being passed arguments, how errors should be
trapped, and how to treat return values.

=end original

最もよく使われるはずのものは、C<call_sv> です。
引数 C<SV*> には呼び出される Perl サブルーチンの名前か、その
サブルーチンへのリファレンスが含まれます。
二番目の引数には、そのサブルーチンが呼び出されたコンテキストを制御する
フラグが置かれます。
これはサブルーチンに引数が渡されたか渡されていないか、エラーを
どのようにトラップすべきなのか、どのように戻り値を返すのかを
制御するものです。

=begin original

All four routines return the number of arguments that the subroutine returned
on the Perl stack.

=end original

四つのルーチンはいずれも、サブルーチンが Perl スタック上に返した
引数の数を返します。

=begin original

These routines used to be called C<perl_call_sv>, etc., before Perl v5.6.0,
but those names are now deprecated; macros of the same name are provided for
compatibility.

=end original

These routines used to be called C<perl_call_sv>, etc., before Perl v5.6.0,
but those names are now deprecated; macros of the same name are provided for
compatibility.
(TBT)

=begin original

When using any of these routines (except C<call_argv>), the programmer
must manipulate the Perl stack.  These include the following macros and
functions:

=end original

これらのルーチンを使うときには(C<call_argv> を除いて)、プログラマが
Perl スタックを操作しなくてはなりません。
以下のマクロと関数が用意されています:

    dSP
    SP
    PUSHMARK()
    PUTBACK
    SPAGAIN
    ENTER
    SAVETMPS
    FREETMPS
    LEAVE
    XPUSH*()
    POP*()

=begin original

For a detailed description of calling conventions from C to Perl,
consult L<perlcall>.

=end original

C から Perl を呼び出す約束ごとについての詳しい記述は
L<perlcall> を参照してください。

=head2 Memory Allocation

=head3 Allocation

=begin original

All memory meant to be used with the Perl API functions should be manipulated
using the macros described in this section.  The macros provide the necessary
transparency between differences in the actual malloc implementation that is
used within perl.

=end original

Perl API 関数と共に使うような全てのメモリーはこのセクションで
説明されているマクロを使って扱うべきです。
マクロは実際の malloc の
実装と、perl で使われているものとの差を透過的にします。

=begin original

It is suggested that you enable the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in
order to satisfy allocation requests more quickly.  However, on some
platforms, it may cause spurious malloc or free errors.

=end original

Perl と一緒に配布されていて、あなたがこれを使うことを推奨されている
malloc の変種です。
これは様々な大きさの未割り付けのメモリーをプールしておき、
より早く割り付け要求に応えようとするものです。
しかしながら一部のプラットフォームでは、これは不法なmallocエラーや
freeエラーを引き起こす可能性があります。

=begin original

The following three macros are used to initially allocate memory :

=end original

これら三つのマクロはメモリーの割り付けのために使われます:

    Newx(pointer, number, type);
    Newxc(pointer, number, type, cast);
    Newxz(pointer, number, type);

=begin original

The first argument C<pointer> should be the name of a variable that will
point to the newly allocated memory.

=end original

1 番目の引数 C<pointer> は、新たにメモリーを割り付けられる変数の
名前にします。

=begin original

The second and third arguments C<number> and C<type> specify how many of
the specified type of data structure should be allocated.  The argument
C<type> is passed to C<sizeof>.  The final argument to C<Newxc>, C<cast>,
should be used if the C<pointer> argument is different from the C<type>
argument.

=end original

3 番目と 4 番目の引数 C<number> と C<type> は、指定された構造体を
どれだけ割り付けるのかを指定します。
引数 C<type> は C<sizeof> に渡されます。
C<Newxc>に対する最後の引数 C<cast>は、引数 C<pointer> が
引数 C<type> と異なるときに使うべきものです。

=begin original

Unlike the C<Newx> and C<Newxc> macros, the C<Newxz> macro calls C<memzero>
to zero out all the newly allocated memory.

=end original

C<Newx> や C<Newxc> とは異なり、C<Newxz> は割り付けたメモリーのすべてを
ゼロで埋めるために C<memzero> を呼び出します。

=head3 Reallocation

    Renew(pointer, number, type);
    Renewc(pointer, number, type, cast);
    Safefree(pointer)

=begin original

These three macros are used to change a memory buffer size or to free a
piece of memory no longer needed.  The arguments to C<Renew> and C<Renewc>
match those of C<New> and C<Newc> with the exception of not needing the
"magic cookie" argument.

=end original

上記の三つのマクロは、メモリーのバッファーサイズを変更したりもう
使わなくなったメモリー領域を解放するために使われます。
C<Renew> と
C<Renewc> の引数は、“魔法のクッキー”引数が必要ないということを
除きそれぞれ C<New> と C<Renewc> に一致します。

=head3 Moving

    Move(source, dest, number, type);
    Copy(source, dest, number, type);
    Zero(dest, number, type);

=begin original

These three macros are used to move, copy, or zero out previously allocated
memory.  The C<source> and C<dest> arguments point to the source and
destination starting points.  Perl will move, copy, or zero out C<number>
instances of the size of the C<type> data structure (using the C<sizeof>
function).

=end original

この三つのマクロは、それぞれ割り付けたメモリー領域に対する移動、
複写、ゼロで埋めるといったことに使われます。
C<source> と C<dest> という引数は、転送元と転送先の開始番地への
ポインタです。
Perl は、
構造体 C<type> の大きさ (C<sizeof> 関数を使います)のインスタンスの
C<number> 個分だけ、移動、複写、ゼロ埋めを行います。

=head2 PerlIO

=begin original

The most recent development releases of Perl has been experimenting with
removing Perl's dependency on the "normal" standard I/O suite and allowing
other stdio implementations to be used.  This involves creating a new
abstraction layer that then calls whichever implementation of stdio Perl
was compiled with.  All XSUBs should now use the functions in the PerlIO
abstraction layer and not make any assumptions about what kind of stdio
is being used.

=end original

最新リリースの Perl の開発では、Perl の“通常の”標準入出力ライブラリに
依存している部分を取り除くことと、Perl で別の標準入出力の実装が
使えるようにすることが試みられました。
これにより必然的に、Perl と共にコンパイルされた標準入出力の実装を
呼び出すような新しい抽象層が作られました。
すべての XSUB は、今では PerlIO 抽象層の関数を使うべきで、
これまで使っていた標準入出力に関してのすべての仮定はすべきではありません。

=begin original

For a complete description of the PerlIO abstraction, consult L<perlapio>.

=end original

PerlIO 抽象化に関する詳しい記述は  L<perlapio> を参照してください。

=head2 Putting a C value on Perl stack

(C での値を Perl スタックに入れる)

=begin original

A lot of opcodes (this is an elementary operation in the internal perl
stack machine) put an SV* on the stack. However, as an optimization
the corresponding SV is (usually) not recreated each time. The opcodes
reuse specially assigned SVs (I<target>s) which are (as a corollary)
not constantly freed/created.

=end original

たくさんのオペコード(これは内部的な perl スタックマシンでの基本的な
操作です)が SV をスタックに置きます。
しかしながら、SV に対する最適化のようなものは(通常は)毎回
行なわれるわけではありません。
オペコードは解放されたり、生成されることのない特別に割り当てられた
SVs (I<target>s) を再利用します。

=begin original

Each of the targets is created only once (but see
L<Scratchpads and recursion> below), and when an opcode needs to put
an integer, a double, or a string on stack, it just sets the
corresponding parts of its I<target> and puts the I<target> on stack.

=end original

それぞれの targets は、一度だけ生成して(ただし、後述する
L<Scratchpads and recursion> を参照のこと)、オペコードがスタックに
整数値、倍精度実数値、文字列といったものを置くことを必要とするときに、
スタックに I<target> を置きます。

=begin original

The macro to put this target on stack is C<PUSHTARG>, and it is
directly used in some opcodes, as well as indirectly in zillions of
others, which use it via C<(X)PUSH[iunp]>.

=end original

このtargetをスタックに置くためのマクロが C<PUSHTARG> です。
このマクロは、他の多くのマクロが C<(X)PUSH[iunp]> を通じて間接的に
使っているのと同様に、幾つかのオペコードで直接使われています。

=begin original

Because the target is reused, you must be careful when pushing multiple
values on the stack. The following code will not do what you think:

=end original

Because the target is reused, you must be careful when pushing multiple
values on the stack. The following code will not do what you think:
(TBT)

    XPUSHi(10);
    XPUSHi(20);

=begin original

This translates as "set C<TARG> to 10, push a pointer to C<TARG> onto
the stack; set C<TARG> to 20, push a pointer to C<TARG> onto the stack".
At the end of the operation, the stack does not contain the values 10
and 20, but actually contains two pointers to C<TARG>, which we have set
to 20.

=end original

This translates as "set C<TARG> to 10, push a pointer to C<TARG> onto
the stack; set C<TARG> to 20, push a pointer to C<TARG> onto the stack".
At the end of the operation, the stack does not contain the values 10
and 20, but actually contains two pointers to C<TARG>, which we have set
to 20.
(TBT)

=begin original

If you need to push multiple different values then you should either use
the C<(X)PUSHs> macros, or else use the new C<m(X)PUSH[iunp]> macros,
none of which make use of C<TARG>.  The C<(X)PUSHs> macros simply push an
SV* on the stack, which, as noted under L</XSUBs and the Argument Stack>,
will often need to be "mortal".  The new C<m(X)PUSH[iunp]> macros make
this a little easier to achieve by creating a new mortal for you (via
C<(X)PUSHmortal>), pushing that onto the stack (extending it if necessary
in the case of the C<mXPUSH[iunp]> macros), and then setting its value.
Thus, instead of writing this to "fix" the example above:

=end original

If you need to push multiple different values then you should either use
the C<(X)PUSHs> macros, or else use the new C<m(X)PUSH[iunp]> macros,
none of which make use of C<TARG>.  The C<(X)PUSHs> macros simply push an
SV* on the stack, which, as noted under L</XSUBs and the Argument Stack>,
will often need to be "mortal".  The new C<m(X)PUSH[iunp]> macros make
this a little easier to achieve by creating a new mortal for you (via
C<(X)PUSHmortal>), pushing that onto the stack (extending it if necessary
in the case of the C<mXPUSH[iunp]> macros), and then setting its value.
Thus, instead of writing this to "fix" the example above:
(TBT)

    XPUSHs(sv_2mortal(newSViv(10)))
    XPUSHs(sv_2mortal(newSViv(20)))

=begin original

you can simply write:

=end original

you can simply write:
(TBT)

    mXPUSHi(10)
    mXPUSHi(20)

=begin original

On a related note, if you do use C<(X)PUSH[iunp]>, then you're going to
need a C<dTARG> in your variable declarations so that the C<*PUSH*>
macros can make use of the local variable C<TARG>.  See also C<dTARGET>
and C<dXSTARG>.

=end original

On a related note, if you do use C<(X)PUSH[iunp]>, then you're going to
need a C<dTARG> in your variable declarations so that the C<*PUSH*>
macros can make use of the local variable C<TARG>.  See also C<dTARGET>
and C<dXSTARG>.
(TBT)

=head2 Scratchpads

(スクラッチパッド)

=begin original

The question remains on when the SVs which are I<target>s for opcodes
are created. The answer is that they are created when the current unit --
a subroutine or a file (for opcodes for statements outside of
subroutines) -- is compiled. During this time a special anonymous Perl
array is created, which is called a scratchpad for the current
unit.

=end original

残っている疑問は、オペコードに対する I<target>s である SV をいつ
生成するのかということでしょう。
その答えは、カレントユニット -- サブルーチンもしくは(サブルーチンの
外側にある文のためのオペコードのための)ファイル -- が
コンパイルされたときです。
この間、特別な無名配列が生成されます。
これはカレントユニットのためのスクラッチパッド (scrachpad) と
呼ばれるものです。

=begin original

A scratchpad keeps SVs which are lexicals for the current unit and are
targets for opcodes. One can deduce that an SV lives on a scratchpad
by looking on its flags: lexicals have C<SVs_PADMY> set, and
I<target>s have C<SVs_PADTMP> set.

=end original

スクラッチパッドはカレントユニットのためのレキシカルやオペコードの
ための target である SV を保持します。
SV があるスクラッチパッドを、
SV のフラグを見ることによって推測することができます。
レキシカルでは
C<SVs_PADMY> されていて、I<target>s では C<SVs_PADTMP> が
セットされています。

=begin original

The correspondence between OPs and I<target>s is not 1-to-1. Different
OPs in the compile tree of the unit can use the same target, if this
would not conflict with the expected life of the temporary.

=end original

オペコードと I<target>s の間の対応は一対一ではありません。
あるユニットの翻訳木 (compile tree)にある異なるオペコードは、
これが一時変数の expected life と衝突していなければ同じ target を使うことが
できます。

=head2 Scratchpads and recursion

(スクラッチパッドと再帰)

=begin original

In fact it is not 100% true that a compiled unit contains a pointer to
the scratchpad AV. In fact it contains a pointer to an AV of
(initially) one element, and this element is the scratchpad AV. Why do
we need an extra level of indirection?

=end original

コンパイルされたユニットがスクラッチパッド AVへのポインタを
保持しているということは、100% 本当のことではありません。
実際は、
(初期値では)一要素の AV へのポインタを保持していて、この要素が
スクラッチパッド AV なのです。
なぜ、こういう余計な間接レベルを必要としているのでしょう?

=begin original

The answer is B<recursion>, and maybe B<threads>. Both
these can create several execution pointers going into the same
subroutine. For the subroutine-child not write over the temporaries
for the subroutine-parent (lifespan of which covers the call to the
child), the parent and the child should have different
scratchpads. (I<And> the lexicals should be separate anyway!)

=end original

その答えは B<再帰> と、おそらく B<スレッド> です。
これら二つは同じサブルーチンに対する別々の実行ポインタを
生成しようとするかもしれません。
子サブルーチンが(呼び出す子サブルーチンを
覆っている寿命を持つ)親サブルーチンの一時変数を上書きしてしまわないように、
親と子では、異なるスクラッチパッドを持つようにすべきです
(B<かつ>、レキシカルは分けておくべきなのです!)。

=begin original

So each subroutine is born with an array of scratchpads (of length 1).
On each entry to the subroutine it is checked that the current
depth of the recursion is not more than the length of this array, and
if it is, new scratchpad is created and pushed into the array.

=end original

各サブルーチンは、スクラッチパッドの(長さが 1 の)配列を伴って生成されます。
サブルーチンに対する各エントリーはその時点での再帰の深さが
この配列の長さよりも大きくないことをチェックします。
そして、
もしそうであれば、新たなスクラッチパッドが生成されて配列へと
プッシュされます。

=begin original

The I<target>s on this scratchpad are C<undef>s, but they are already
marked with correct flags.

=end original

このスクラッチパッドにある I<target>s は C<undef> ですが、これらはすでに
正しいフラグによってマークされています。

=head1 Compiled code

(コンパイルされたコード)

=head2 Code tree

(コード木)

=begin original

Here we describe the internal form your code is converted to by
Perl. Start with a simple example:

=end original

ここで、Perl によって変換されたプログラムの内部形式を説明しましょう。
簡単な例から始めます。

  $a = $b + $c;

=begin original

This is converted to a tree similar to this one:

=end original

これは次のような木構造へ変換されます(実際にはもっと複雑です)。

             assign-to
           /           \
          +             $a
        /   \
      $b     $c

=begin original

(but slightly more complicated).  This tree reflects the way Perl
parsed your code, but has nothing to do with the execution order.
There is an additional "thread" going through the nodes of the tree
which shows the order of execution of the nodes.  In our simplified
example above it looks like:

=end original

この木構造は、Perl があなたのプログラムを解析したやり方を
反映していますが、実行の順序については反映していません。
ノードの実行順序を表わす木構造のノードを辿ろうとする別の
"スレッド"(thread)があります。
先の簡単な例では、次のようになります。

     $b ---> $c ---> + ---> $a ---> assign-to

=begin original

But with the actual compile tree for C<$a = $b + $c> it is different:
some nodes I<optimized away>.  As a corollary, though the actual tree
contains more nodes than our simplified example, the execution order
is the same as in our example.

=end original

しかし、C<$a = $b + $c> に対する実際の解析木はこれと異なります。
一部のノードがB<最適化>されています。
その結果として、実際の木構造が私たちの単純な例よりも多くのノードを
持っていたとしても、その実行順序は同じになります。

=head2 Examining the tree

(木を検査する)

=begin original

If you have your perl compiled for debugging (usually done with
C<-DDEBUGGING> on the C<Configure> command line), you may examine the
compiled tree by specifying C<-Dx> on the Perl command line.  The
output takes several lines per node, and for C<$b+$c> it looks like
this:

=end original

perlをデバッグ用にコンパイルした(通常は C<Configure> のコマンドラインで
C<-DDEBUGGING> を使って行います)場合、Perl のコマンドラインで
C<-Dx> を指定することによって解析木を検査することができます。
その出力はノード毎に数行を取り、C<$b+$c> は以下のようになります。

    5           TYPE = add  ===> 6
                TARG = 1
                FLAGS = (SCALAR,KIDS)
                {
                    TYPE = null  ===> (4)
                      (was rv2sv)
                    FLAGS = (SCALAR,KIDS)
                    {
    3                   TYPE = gvsv  ===> 4
                        FLAGS = (SCALAR)
                        GV = main::b
                    }
                }
                {
                    TYPE = null  ===> (5)
                      (was rv2sv)
                    FLAGS = (SCALAR,KIDS)
                    {
    4                   TYPE = gvsv  ===> 5
                        FLAGS = (SCALAR)
                        GV = main::c
                    }
                }

=begin original

This tree has 5 nodes (one per C<TYPE> specifier), only 3 of them are
not optimized away (one per number in the left column).  The immediate
children of the given node correspond to C<{}> pairs on the same level
of indentation, thus this listing corresponds to the tree:

=end original

この木には五つのノード(C<TYPE> 毎にひとつ)があって、そのうちの
三つだけが最適化されないものです(左側に数字のあるもの)。
与えられたノードのすぐ下にある子供は同じレベルのインデントにあるC<{}>の
ペアに対応します。
したがって、このリストは以下の木に対応します。

                   add
                 /     \
               null    null
                |       |
               gvsv    gvsv

=begin original

The execution order is indicated by C<===E<gt>> marks, thus it is C<3
4 5 6> (node C<6> is not included into above listing), i.e.,
C<gvsv gvsv add whatever>.

=end original

実行順序は C<===E<gt>> マークによって表わされますから、C<3 4 5 6>
(ノード C<6>は、上にあるリストには含まれません)となります。
つまり、
C<gvsv gvsv add whatever> ということになります。

=begin original

Each of these nodes represents an op, a fundamental operation inside the
Perl core. The code which implements each operation can be found in the
F<pp*.c> files; the function which implements the op with type C<gvsv>
is C<pp_gvsv>, and so on. As the tree above shows, different ops have
different numbers of children: C<add> is a binary operator, as one would
expect, and so has two children. To accommodate the various different
numbers of children, there are various types of op data structure, and
they link together in different ways.

=end original

Each of these nodes represents an op, a fundamental operation inside the
Perl core. The code which implements each operation can be found in the
F<pp*.c> files; the function which implements the op with type C<gvsv>
is C<pp_gvsv>, and so on. As the tree above shows, different ops have
different numbers of children: C<add> is a binary operator, as one would
expect, and so has two children. To accommodate the various different
numbers of children, there are various types of op data structure, and
they link together in different ways.
(TBT)

=begin original

The simplest type of op structure is C<OP>: this has no children. Unary
operators, C<UNOP>s, have one child, and this is pointed to by the
C<op_first> field. Binary operators (C<BINOP>s) have not only an
C<op_first> field but also an C<op_last> field. The most complex type of
op is a C<LISTOP>, which has any number of children. In this case, the
first child is pointed to by C<op_first> and the last child by
C<op_last>. The children in between can be found by iteratively
following the C<op_sibling> pointer from the first child to the last.

=end original

The simplest type of op structure is C<OP>: this has no children. Unary
operators, C<UNOP>s, have one child, and this is pointed to by the
C<op_first> field. Binary operators (C<BINOP>s) have not only an
C<op_first> field but also an C<op_last> field. The most complex type of
op is a C<LISTOP>, which has any number of children. In this case, the
first child is pointed to by C<op_first> and the last child by
C<op_last>. The children in between can be found by iteratively
following the C<op_sibling> pointer from the first child to the last.
(TBT)

=begin original

There are also two other op types: a C<PMOP> holds a regular expression,
and has no children, and a C<LOOP> may or may not have children. If the
C<op_children> field is non-zero, it behaves like a C<LISTOP>. To
complicate matters, if a C<UNOP> is actually a C<null> op after
optimization (see L</Compile pass 2: context propagation>) it will still
have children in accordance with its former type.

=end original

There are also two other op types: a C<PMOP> holds a regular expression,
and has no children, and a C<LOOP> may or may not have children. If the
C<op_children> field is non-zero, it behaves like a C<LISTOP>. To
complicate matters, if a C<UNOP> is actually a C<null> op after
optimization (see L</Compile pass 2: context propagation>) it will still
have children in accordance with its former type.
(TBT)

=begin original

Another way to examine the tree is to use a compiler back-end module, such
as L<B::Concise>.

=end original

Another way to examine the tree is to use a compiler back-end module, such
as L<B::Concise>.
(TBT)

=head2 Compile pass 1: check routines

=begin original

The tree is created by the compiler while I<yacc> code feeds it
the constructions it recognizes. Since I<yacc> works bottom-up, so does
the first pass of perl compilation.

=end original

この木構造は、I<yacc> が perl プログラムを読み込んでその構造を解析して
いる間にコンパイラによって生成されます。
yacc はボトムアップで動作するので、perl によるコンパイルの最初のパスで
行なわれます。

=begin original

What makes this pass interesting for perl developers is that some
optimization may be performed on this pass.  This is optimization by
so-called "check routines".  The correspondence between node names
and corresponding check routines is described in F<opcode.pl> (do not
forget to run C<make regen_headers> if you modify this file).

=end original

perl 開発者にとって興味深いのは、このパスで行なわれるいくつかの
最適化でしょう。
これは、"check routines" とも呼ばれる最適化です。
ノード名と対応するチェックルーチンとの間の対応は F<opcode.pl> に
記述されています(このファイルを修正した場合には、C<make regen_headers> を
実行することを忘れないでください)。

=begin original

A check routine is called when the node is fully constructed except
for the execution-order thread.  Since at this time there are no
back-links to the currently constructed node, one can do most any
operation to the top-level node, including freeing it and/or creating
new nodes above/below it.

=end original

チェックルーチンは、ノードが実行順序スレッドを除いて完全に
構築されたときに呼び出されます。
この時点では、構築されたノードに対する
back-line が存在しないので、トップレベルノードに対して、新たなノードを
生成したりノードを解放したりすることを含めて、ほとんどの操作を
行うことができます。

=begin original

The check routine returns the node which should be inserted into the
tree (if the top-level node was not modified, check routine returns
its argument).

=end original

このチェックルーチンは木に挿入すべきノードを返します(トップレベルの
ノードが変更されていなければ、チェックルーチンはその引数を返します)。

=begin original

By convention, check routines have names C<ck_*>. They are usually
called from C<new*OP> subroutines (or C<convert>) (which in turn are
called from F<perly.y>).

=end original

規約により、チェックルーチンは C<ck_*> のような名前を持ちます。
これらは通常サブルーチン C<new*OP> (もしくは C<convert>)から
呼び出されます(これらのサブルーチンは F<perly.y> から呼び出されます)。

=head2 Compile pass 1a: constant folding

(コンパイルパス1a: 定数の畳み込み)

=begin original

Immediately after the check routine is called the returned node is
checked for being compile-time executable.  If it is (the value is
judged to be constant) it is immediately executed, and a I<constant>
node with the "return value" of the corresponding subtree is
substituted instead.  The subtree is deleted.

=end original

チェックルーチンが呼び出された直後に、返されたノードはコンパイル時
実行のためのチェックが行なわれます。
もしそうであれば(値が定数であると判定された)、そのノードは即座に
実行されて、“戻り値”に
対応する部分木は B<定数> ノードで置換され、部分木が削除されます。

=begin original

If constant folding was not performed, the execution-order thread is
created.

=end original

定数の畳み込み(constant folding)が働かなければ、実行順序スレッドが
生成されます。

=head2 Compile pass 2: context propagation

(コンパイルパス2: コンテキスト伝播)

=begin original

When a context for a part of compile tree is known, it is propagated
down through the tree.  At this time the context can have 5 values
(instead of 2 for runtime context): void, boolean, scalar, list, and
lvalue.  In contrast with the pass 1 this pass is processed from top
to bottom: a node's context determines the context for its children.

=end original

解析木の一部分のコンテキストがわかっているとき、それは木の末端へ
伝播します。
このとき、コンテキストは(実行時コンテキストの二種類ではなく)
無効、真偽値、スカラ、リスト、左辺値の五種類の値を
持つことができます。
パス 1 とは対照的に、このパスではトップから末端へと処理が進みます。
あるノードのコンテキストは、その下にある部分のコンテキストを決定します。

=begin original

Additional context-dependent optimizations are performed at this time.
Since at this moment the compile tree contains back-references (via
"thread" pointers), nodes cannot be free()d now.  To allow
optimized-away nodes at this stage, such nodes are null()ified instead
of free()ing (i.e. their type is changed to OP_NULL).

=end original

コンテキストに依存した最適化はこのときに行なわれます。
この動作では解析木が(“スレッド”ポインタを通じて)後方参照を
含んでいるので、ノードをこの時に free() することはできません。
このステージでノードを最適化するのを許すために、対象となるノードは
free() されるかわりに null() されます(つまり、そのノードの型が OP_NULL に
変えられるということ)。

=head2 Compile pass 3: peephole optimization

(コンパイルパス3: 覗き穴最適化)

=begin original

After the compile tree for a subroutine (or for an C<eval> or a file)
is created, an additional pass over the code is performed. This pass
is neither top-down or bottom-up, but in the execution order (with
additional complications for conditionals).  These optimizations are
done in the subroutine peep().  Optimizations performed at this stage
are subject to the same restrictions as in the pass 2.

=end original

サブルーチン(もしくは C<eval> かファイル)に対する解析木が生成された後で、
そのコードに対する追加パスが実行されます。
このパスはトップダウンでもボトムアップでもなく、(条件に対する
compillcation を伴った)実行順序です。
これらの最適化はサブルーチン peep() で行なわれます。
このステージで行なわれる最適化はパス 2 でのものと同じ制限に従います。

=head2 Pluggable runops

=begin original

The compile tree is executed in a runops function.  There are two runops
functions, in F<run.c> and in F<dump.c>.  C<Perl_runops_debug> is used
with DEBUGGING and C<Perl_runops_standard> is used otherwise.  For fine
control over the execution of the compile tree it is possible to provide
your own runops function.

=end original

The compile tree is executed in a runops function.  There are two runops
functions, in F<run.c> and in F<dump.c>.  C<Perl_runops_debug> is used
with DEBUGGING and C<Perl_runops_standard> is used otherwise.  For fine
control over the execution of the compile tree it is possible to provide
your own runops function.
(TBT)

=begin original

It's probably best to copy one of the existing runops functions and
change it to suit your needs.  Then, in the BOOT section of your XS
file, add the line:

=end original

It's probably best to copy one of the existing runops functions and
change it to suit your needs.  Then, in the BOOT section of your XS
file, add the line:
(TBT)

  PL_runops = my_runops;

=begin original

This function should be as efficient as possible to keep your programs
running as fast as possible.

=end original

This function should be as efficient as possible to keep your programs
running as fast as possible.
(TBT)

=head1 Examining internal data structures with the C<dump> functions

=begin original

To aid debugging, the source file F<dump.c> contains a number of
functions which produce formatted output of internal data structures.

=end original

To aid debugging, the source file F<dump.c> contains a number of
functions which produce formatted output of internal data structures.
(TBT)

=begin original

The most commonly used of these functions is C<Perl_sv_dump>; it's used
for dumping SVs, AVs, HVs, and CVs. The C<Devel::Peek> module calls
C<sv_dump> to produce debugging output from Perl-space, so users of that
module should already be familiar with its format.

=end original

The most commonly used of these functions is C<Perl_sv_dump>; it's used
for dumping SVs, AVs, HVs, and CVs. The C<Devel::Peek> module calls
C<sv_dump> to produce debugging output from Perl-space, so users of that
module should already be familiar with its format.
(TBT)

=begin original

C<Perl_op_dump> can be used to dump an C<OP> structure or any of its
derivatives, and produces output similar to C<perl -Dx>; in fact,
C<Perl_dump_eval> will dump the main root of the code being evaluated,
exactly like C<-Dx>.

=end original

C<Perl_op_dump> can be used to dump an C<OP> structure or any of its
derivatives, and produces output similar to C<perl -Dx>; in fact,
C<Perl_dump_eval> will dump the main root of the code being evaluated,
exactly like C<-Dx>.
(TBT)

=begin original

Other useful functions are C<Perl_dump_sub>, which turns a C<GV> into an
op tree, C<Perl_dump_packsubs> which calls C<Perl_dump_sub> on all the
subroutines in a package like so: (Thankfully, these are all xsubs, so
there is no op tree)

=end original

Other useful functions are C<Perl_dump_sub>, which turns a C<GV> into an
op tree, C<Perl_dump_packsubs> which calls C<Perl_dump_sub> on all the
subroutines in a package like so: (Thankfully, these are all xsubs, so
there is no op tree)
(TBT)

    (gdb) print Perl_dump_packsubs(PL_defstash)

    SUB attributes::bootstrap = (xsub 0x811fedc 0)

    SUB UNIVERSAL::can = (xsub 0x811f50c 0)

    SUB UNIVERSAL::isa = (xsub 0x811f304 0)

    SUB UNIVERSAL::VERSION = (xsub 0x811f7ac 0)

    SUB DynaLoader::boot_DynaLoader = (xsub 0x805b188 0)

=begin original

and C<Perl_dump_all>, which dumps all the subroutines in the stash and
the op tree of the main root.

=end original

and C<Perl_dump_all>, which dumps all the subroutines in the stash and
the op tree of the main root.
(TBT)

=head1 How multiple interpreters and concurrency are supported

=head2 Background and PERL_IMPLICIT_CONTEXT

=begin original

The Perl interpreter can be regarded as a closed box: it has an API
for feeding it code or otherwise making it do things, but it also has
functions for its own use.  This smells a lot like an object, and
there are ways for you to build Perl so that you can have multiple
interpreters, with one interpreter represented either as a C structure,
or inside a thread-specific structure.  These structures contain all
the context, the state of that interpreter.

=end original

The Perl interpreter can be regarded as a closed box: it has an API
for feeding it code or otherwise making it do things, but it also has
functions for its own use.  This smells a lot like an object, and
there are ways for you to build Perl so that you can have multiple
interpreters, with one interpreter represented either as a C structure,
or inside a thread-specific structure.  These structures contain all
the context, the state of that interpreter.
(TBT)

=begin original

One macro controls the major Perl build flavor: MULTIPLICITY. The
MULTIPLICITY build has a C structure that packages all the interpreter
state. With multiplicity-enabled perls, PERL_IMPLICIT_CONTEXT is also
normally defined, and enables the support for passing in a "hidden" first
argument that represents all three data structures. MULTIPLICITY makes
mutli-threaded perls possible (with the ithreads threading model, related
to the macro USE_ITHREADS.)

=end original

One macro controls the major Perl build flavor: MULTIPLICITY. The
MULTIPLICITY build has a C structure that packages all the interpreter
state. With multiplicity-enabled perls, PERL_IMPLICIT_CONTEXT is also
normally defined, and enables the support for passing in a "hidden" first
argument that represents all three data structures. MULTIPLICITY makes
mutli-threaded perls possible (with the ithreads threading model, related
to the macro USE_ITHREADS.)
(TBT)

=begin original

Two other "encapsulation" macros are the PERL_GLOBAL_STRUCT and
PERL_GLOBAL_STRUCT_PRIVATE (the latter turns on the former, and the
former turns on MULTIPLICITY.)  The PERL_GLOBAL_STRUCT causes all the
internal variables of Perl to be wrapped inside a single global struct,
struct perl_vars, accessible as (globals) &PL_Vars or PL_VarsPtr or
the function  Perl_GetVars().  The PERL_GLOBAL_STRUCT_PRIVATE goes
one step further, there is still a single struct (allocated in main()
either from heap or from stack) but there are no global data symbols
pointing to it.  In either case the global struct should be initialised
as the very first thing in main() using Perl_init_global_struct() and
correspondingly tear it down after perl_free() using Perl_free_global_struct(),
please see F<miniperlmain.c> for usage details.  You may also need
to use C<dVAR> in your coding to "declare the global variables"
when you are using them.  dTHX does this for you automatically.

=end original

Two other "encapsulation" macros are the PERL_GLOBAL_STRUCT and
PERL_GLOBAL_STRUCT_PRIVATE (the latter turns on the former, and the
former turns on MULTIPLICITY.)  The PERL_GLOBAL_STRUCT causes all the
internal variables of Perl to be wrapped inside a single global struct,
struct perl_vars, accessible as (globals) &PL_Vars or PL_VarsPtr or
the function  Perl_GetVars().  The PERL_GLOBAL_STRUCT_PRIVATE goes
one step further, there is still a single struct (allocated in main()
either from heap or from stack) but there are no global data symbols
pointing to it.  In either case the global struct should be initialised
as the very first thing in main() using Perl_init_global_struct() and
correspondingly tear it down after perl_free() using Perl_free_global_struct(),
please see F<miniperlmain.c> for usage details.  You may also need
to use C<dVAR> in your coding to "declare the global variables"
when you are using them.  dTHX does this for you automatically.
(TBT)

=begin original

To see whether you have non-const data you can use a BSD-compatible C<nm>:

=end original

To see whether you have non-const data you can use a BSD-compatible C<nm>:
(TBT)

  nm libperl.a | grep -v ' [TURtr] '

=begin original

If this displays any C<D> or C<d> symbols, you have non-const data.

=end original

If this displays any C<D> or C<d> symbols, you have non-const data.
(TBT)

=begin original

For backward compatibility reasons defining just PERL_GLOBAL_STRUCT
doesn't actually hide all symbols inside a big global struct: some
PerlIO_xxx vtables are left visible.  The PERL_GLOBAL_STRUCT_PRIVATE
then hides everything (see how the PERLIO_FUNCS_DECL is used).

=end original

For backward compatibility reasons defining just PERL_GLOBAL_STRUCT
doesn't actually hide all symbols inside a big global struct: some
PerlIO_xxx vtables are left visible.  The PERL_GLOBAL_STRUCT_PRIVATE
then hides everything (see how the PERLIO_FUNCS_DECL is used).
(TBT)

=begin original

All this obviously requires a way for the Perl internal functions to be
either subroutines taking some kind of structure as the first
argument, or subroutines taking nothing as the first argument.  To
enable these two very different ways of building the interpreter,
the Perl source (as it does in so many other situations) makes heavy
use of macros and subroutine naming conventions.

=end original

All this obviously requires a way for the Perl internal functions to be
either subroutines taking some kind of structure as the first
argument, or subroutines taking nothing as the first argument.  To
enable these two very different ways of building the interpreter,
the Perl source (as it does in so many other situations) makes heavy
use of macros and subroutine naming conventions.
(TBT)

=begin original

First problem: deciding which functions will be public API functions and
which will be private.  All functions whose names begin C<S_> are private
(think "S" for "secret" or "static").  All other functions begin with
"Perl_", but just because a function begins with "Perl_" does not mean it is
part of the API. (See L</Internal Functions>.) The easiest way to be B<sure> a
function is part of the API is to find its entry in L<perlapi>.
If it exists in L<perlapi>, it's part of the API.  If it doesn't, and you
think it should be (i.e., you need it for your extension), send mail via
L<perlbug> explaining why you think it should be.

=end original

First problem: deciding which functions will be public API functions and
which will be private.  All functions whose names begin C<S_> are private
(think "S" for "secret" or "static").  All other functions begin with
"Perl_", but just because a function begins with "Perl_" does not mean it is
part of the API. (See L</Internal Functions>.) The easiest way to be B<sure> a
function is part of the API is to find its entry in L<perlapi>.
If it exists in L<perlapi>, it's part of the API.  If it doesn't, and you
think it should be (i.e., you need it for your extension), send mail via
L<perlbug> explaining why you think it should be.
(TBT)

=begin original

Second problem: there must be a syntax so that the same subroutine
declarations and calls can pass a structure as their first argument,
or pass nothing.  To solve this, the subroutines are named and
declared in a particular way.  Here's a typical start of a static
function used within the Perl guts:

=end original

Second problem: there must be a syntax so that the same subroutine
declarations and calls can pass a structure as their first argument,
or pass nothing.  To solve this, the subroutines are named and
declared in a particular way.  Here's a typical start of a static
function used within the Perl guts:
(TBT)

  STATIC void
  S_incline(pTHX_ char *s)

=begin original

STATIC becomes "static" in C, and may be #define'd to nothing in some
configurations in future.

=end original

STATIC becomes "static" in C, and may be #define'd to nothing in some
configurations in future.
(TBT)

=begin original

A public function (i.e. part of the internal API, but not necessarily
sanctioned for use in extensions) begins like this:

=end original

A public function (i.e. part of the internal API, but not necessarily
sanctioned for use in extensions) begins like this:
(TBT)

  void
  Perl_sv_setiv(pTHX_ SV* dsv, IV num)

=begin original

C<pTHX_> is one of a number of macros (in perl.h) that hide the
details of the interpreter's context.  THX stands for "thread", "this",
or "thingy", as the case may be.  (And no, George Lucas is not involved. :-)
The first character could be 'p' for a B<p>rototype, 'a' for B<a>rgument,
or 'd' for B<d>eclaration, so we have C<pTHX>, C<aTHX> and C<dTHX>, and
their variants.

=end original

C<pTHX_> is one of a number of macros (in perl.h) that hide the
details of the interpreter's context.  THX stands for "thread", "this",
or "thingy", as the case may be.  (And no, George Lucas is not involved. :-)
The first character could be 'p' for a B<p>rototype, 'a' for B<a>rgument,
or 'd' for B<d>eclaration, so we have C<pTHX>, C<aTHX> and C<dTHX>, and
their variants.
(TBT)

=begin original

When Perl is built without options that set PERL_IMPLICIT_CONTEXT, there is no
first argument containing the interpreter's context.  The trailing underscore
in the pTHX_ macro indicates that the macro expansion needs a comma
after the context argument because other arguments follow it.  If
PERL_IMPLICIT_CONTEXT is not defined, pTHX_ will be ignored, and the
subroutine is not prototyped to take the extra argument.  The form of the
macro without the trailing underscore is used when there are no additional
explicit arguments.

=end original

When Perl is built without options that set PERL_IMPLICIT_CONTEXT, there is no
first argument containing the interpreter's context.  The trailing underscore
in the pTHX_ macro indicates that the macro expansion needs a comma
after the context argument because other arguments follow it.  If
PERL_IMPLICIT_CONTEXT is not defined, pTHX_ will be ignored, and the
subroutine is not prototyped to take the extra argument.  The form of the
macro without the trailing underscore is used when there are no additional
explicit arguments.
(TBT)

=begin original

When a core function calls another, it must pass the context.  This
is normally hidden via macros.  Consider C<sv_setiv>.  It expands into
something like this:

=end original

When a core function calls another, it must pass the context.  This
is normally hidden via macros.  Consider C<sv_setiv>.  It expands into
something like this:
(TBT)

    #ifdef PERL_IMPLICIT_CONTEXT
      #define sv_setiv(a,b)      Perl_sv_setiv(aTHX_ a, b)
      /* can't do this for vararg functions, see below */
    #else
      #define sv_setiv           Perl_sv_setiv
    #endif

=begin original

This works well, and means that XS authors can gleefully write:

=end original

This works well, and means that XS authors can gleefully write:
(TBT)

    sv_setiv(foo, bar);

=begin original

and still have it work under all the modes Perl could have been
compiled with.

=end original

and still have it work under all the modes Perl could have been
compiled with.
(TBT)

=begin original

This doesn't work so cleanly for varargs functions, though, as macros
imply that the number of arguments is known in advance.  Instead we
either need to spell them out fully, passing C<aTHX_> as the first
argument (the Perl core tends to do this with functions like
Perl_warner), or use a context-free version.

=end original

This doesn't work so cleanly for varargs functions, though, as macros
imply that the number of arguments is known in advance.  Instead we
either need to spell them out fully, passing C<aTHX_> as the first
argument (the Perl core tends to do this with functions like
Perl_warner), or use a context-free version.
(TBT)

=begin original

The context-free version of Perl_warner is called
Perl_warner_nocontext, and does not take the extra argument.  Instead
it does dTHX; to get the context from thread-local storage.  We
C<#define warner Perl_warner_nocontext> so that extensions get source
compatibility at the expense of performance.  (Passing an arg is
cheaper than grabbing it from thread-local storage.)

=end original

The context-free version of Perl_warner is called
Perl_warner_nocontext, and does not take the extra argument.  Instead
it does dTHX; to get the context from thread-local storage.  We
C<#define warner Perl_warner_nocontext> so that extensions get source
compatibility at the expense of performance.  (Passing an arg is
cheaper than grabbing it from thread-local storage.)
(TBT)

=begin original

You can ignore [pad]THXx when browsing the Perl headers/sources.
Those are strictly for use within the core.  Extensions and embedders
need only be aware of [pad]THX.

=end original

You can ignore [pad]THXx when browsing the Perl headers/sources.
Those are strictly for use within the core.  Extensions and embedders
need only be aware of [pad]THX.
(TBT)

=head2 So what happened to dTHR?

=begin original

C<dTHR> was introduced in perl 5.005 to support the older thread model.
The older thread model now uses the C<THX> mechanism to pass context
pointers around, so C<dTHR> is not useful any more.  Perl 5.6.0 and
later still have it for backward source compatibility, but it is defined
to be a no-op.

=end original

C<dTHR> was introduced in perl 5.005 to support the older thread model.
The older thread model now uses the C<THX> mechanism to pass context
pointers around, so C<dTHR> is not useful any more.  Perl 5.6.0 and
later still have it for backward source compatibility, but it is defined
to be a no-op.
(TBT)

=head2 How do I use all this in extensions?

=begin original

When Perl is built with PERL_IMPLICIT_CONTEXT, extensions that call
any functions in the Perl API will need to pass the initial context
argument somehow.  The kicker is that you will need to write it in
such a way that the extension still compiles when Perl hasn't been
built with PERL_IMPLICIT_CONTEXT enabled.

=end original

When Perl is built with PERL_IMPLICIT_CONTEXT, extensions that call
any functions in the Perl API will need to pass the initial context
argument somehow.  The kicker is that you will need to write it in
such a way that the extension still compiles when Perl hasn't been
built with PERL_IMPLICIT_CONTEXT enabled.
(TBT)

=begin original

There are three ways to do this.  First, the easy but inefficient way,
which is also the default, in order to maintain source compatibility
with extensions: whenever XSUB.h is #included, it redefines the aTHX
and aTHX_ macros to call a function that will return the context.
Thus, something like:

=end original

There are three ways to do this.  First, the easy but inefficient way,
which is also the default, in order to maintain source compatibility
with extensions: whenever XSUB.h is #included, it redefines the aTHX
and aTHX_ macros to call a function that will return the context.
Thus, something like:
(TBT)

        sv_setiv(sv, num);

=begin original

in your extension will translate to this when PERL_IMPLICIT_CONTEXT is
in effect:

=end original

in your extension will translate to this when PERL_IMPLICIT_CONTEXT is
in effect:
(TBT)

        Perl_sv_setiv(Perl_get_context(), sv, num);

=begin original

or to this otherwise:

=end original

or to this otherwise:
(TBT)

        Perl_sv_setiv(sv, num);

=begin original

You have to do nothing new in your extension to get this; since
the Perl library provides Perl_get_context(), it will all just
work.

=end original

You have to do nothing new in your extension to get this; since
the Perl library provides Perl_get_context(), it will all just
work.
(TBT)

=begin original

The second, more efficient way is to use the following template for
your Foo.xs:

=end original

The second, more efficient way is to use the following template for
your Foo.xs:
(TBT)

        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
        #include "EXTERN.h"
        #include "perl.h"
        #include "XSUB.h"

        STATIC void my_private_function(int arg1, int arg2);

        STATIC void
        my_private_function(int arg1, int arg2)
        {
            dTHX;       /* fetch context */
            ... call many Perl API functions ...
        }

        [... etc ...]

        MODULE = Foo            PACKAGE = Foo

        /* typical XSUB */

        void
        my_xsub(arg)
                int arg
            CODE:
                my_private_function(arg, 10);

=begin original

Note that the only two changes from the normal way of writing an
extension is the addition of a C<#define PERL_NO_GET_CONTEXT> before
including the Perl headers, followed by a C<dTHX;> declaration at
the start of every function that will call the Perl API.  (You'll
know which functions need this, because the C compiler will complain
that there's an undeclared identifier in those functions.)  No changes
are needed for the XSUBs themselves, because the XS() macro is
correctly defined to pass in the implicit context if needed.

=end original

Note that the only two changes from the normal way of writing an
extension is the addition of a C<#define PERL_NO_GET_CONTEXT> before
including the Perl headers, followed by a C<dTHX;> declaration at
the start of every function that will call the Perl API.  (You'll
know which functions need this, because the C compiler will complain
that there's an undeclared identifier in those functions.)  No changes
are needed for the XSUBs themselves, because the XS() macro is
correctly defined to pass in the implicit context if needed.
(TBT)

=begin original

The third, even more efficient way is to ape how it is done within
the Perl guts:

=end original

The third, even more efficient way is to ape how it is done within
the Perl guts:
(TBT)

        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
        #include "EXTERN.h"
        #include "perl.h"
        #include "XSUB.h"

        /* pTHX_ only needed for functions that call Perl API */
        STATIC void my_private_function(pTHX_ int arg1, int arg2);

        STATIC void
        my_private_function(pTHX_ int arg1, int arg2)
        {
            /* dTHX; not needed here, because THX is an argument */
            ... call Perl API functions ...
        }

        [... etc ...]

        MODULE = Foo            PACKAGE = Foo

        /* typical XSUB */

        void
        my_xsub(arg)
                int arg
            CODE:
                my_private_function(aTHX_ arg, 10);

=begin original

This implementation never has to fetch the context using a function
call, since it is always passed as an extra argument.  Depending on
your needs for simplicity or efficiency, you may mix the previous
two approaches freely.

=end original

This implementation never has to fetch the context using a function
call, since it is always passed as an extra argument.  Depending on
your needs for simplicity or efficiency, you may mix the previous
two approaches freely.
(TBT)

=begin original

Never add a comma after C<pTHX> yourself--always use the form of the
macro with the underscore for functions that take explicit arguments,
or the form without the argument for functions with no explicit arguments.

=end original

Never add a comma after C<pTHX> yourself--always use the form of the
macro with the underscore for functions that take explicit arguments,
or the form without the argument for functions with no explicit arguments.
(TBT)

=begin original

If one is compiling Perl with the C<-DPERL_GLOBAL_STRUCT> the C<dVAR>
definition is needed if the Perl global variables (see F<perlvars.h>
or F<globvar.sym>) are accessed in the function and C<dTHX> is not
used (the C<dTHX> includes the C<dVAR> if necessary).  One notices
the need for C<dVAR> only with the said compile-time define, because
otherwise the Perl global variables are visible as-is.

=end original

If one is compiling Perl with the C<-DPERL_GLOBAL_STRUCT> the C<dVAR>
definition is needed if the Perl global variables (see F<perlvars.h>
or F<globvar.sym>) are accessed in the function and C<dTHX> is not
used (the C<dTHX> includes the C<dVAR> if necessary).  One notices
the need for C<dVAR> only with the said compile-time define, because
otherwise the Perl global variables are visible as-is.
(TBT)

=head2 Should I do anything special if I call perl from multiple threads?

=begin original

If you create interpreters in one thread and then proceed to call them in
another, you need to make sure perl's own Thread Local Storage (TLS) slot is
initialized correctly in each of those threads.

=end original

If you create interpreters in one thread and then proceed to call them in
another, you need to make sure perl's own Thread Local Storage (TLS) slot is
initialized correctly in each of those threads.
(TBT)

=begin original

The C<perl_alloc> and C<perl_clone> API functions will automatically set
the TLS slot to the interpreter they created, so that there is no need to do
anything special if the interpreter is always accessed in the same thread that
created it, and that thread did not create or call any other interpreters
afterwards.  If that is not the case, you have to set the TLS slot of the
thread before calling any functions in the Perl API on that particular
interpreter.  This is done by calling the C<PERL_SET_CONTEXT> macro in that
thread as the first thing you do:

=end original

The C<perl_alloc> and C<perl_clone> API functions will automatically set
the TLS slot to the interpreter they created, so that there is no need to do
anything special if the interpreter is always accessed in the same thread that
created it, and that thread did not create or call any other interpreters
afterwards.  If that is not the case, you have to set the TLS slot of the
thread before calling any functions in the Perl API on that particular
interpreter.  This is done by calling the C<PERL_SET_CONTEXT> macro in that
thread as the first thing you do:
(TBT)

	/* do this before doing anything else with some_perl */
	PERL_SET_CONTEXT(some_perl);

	... other Perl API calls on some_perl go here ...

=head2 Future Plans and PERL_IMPLICIT_SYS

=begin original

Just as PERL_IMPLICIT_CONTEXT provides a way to bundle up everything
that the interpreter knows about itself and pass it around, so too are
there plans to allow the interpreter to bundle up everything it knows
about the environment it's running on.  This is enabled with the
PERL_IMPLICIT_SYS macro.  Currently it only works with USE_ITHREADS on
Windows.

=end original

Just as PERL_IMPLICIT_CONTEXT provides a way to bundle up everything
that the interpreter knows about itself and pass it around, so too are
there plans to allow the interpreter to bundle up everything it knows
about the environment it's running on.  This is enabled with the
PERL_IMPLICIT_SYS macro.  Currently it only works with USE_ITHREADS on
Windows.
(TBT)

=begin original

This allows the ability to provide an extra pointer (called the "host"
environment) for all the system calls.  This makes it possible for
all the system stuff to maintain their own state, broken down into
seven C structures.  These are thin wrappers around the usual system
calls (see win32/perllib.c) for the default perl executable, but for a
more ambitious host (like the one that would do fork() emulation) all
the extra work needed to pretend that different interpreters are
actually different "processes", would be done here.

=end original

This allows the ability to provide an extra pointer (called the "host"
environment) for all the system calls.  This makes it possible for
all the system stuff to maintain their own state, broken down into
seven C structures.  These are thin wrappers around the usual system
calls (see win32/perllib.c) for the default perl executable, but for a
more ambitious host (like the one that would do fork() emulation) all
the extra work needed to pretend that different interpreters are
actually different "processes", would be done here.
(TBT)

=begin original

The Perl engine/interpreter and the host are orthogonal entities.
There could be one or more interpreters in a process, and one or
more "hosts", with free association between them.

=end original

The Perl engine/interpreter and the host are orthogonal entities.
There could be one or more interpreters in a process, and one or
more "hosts", with free association between them.
(TBT)

=head1 Internal Functions

=begin original

All of Perl's internal functions which will be exposed to the outside
world are prefixed by C<Perl_> so that they will not conflict with XS
functions or functions used in a program in which Perl is embedded.
Similarly, all global variables begin with C<PL_>. (By convention,
static functions start with C<S_>.)

=end original

All of Perl's internal functions which will be exposed to the outside
world are prefixed by C<Perl_> so that they will not conflict with XS
functions or functions used in a program in which Perl is embedded.
Similarly, all global variables begin with C<PL_>. (By convention,
static functions start with C<S_>.)
(TBT)

=begin original

Inside the Perl core, you can get at the functions either with or
without the C<Perl_> prefix, thanks to a bunch of defines that live in
F<embed.h>. This header file is generated automatically from
F<embed.pl> and F<embed.fnc>. F<embed.pl> also creates the prototyping
header files for the internal functions, generates the documentation
and a lot of other bits and pieces. It's important that when you add
a new function to the core or change an existing one, you change the
data in the table in F<embed.fnc> as well. Here's a sample entry from
that table:

=end original

Inside the Perl core, you can get at the functions either with or
without the C<Perl_> prefix, thanks to a bunch of defines that live in
F<embed.h>. This header file is generated automatically from
F<embed.pl> and F<embed.fnc>. F<embed.pl> also creates the prototyping
header files for the internal functions, generates the documentation
and a lot of other bits and pieces. It's important that when you add
a new function to the core or change an existing one, you change the
data in the table in F<embed.fnc> as well. Here's a sample entry from
that table:
(TBT)

    Apd |SV**   |av_fetch   |AV* ar|I32 key|I32 lval

=begin original

The second column is the return type, the third column the name. Columns
after that are the arguments. The first column is a set of flags:

=end original

The second column is the return type, the third column the name. Columns
after that are the arguments. The first column is a set of flags:
(TBT)

=over 3

=item A

=begin original

This function is a part of the public API. All such functions should also
have 'd', very few do not.

=end original

This function is a part of the public API. All such functions should also
have 'd', very few do not.
(TBT)

=item p

=begin original

This function has a C<Perl_> prefix; i.e. it is defined as
C<Perl_av_fetch>.

=end original

This function has a C<Perl_> prefix; i.e. it is defined as
C<Perl_av_fetch>.
(TBT)

=item d

=begin original

This function has documentation using the C<apidoc> feature which we'll
look at in a second.  Some functions have 'd' but not 'A'; docs are good.

=end original

This function has documentation using the C<apidoc> feature which we'll
look at in a second.  Some functions have 'd' but not 'A'; docs are good.
(TBT)

=back

=begin original

Other available flags are:

=end original

Other available flags are:
(TBT)

=over 3

=item s

=begin original

This is a static function and is defined as C<STATIC S_whatever>, and
usually called within the sources as C<whatever(...)>.

=end original

This is a static function and is defined as C<STATIC S_whatever>, and
usually called within the sources as C<whatever(...)>.
(TBT)

=item n

=begin original

This does not need a interpreter context, so the definition has no
C<pTHX>, and it follows that callers don't use C<aTHX>.  (See
L<perlguts/Background and PERL_IMPLICIT_CONTEXT>.)

=end original

This does not need a interpreter context, so the definition has no
C<pTHX>, and it follows that callers don't use C<aTHX>.  (See
L<perlguts/Background and PERL_IMPLICIT_CONTEXT>.)
(TBT)

=item r

=begin original

This function never returns; C<croak>, C<exit> and friends.

=end original

This function never returns; C<croak>, C<exit> and friends.
(TBT)

=item f

=begin original

This function takes a variable number of arguments, C<printf> style.
The argument list should end with C<...>, like this:

=end original

This function takes a variable number of arguments, C<printf> style.
The argument list should end with C<...>, like this:
(TBT)

    Afprd   |void   |croak          |const char* pat|...

=item M

=begin original

This function is part of the experimental development API, and may change
or disappear without notice.

=end original

This function is part of the experimental development API, and may change
or disappear without notice.
(TBT)

=item o

=begin original

This function should not have a compatibility macro to define, say,
C<Perl_parse> to C<parse>. It must be called as C<Perl_parse>.

=end original

This function should not have a compatibility macro to define, say,
C<Perl_parse> to C<parse>. It must be called as C<Perl_parse>.
(TBT)

=item x

=begin original

This function isn't exported out of the Perl core.

=end original

この関数は Perl コアの外側へエクスポートされません。

=item m

=begin original

This is implemented as a macro.

=end original

これはマクロとして実装されています。

=item X

=begin original

This function is explicitly exported.

=end original

この関数は明示的にエクスポートされます。

=item E

=begin original

This function is visible to extensions included in the Perl core.

=end original

この関数は Perl コアに含まれるエクステンションから見えます。

=item b

=begin original

Binary backward compatibility; this function is a macro but also has
a C<Perl_> implementation (which is exported).

=end original

Binary backward compatibility; this function is a macro but also has
a C<Perl_> implementation (which is exported).
(TBT)

=item others

=begin original

See the comments at the top of C<embed.fnc> for others.

=end original

See the comments at the top of C<embed.fnc> for others.
(TBT)

=back

=begin original

If you edit F<embed.pl> or F<embed.fnc>, you will need to run
C<make regen_headers> to force a rebuild of F<embed.h> and other
auto-generated files.

=end original

If you edit F<embed.pl> or F<embed.fnc>, you will need to run
C<make regen_headers> to force a rebuild of F<embed.h> and other
auto-generated files.
(TBT)

=head2 Formatted Printing of IVs, UVs, and NVs

=begin original

If you are printing IVs, UVs, or NVS instead of the stdio(3) style
formatting codes like C<%d>, C<%ld>, C<%f>, you should use the
following macros for portability

=end original

If you are printing IVs, UVs, or NVS instead of the stdio(3) style
formatting codes like C<%d>, C<%ld>, C<%f>, you should use the
following macros for portability
(TBT)

        IVdf            IV in decimal
        UVuf            UV in decimal
        UVof            UV in octal
        UVxf            UV in hexadecimal
        NVef            NV %e-like
        NVff            NV %f-like
        NVgf            NV %g-like

=begin original

These will take care of 64-bit integers and long doubles.
For example:

=end original

These will take care of 64-bit integers and long doubles.
For example:
(TBT)

        printf("IV is %"IVdf"\n", iv);

=begin original

The IVdf will expand to whatever is the correct format for the IVs.

=end original

The IVdf will expand to whatever is the correct format for the IVs.
(TBT)

=begin original

If you are printing addresses of pointers, use UVxf combined
with PTR2UV(), do not use %lx or %p.

=end original

If you are printing addresses of pointers, use UVxf combined
with PTR2UV(), do not use %lx or %p.
(TBT)

=head2 Pointer-To-Integer and Integer-To-Pointer

=begin original

Because pointer size does not necessarily equal integer size,
use the follow macros to do it right.

=end original

Because pointer size does not necessarily equal integer size,
use the follow macros to do it right.
(TBT)

        PTR2UV(pointer)
        PTR2IV(pointer)
        PTR2NV(pointer)
        INT2PTR(pointertotype, integer)

=begin original

For example:

=end original

例えば:

        IV  iv = ...;
        SV *sv = INT2PTR(SV*, iv);

=begin original

and

=end original

および

        AV *av = ...;
        UV  uv = PTR2UV(av);

=head2 Exception Handling

=begin original

There are a couple of macros to do very basic exception handling in XS
modules. You have to define C<NO_XSLOCKS> before including F<XSUB.h> to
be able to use these macros:

=end original

There are a couple of macros to do very basic exception handling in XS
modules. You have to define C<NO_XSLOCKS> before including F<XSUB.h> to
be able to use these macros:
(TBT)

        #define NO_XSLOCKS
        #include "XSUB.h"

=begin original

You can use these macros if you call code that may croak, but you need
to do some cleanup before giving control back to Perl. For example:

=end original

You can use these macros if you call code that may croak, but you need
to do some cleanup before giving control back to Perl. For example:
(TBT)

        dXCPT;    /* set up necessary variables */

        XCPT_TRY_START {
          code_that_may_croak();
        } XCPT_TRY_END

        XCPT_CATCH
        {
          /* do cleanup here */
          XCPT_RETHROW;
        }

=begin original

Note that you always have to rethrow an exception that has been
caught. Using these macros, it is not possible to just catch the
exception and ignore it. If you have to ignore the exception, you
have to use the C<call_*> function.

=end original

Note that you always have to rethrow an exception that has been
caught. Using these macros, it is not possible to just catch the
exception and ignore it. If you have to ignore the exception, you
have to use the C<call_*> function.
(TBT)

=begin original

The advantage of using the above macros is that you don't have
to setup an extra function for C<call_*>, and that using these
macros is faster than using C<call_*>.

=end original

The advantage of using the above macros is that you don't have
to setup an extra function for C<call_*>, and that using these
macros is faster than using C<call_*>.
(TBT)

=head2 Source Documentation

=begin original

There's an effort going on to document the internal functions and
automatically produce reference manuals from them - L<perlapi> is one
such manual which details all the functions which are available to XS
writers. L<perlintern> is the autogenerated manual for the functions
which are not part of the API and are supposedly for internal use only.

=end original

There's an effort going on to document the internal functions and
automatically produce reference manuals from them - L<perlapi> is one
such manual which details all the functions which are available to XS
writers. L<perlintern> is the autogenerated manual for the functions
which are not part of the API and are supposedly for internal use only.
(TBT)

=begin original

Source documentation is created by putting POD comments into the C
source, like this:

=end original

Source documentation is created by putting POD comments into the C
source, like this:
(TBT)

 /*
 =for apidoc sv_setiv

 Copies an integer into the given SV.  Does not handle 'set' magic.  See
 C<sv_setiv_mg>.

 =cut
 */

=begin original

Please try and supply some documentation if you add functions to the
Perl core.

=end original

Please try and supply some documentation if you add functions to the
Perl core.
(TBT)

=head2 Backwards compatibility

(後方互換性)

=begin original

The Perl API changes over time. New functions are added or the interfaces
of existing functions are changed. The C<Devel::PPPort> module tries to
provide compatibility code for some of these changes, so XS writers don't
have to code it themselves when supporting multiple versions of Perl.

=end original

The Perl API changes over time. New functions are added or the interfaces
of existing functions are changed. The C<Devel::PPPort> module tries to
provide compatibility code for some of these changes, so XS writers don't
have to code it themselves when supporting multiple versions of Perl.
(TBT)

=begin original

C<Devel::PPPort> generates a C header file F<ppport.h> that can also
be run as a Perl script. To generate F<ppport.h>, run:

=end original

C<Devel::PPPort> generates a C header file F<ppport.h> that can also
be run as a Perl script. To generate F<ppport.h>, run:
(TBT)

    perl -MDevel::PPPort -eDevel::PPPort::WriteFile

=begin original

Besides checking existing XS code, the script can also be used to retrieve
compatibility information for various API calls using the C<--api-info>
command line switch. For example:

=end original

Besides checking existing XS code, the script can also be used to retrieve
compatibility information for various API calls using the C<--api-info>
command line switch. For example:
(TBT)

  % perl ppport.h --api-info=sv_magicext

=begin original

For details, see C<perldoc ppport.h>.

=end original

詳細については、C<perldoc ppport.h> を参照してください。

=head1 Unicode Support

(Unicode 対応)

=begin original

Perl 5.6.0 introduced Unicode support. It's important for porters and XS
writers to understand this support and make sure that the code they
write does not corrupt Unicode data.

=end original

Perl 5.6.0 introduced Unicode support. It's important for porters and XS
writers to understand this support and make sure that the code they
write does not corrupt Unicode data.
(TBT)

=head2 What B<is> Unicode, anyway?

(ところで、Unicode って B<何> ?)

=begin original

In the olden, less enlightened times, we all used to use ASCII. Most of
us did, anyway. The big problem with ASCII is that it's American. Well,
no, that's not actually the problem; the problem is that it's not
particularly useful for people who don't use the Roman alphabet. What
used to happen was that particular languages would stick their own
alphabet in the upper range of the sequence, between 128 and 255. Of
course, we then ended up with plenty of variants that weren't quite
ASCII, and the whole point of it being a standard was lost.

=end original

In the olden, less enlightened times, we all used to use ASCII. Most of
us did, anyway. The big problem with ASCII is that it's American. Well,
no, that's not actually the problem; the problem is that it's not
particularly useful for people who don't use the Roman alphabet. What
used to happen was that particular languages would stick their own
alphabet in the upper range of the sequence, between 128 and 255. Of
course, we then ended up with plenty of variants that weren't quite
ASCII, and the whole point of it being a standard was lost.
(TBT)

=begin original

Worse still, if you've got a language like Chinese or
Japanese that has hundreds or thousands of characters, then you really
can't fit them into a mere 256, so they had to forget about ASCII
altogether, and build their own systems using pairs of numbers to refer
to one character.

=end original

Worse still, if you've got a language like Chinese or
Japanese that has hundreds or thousands of characters, then you really
can't fit them into a mere 256, so they had to forget about ASCII
altogether, and build their own systems using pairs of numbers to refer
to one character.
(TBT)

=begin original

To fix this, some people formed Unicode, Inc. and
produced a new character set containing all the characters you can
possibly think of and more. There are several ways of representing these
characters, and the one Perl uses is called UTF-8. UTF-8 uses
a variable number of bytes to represent a character. You can learn more
about Unicode and Perl's Unicode model in L<perlunicode>.

=end original

To fix this, some people formed Unicode, Inc. and
produced a new character set containing all the characters you can
possibly think of and more. There are several ways of representing these
characters, and the one Perl uses is called UTF-8. UTF-8 uses
a variable number of bytes to represent a character. You can learn more
about Unicode and Perl's Unicode model in L<perlunicode>.
(TBT)

=head2 How can I recognise a UTF-8 string?

(UTF-8 文字列を認識するには?)

=begin original

You can't. This is because UTF-8 data is stored in bytes just like
non-UTF-8 data. The Unicode character 200, (C<0xC8> for you hex types)
capital E with a grave accent, is represented by the two bytes
C<v196.172>. Unfortunately, the non-Unicode string C<chr(196).chr(172)>
has that byte sequence as well. So you can't tell just by looking - this
is what makes Unicode input an interesting problem.

=end original

You can't. This is because UTF-8 data is stored in bytes just like
non-UTF-8 data. The Unicode character 200, (C<0xC8> for you hex types)
capital E with a grave accent, is represented by the two bytes
C<v196.172>. Unfortunately, the non-Unicode string C<chr(196).chr(172)>
has that byte sequence as well. So you can't tell just by looking - this
is what makes Unicode input an interesting problem.
(TBT)

=begin original

In general, you either have to know what you're dealing with, or you
have to guess.  The API function C<is_utf8_string> can help; it'll tell
you if a string contains only valid UTF-8 characters. However, it can't
do the work for you. On a character-by-character basis, C<is_utf8_char>
will tell you whether the current character in a string is valid UTF-8. 

=end original

In general, you either have to know what you're dealing with, or you
have to guess.  The API function C<is_utf8_string> can help; it'll tell
you if a string contains only valid UTF-8 characters. However, it can't
do the work for you. On a character-by-character basis, C<is_utf8_char>
will tell you whether the current character in a string is valid UTF-8. 
(TBT)

=head2 How does UTF-8 represent Unicode characters?

=begin original

As mentioned above, UTF-8 uses a variable number of bytes to store a
character. Characters with values 0...127 are stored in one byte, just
like good ol' ASCII. Character 128 is stored as C<v194.128>; this
continues up to character 191, which is C<v194.191>. Now we've run out of
bits (191 is binary C<10111111>) so we move on; 192 is C<v195.128>. And
so it goes on, moving to three bytes at character 2048.

=end original

As mentioned above, UTF-8 uses a variable number of bytes to store a
character. Characters with values 0...127 are stored in one byte, just
like good ol' ASCII. Character 128 is stored as C<v194.128>; this
continues up to character 191, which is C<v194.191>. Now we've run out of
bits (191 is binary C<10111111>) so we move on; 192 is C<v195.128>. And
so it goes on, moving to three bytes at character 2048.
(TBT)

=begin original

Assuming you know you're dealing with a UTF-8 string, you can find out
how long the first character in it is with the C<UTF8SKIP> macro:

=end original

Assuming you know you're dealing with a UTF-8 string, you can find out
how long the first character in it is with the C<UTF8SKIP> macro:
(TBT)

    char *utf = "\305\233\340\240\201";
    I32 len;

    len = UTF8SKIP(utf); /* len is 2 here */
    utf += len;
    len = UTF8SKIP(utf); /* len is 3 here */

=begin original

Another way to skip over characters in a UTF-8 string is to use
C<utf8_hop>, which takes a string and a number of characters to skip
over. You're on your own about bounds checking, though, so don't use it
lightly.

=end original

Another way to skip over characters in a UTF-8 string is to use
C<utf8_hop>, which takes a string and a number of characters to skip
over. You're on your own about bounds checking, though, so don't use it
lightly.
(TBT)

=begin original

All bytes in a multi-byte UTF-8 character will have the high bit set,
so you can test if you need to do something special with this
character like this (the UTF8_IS_INVARIANT() is a macro that tests
whether the byte can be encoded as a single byte even in UTF-8):

=end original

All bytes in a multi-byte UTF-8 character will have the high bit set,
so you can test if you need to do something special with this
character like this (the UTF8_IS_INVARIANT() is a macro that tests
whether the byte can be encoded as a single byte even in UTF-8):
(TBT)

    U8 *utf;
    UV uv;	/* Note: a UV, not a U8, not a char */

    if (!UTF8_IS_INVARIANT(*utf))
        /* Must treat this as UTF-8 */
        uv = utf8_to_uv(utf);
    else
        /* OK to treat this character as a byte */
        uv = *utf;

=begin original

You can also see in that example that we use C<utf8_to_uv> to get the
value of the character; the inverse function C<uv_to_utf8> is available
for putting a UV into UTF-8:

=end original

You can also see in that example that we use C<utf8_to_uv> to get the
value of the character; the inverse function C<uv_to_utf8> is available
for putting a UV into UTF-8:
(TBT)

    if (!UTF8_IS_INVARIANT(uv))
        /* Must treat this as UTF8 */
        utf8 = uv_to_utf8(utf8, uv);
    else
        /* OK to treat this character as a byte */
        *utf8++ = uv;

=begin original

You B<must> convert characters to UVs using the above functions if
you're ever in a situation where you have to match UTF-8 and non-UTF-8
characters. You may not skip over UTF-8 characters in this case. If you
do this, you'll lose the ability to match hi-bit non-UTF-8 characters;
for instance, if your UTF-8 string contains C<v196.172>, and you skip
that character, you can never match a C<chr(200)> in a non-UTF-8 string.
So don't do that!

=end original

You B<must> convert characters to UVs using the above functions if
you're ever in a situation where you have to match UTF-8 and non-UTF-8
characters. You may not skip over UTF-8 characters in this case. If you
do this, you'll lose the ability to match hi-bit non-UTF-8 characters;
for instance, if your UTF-8 string contains C<v196.172>, and you skip
that character, you can never match a C<chr(200)> in a non-UTF-8 string.
So don't do that!
(TBT)

=head2 How does Perl store UTF-8 strings?

=begin original

Currently, Perl deals with Unicode strings and non-Unicode strings
slightly differently. A flag in the SV, C<SVf_UTF8>, indicates that the
string is internally encoded as UTF-8. Without it, the byte value is the
codepoint number and vice versa (in other words, the string is encoded
as iso-8859-1). You can check and manipulate this flag with the
following macros:

=end original

Currently, Perl deals with Unicode strings and non-Unicode strings
slightly differently. A flag in the SV, C<SVf_UTF8>, indicates that the
string is internally encoded as UTF-8. Without it, the byte value is the
codepoint number and vice versa (in other words, the string is encoded
as iso-8859-1). You can check and manipulate this flag with the
following macros:
(TBT)

    SvUTF8(sv)
    SvUTF8_on(sv)
    SvUTF8_off(sv)

=begin original

This flag has an important effect on Perl's treatment of the string: if
Unicode data is not properly distinguished, regular expressions,
C<length>, C<substr> and other string handling operations will have
undesirable results.

=end original

This flag has an important effect on Perl's treatment of the string: if
Unicode data is not properly distinguished, regular expressions,
C<length>, C<substr> and other string handling operations will have
undesirable results.
(TBT)

=begin original

The problem comes when you have, for instance, a string that isn't
flagged as UTF-8, and contains a byte sequence that could be UTF-8 -
especially when combining non-UTF-8 and UTF-8 strings.

=end original

The problem comes when you have, for instance, a string that isn't
flagged as UTF-8, and contains a byte sequence that could be UTF-8 -
especially when combining non-UTF-8 and UTF-8 strings.
(TBT)

=begin original

Never forget that the C<SVf_UTF8> flag is separate to the PV value; you
need be sure you don't accidentally knock it off while you're
manipulating SVs. More specifically, you cannot expect to do this:

=end original

Never forget that the C<SVf_UTF8> flag is separate to the PV value; you
need be sure you don't accidentally knock it off while you're
manipulating SVs. More specifically, you cannot expect to do this:
(TBT)

    SV *sv;
    SV *nsv;
    STRLEN len;
    char *p;

    p = SvPV(sv, len);
    frobnicate(p);
    nsv = newSVpvn(p, len);

=begin original

The C<char*> string does not tell you the whole story, and you can't
copy or reconstruct an SV just by copying the string value. Check if the
old SV has the UTF8 flag set, and act accordingly:

=end original

The C<char*> string does not tell you the whole story, and you can't
copy or reconstruct an SV just by copying the string value. Check if the
old SV has the UTF8 flag set, and act accordingly:
(TBT)

    p = SvPV(sv, len);
    frobnicate(p);
    nsv = newSVpvn(p, len);
    if (SvUTF8(sv))
        SvUTF8_on(nsv);

=begin original

In fact, your C<frobnicate> function should be made aware of whether or
not it's dealing with UTF-8 data, so that it can handle the string
appropriately.

=end original

In fact, your C<frobnicate> function should be made aware of whether or
not it's dealing with UTF-8 data, so that it can handle the string
appropriately.
(TBT)

=begin original

Since just passing an SV to an XS function and copying the data of
the SV is not enough to copy the UTF8 flags, even less right is just
passing a C<char *> to an XS function.

=end original

Since just passing an SV to an XS function and copying the data of
the SV is not enough to copy the UTF8 flags, even less right is just
passing a C<char *> to an XS function.
(TBT)

=head2 How do I convert a string to UTF-8?

=begin original

If you're mixing UTF-8 and non-UTF-8 strings, it is necessary to upgrade
one of the strings to UTF-8. If you've got an SV, the easiest way to do
this is:

=end original

If you're mixing UTF-8 and non-UTF-8 strings, it is necessary to upgrade
one of the strings to UTF-8. If you've got an SV, the easiest way to do
this is:
(TBT)

    sv_utf8_upgrade(sv);

=begin original

However, you must not do this, for example:

=end original

However, you must not do this, for example:
(TBT)

    if (!SvUTF8(left))
        sv_utf8_upgrade(left);

=begin original

If you do this in a binary operator, you will actually change one of the
strings that came into the operator, and, while it shouldn't be noticeable
by the end user, it can cause problems in deficient code.

=end original

If you do this in a binary operator, you will actually change one of the
strings that came into the operator, and, while it shouldn't be noticeable
by the end user, it can cause problems in deficient code.
(TBT)

=begin original

Instead, C<bytes_to_utf8> will give you a UTF-8-encoded B<copy> of its
string argument. This is useful for having the data available for
comparisons and so on, without harming the original SV. There's also
C<utf8_to_bytes> to go the other way, but naturally, this will fail if
the string contains any characters above 255 that can't be represented
in a single byte.

=end original

Instead, C<bytes_to_utf8> will give you a UTF-8-encoded B<copy> of its
string argument. This is useful for having the data available for
comparisons and so on, without harming the original SV. There's also
C<utf8_to_bytes> to go the other way, but naturally, this will fail if
the string contains any characters above 255 that can't be represented
in a single byte.
(TBT)

=head2 Is there anything else I need to know?

(他に知っておくべきことは?)

=begin original

Not really. Just remember these things:

=end original

実際にはありません。
単に以下のことを覚えておいてください:

=over 3

=item *

=begin original

There's no way to tell if a string is UTF-8 or not. You can tell if an SV
is UTF-8 by looking at is C<SvUTF8> flag. Don't forget to set the flag if
something should be UTF-8. Treat the flag as part of the PV, even though
it's not - if you pass on the PV to somewhere, pass on the flag too.

=end original

There's no way to tell if a string is UTF-8 or not. You can tell if an SV
is UTF-8 by looking at is C<SvUTF8> flag. Don't forget to set the flag if
something should be UTF-8. Treat the flag as part of the PV, even though
it's not - if you pass on the PV to somewhere, pass on the flag too.
(TBT)

=item *

=begin original

If a string is UTF-8, B<always> use C<utf8_to_uv> to get at the value,
unless C<UTF8_IS_INVARIANT(*s)> in which case you can use C<*s>.

=end original

If a string is UTF-8, B<always> use C<utf8_to_uv> to get at the value,
unless C<UTF8_IS_INVARIANT(*s)> in which case you can use C<*s>.
(TBT)

=item *

=begin original

When writing a character C<uv> to a UTF-8 string, B<always> use
C<uv_to_utf8>, unless C<UTF8_IS_INVARIANT(uv))> in which case
you can use C<*s = uv>.

=end original

When writing a character C<uv> to a UTF-8 string, B<always> use
C<uv_to_utf8>, unless C<UTF8_IS_INVARIANT(uv))> in which case
you can use C<*s = uv>.
(TBT)

=item *

=begin original

Mixing UTF-8 and non-UTF-8 strings is tricky. Use C<bytes_to_utf8> to get
a new string which is UTF-8 encoded. There are tricks you can use to
delay deciding whether you need to use a UTF-8 string until you get to a
high character - C<HALF_UPGRADE> is one of those.

=end original

Mixing UTF-8 and non-UTF-8 strings is tricky. Use C<bytes_to_utf8> to get
a new string which is UTF-8 encoded. There are tricks you can use to
delay deciding whether you need to use a UTF-8 string until you get to a
high character - C<HALF_UPGRADE> is one of those.
(TBT)

=back

=head1 Custom Operators

=begin original

Custom operator support is a new experimental feature that allows you to
define your own ops. This is primarily to allow the building of
interpreters for other languages in the Perl core, but it also allows
optimizations through the creation of "macro-ops" (ops which perform the
functions of multiple ops which are usually executed together, such as
C<gvsv, gvsv, add>.)

=end original

Custom operator support is a new experimental feature that allows you to
define your own ops. This is primarily to allow the building of
interpreters for other languages in the Perl core, but it also allows
optimizations through the creation of "macro-ops" (ops which perform the
functions of multiple ops which are usually executed together, such as
C<gvsv, gvsv, add>.)
(TBT)

=begin original

This feature is implemented as a new op type, C<OP_CUSTOM>. The Perl
core does not "know" anything special about this op type, and so it will
not be involved in any optimizations. This also means that you can
define your custom ops to be any op structure - unary, binary, list and
so on - you like.

=end original

This feature is implemented as a new op type, C<OP_CUSTOM>. The Perl
core does not "know" anything special about this op type, and so it will
not be involved in any optimizations. This also means that you can
define your custom ops to be any op structure - unary, binary, list and
so on - you like.
(TBT)

=begin original

It's important to know what custom operators won't do for you. They
won't let you add new syntax to Perl, directly. They won't even let you
add new keywords, directly. In fact, they won't change the way Perl
compiles a program at all. You have to do those changes yourself, after
Perl has compiled the program. You do this either by manipulating the op
tree using a C<CHECK> block and the C<B::Generate> module, or by adding
a custom peephole optimizer with the C<optimize> module.

=end original

It's important to know what custom operators won't do for you. They
won't let you add new syntax to Perl, directly. They won't even let you
add new keywords, directly. In fact, they won't change the way Perl
compiles a program at all. You have to do those changes yourself, after
Perl has compiled the program. You do this either by manipulating the op
tree using a C<CHECK> block and the C<B::Generate> module, or by adding
a custom peephole optimizer with the C<optimize> module.
(TBT)

=begin original

When you do this, you replace ordinary Perl ops with custom ops by
creating ops with the type C<OP_CUSTOM> and the C<pp_addr> of your own
PP function. This should be defined in XS code, and should look like
the PP ops in C<pp_*.c>. You are responsible for ensuring that your op
takes the appropriate number of values from the stack, and you are
responsible for adding stack marks if necessary.

=end original

When you do this, you replace ordinary Perl ops with custom ops by
creating ops with the type C<OP_CUSTOM> and the C<pp_addr> of your own
PP function. This should be defined in XS code, and should look like
the PP ops in C<pp_*.c>. You are responsible for ensuring that your op
takes the appropriate number of values from the stack, and you are
responsible for adding stack marks if necessary.
(TBT)

=begin original

You should also "register" your op with the Perl interpreter so that it
can produce sensible error and warning messages. Since it is possible to
have multiple custom ops within the one "logical" op type C<OP_CUSTOM>,
Perl uses the value of C<< o->op_ppaddr >> as a key into the
C<PL_custom_op_descs> and C<PL_custom_op_names> hashes. This means you
need to enter a name and description for your op at the appropriate
place in the C<PL_custom_op_names> and C<PL_custom_op_descs> hashes.

=end original

You should also "register" your op with the Perl interpreter so that it
can produce sensible error and warning messages. Since it is possible to
have multiple custom ops within the one "logical" op type C<OP_CUSTOM>,
Perl uses the value of C<< o->op_ppaddr >> as a key into the
C<PL_custom_op_descs> and C<PL_custom_op_names> hashes. This means you
need to enter a name and description for your op at the appropriate
place in the C<PL_custom_op_names> and C<PL_custom_op_descs> hashes.
(TBT)

=begin original

Forthcoming versions of C<B::Generate> (version 1.0 and above) should
directly support the creation of custom ops by name.

=end original

Forthcoming versions of C<B::Generate> (version 1.0 and above) should
directly support the creation of custom ops by name.
(TBT)

=head1 AUTHORS

=begin original

Until May 1997, this document was maintained by Jeff Okamoto
E<lt>okamoto@corp.hp.comE<gt>.  It is now maintained as part of Perl
itself by the Perl 5 Porters E<lt>perl5-porters@perl.orgE<gt>.

=end original

Until May 1997, this document was maintained by Jeff Okamoto
E<lt>okamoto@corp.hp.comE<gt>.  It is now maintained as part of Perl
itself by the Perl 5 Porters E<lt>perl5-porters@perl.orgE<gt>.
(TBT)

=begin original

With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.

=end original

With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.
(TBT)

=head1 SEE ALSO

perlapi(1), perlintern(1), perlxs(1), perlembed(1)

=begin meta

Created: KIMURA Koichi
Updated: Kentaro Shirakata <argrath@ub32.org> (5.10.0-)

=end meta

